{
    "session_uid": "Tarcisio",
    "type": "FROM_PARTICIPANT",
    "items": [
        {
            "id": "eye-gazing-tag-19",
            "tag": "SPAN",
            "text": "The Java controller for a fragment looks like:",
            "href": "Creating and Using Fragments | CodePath Android Cliffnotes"
        },
        {
            "id": "eye-gazing-tag-24",
            "tag": "SPAN",
            "text": "To add the fragment statically, simply embed the fragment in the activity's xml layout file:",
            "href": "Creating and Using Fragments | CodePath Android Cliffnotes"
        },
        {
            "id": "eye-gazing-tag-27",
            "tag": "SPAN",
            "text": "The FragmentManager class and the FragmentTransaction class allow you to add, remove and replace fragments in the layout of your activity at runtime.",
            "href": "Creating and Using Fragments | CodePath Android Cliffnotes"
        },
        {
            "id": "eye-gazing-tag-28",
            "tag": "SPAN",
            "text": "In this case, you want to add a \"placeholder\" container (usually a FrameLayout) to your activity where the fragment is inserted at runtime:",
            "href": "Creating and Using Fragments | CodePath Android Cliffnotes"
        },
        {
            "id": "eye-gazing-tag-29",
            "tag": "SPAN",
            "text": "and then you can use the FragmentManager to create a FragmentTransaction which allows us to add fragments to the FrameLayout at runtime:",
            "href": "Creating and Using Fragments | CodePath Android Cliffnotes"
        },
        {
            "id": "eye-gazing-tag-30",
            "tag": "SPAN",
            "text": "If the fragment should always be within the activity, use XML to statically add the fragment but in more complex cases be sure to use the Java-based approach.",
            "href": "Creating and Using Fragments | CodePath Android Cliffnotes"
        },
        {
            "id": "eye-gazing-tag-181",
            "tag": "SPAN",
            "text": "\nonCreate() is called to do initial creation of the fragment.",
            "href": "Creating and Using Fragments | CodePath Android Cliffnotes"
        },
        {
            "id": "eye-gazing-tag-188",
            "tag": "SPAN",
            "text": "\nonStart() is called once the fragment is ready to be displayed on screen.",
            "href": "Creating and Using Fragments | CodePath Android Cliffnotes"
        },
        {
            "id": "eye-gazing-tag-32",
            "tag": "SPAN",
            "text": "The lifecycle execution order is mapped out below:",
            "href": "Creating and Using Fragments | CodePath Android Cliffnotes"
        },
        {
            "id": "eye-gazing-tag-46",
            "tag": "SPAN",
            "text": "Fragments should generally only communicate with their direct parent activity.",
            "href": "Creating and Using Fragments | CodePath Android Cliffnotes"
        },
        {
            "id": "eye-gazing-tag-47",
            "tag": "SPAN",
            "text": "Fragments communicate through their parent activity allowing the activity to manage the inputs and outputs of data from that fragment coordinating with other fragments or activities.",
            "href": "Creating and Using Fragments | CodePath Android Cliffnotes"
        },
        {
            "id": "eye-gazing-tag-52",
            "tag": "SPAN",
            "text": "The important thing to keep in mind is that fragments should not directly communicate with each other and should generally only communicate with their parent activity.",
            "href": "Creating and Using Fragments | CodePath Android Cliffnotes"
        },
        {
            "id": "eye-gazing-tag-53",
            "tag": "SPAN",
            "text": " Fragments should be modular, standalone and reusable components.",
            "href": "Creating and Using Fragments | CodePath Android Cliffnotes"
        },
        {
            "id": "eye-gazing-tag-73",
            "tag": "SPAN",
            "text": "The FragmentManager is responsible for all runtime management of fragments including adding, removing, hiding, showing, or otherwise navigating between fragments.",
            "href": "Creating and Using Fragments | CodePath Android Cliffnotes"
        },
        {
            "id": "eye-gazing-tag-75",
            "tag": "SPAN",
            "text": "Important available methods are outlined below:",
            "href": "Creating and Using Fragments | CodePath Android Cliffnotes"
        },
        {
            "id": "eye-gazing-tag-93",
            "tag": "SPAN",
            "text": "In many of the examples above, we call transaction.replace(...) to load a dynamic fragment which first removes the existing fragment from the activity invoking onStop and onDestroy for that fragment before adding the new fragment to the container.",
            "href": "Creating and Using Fragments | CodePath Android Cliffnotes"
        },
        {
            "id": "eye-gazing-tag-95",
            "tag": "SPAN",
            "text": "However, in many cases, we may want to keep both fragments around in the container and simply toggle their visibility.",
            "href": "Creating and Using Fragments | CodePath Android Cliffnotes"
        },
        {
            "id": "eye-gazing-tag-97",
            "tag": "SPAN",
            "text": "To do this, we might modify this code:",
            "href": "Creating and Using Fragments | CodePath Android Cliffnotes"
        },
        {
            "id": "eye-gazing-tag-98",
            "tag": "SPAN",
            "text": "to this approach instead leveraging add, show, and hide in the FragmentTransaction:",
            "href": "Creating and Using Fragments | CodePath Android Cliffnotes"
        },
        {
            "id": "eye-gazing-tag-99",
            "tag": "SPAN",
            "text": "Using this approach, all three fragments will remain in the container once added initially and then we are simply revealing the desired fragment and hiding the others within the container.",
            "href": "Creating and Using Fragments | CodePath Android Cliffnotes"
        },
        {
            "id": "eye-gazing-tag-100",
            "tag": "SPAN",
            "text": "Check out this stackoverflow for a discussion on deciding when to replace vs hide and show.",
            "href": "Creating and Using Fragments | CodePath Android Cliffnotes"
        },
        {
            "id": "eye-gazing-tag-112",
            "tag": "SPAN",
            "text": "Note that you must always use getChildFragmentManager when interacting with nested fragments instead of using getSupportFragmentManager.",
            "href": "Creating and Using Fragments | CodePath Android Cliffnotes"
        },
        {
            "id": "eye-gazing-tag-113",
            "tag": "SPAN",
            "text": "Read this stackoverflow post for an explanation of the difference between the two.",
            "href": "Creating and Using Fragments | CodePath Android Cliffnotes"
        },
        {
            "id": "eye-gazing-tag-20",
            "tag": "SPAN",
            "text": "A Fragment is a combination of an XML layout file and a java class much like an Activity.",
            "href": "Creating and Using Fragments | CodePath Android Cliffnotes"
        }
    ]
}