{
  "session_uid": "katharine",
  "type": "FROM_PARTICIPANT",
  "items": [
    {
      "id": "eye-gazing-tag-1",
      "tag": "SPAN",
      "text": "In Android development, any time we want to show a vertical list of scrollable items we will use a LisView which has data populated using an Adapter.",
      "href": "Using an ArrayAdapter with ListView | CodePath Android Cliffnotes"
    },
    {
      "id": "uid-163",
      "tag": "CODE",
      "text": "LisView",
      "href": "Using an ArrayAdapter with ListView | CodePath Android Cliffnotes"
    },
    {
      "id": "eye-gazing-tag-2",
      "tag": "SPAN",
      "text": "The simplest adapter to use is called an ArrayAdapter because the adapter converts an ArrayList of objects into View items loaded into the ListView container.",
      "href": "Using an ArrayAdapter with ListView | CodePath Android Cliffnotes"
    },
    {
      "id": "eye-gazing-tag-8",
      "tag": "SPAN",
      "text": "When your ListView is connected to an adapter, the adapter will instantiate rows until the ListView has been fully populated with enough items to fill the full height of the screen.",
      "href": "Using an ArrayAdapter with ListView | CodePath Android Cliffnotes"
    },
    {
      "id": "eye-gazing-tag-11",
      "tag": "SPAN",
      "text": "Instead, as the user scrolls through the list, items that leave the screen are kept in memory for later use and then every new row that enters the screen reuses an older row kept around in memory.",
      "href": "Using an ArrayAdapter with ListView | CodePath Android Cliffnotes"
    },
    {
      "id": "eye-gazing-tag-12",
      "tag": "SPAN",
      "text": "In this way, even for a list of 1000 items, only ~7 item view rows are ever instantiated or held in memory.",
      "href": "Using an ArrayAdapter with ListView | CodePath Android Cliffnotes"
    },
    {
      "id": "eye-gazing-tag-13",
      "tag": "SPAN",
      "text": "Here is a visual overview of recycling:",
      "href": "Using an ArrayAdapter with ListView | CodePath Android Cliffnotes"
    },
    {
      "id": "eye-gazing-tag-36",
      "tag": "SPAN",
      "text": "The naive approach to this (without any view caching) looks like the following:",
      "href": "Using an ArrayAdapter with ListView | CodePath Android Cliffnotes"
    },
    {
      "id": "eye-gazing-tag-52",
      "tag": "SPAN",
      "text": "To improve performance, we should modify the custom adapter by applying the ViewHolder pattern which speeds up the population of the ListView considerably by caching view lookups for smoother, faster item loading:",
      "href": "Using an ArrayAdapter with ListView | CodePath Android Cliffnotes"
    },
    {
      "id": "eye-gazing-tag-54",
      "tag": "SPAN",
      "text": " Making calls to findViewById() can be slow in practice, and if your adapter has to call it for each View in your row for every single row then you can often run into performance issues.",
      "href": "Using an ArrayAdapter with ListView | CodePath Android Cliffnotes"
    },
    {
      "id": "eye-gazing-tag-56",
      "tag": "SPAN",
      "text": " Once your ListView has reached the max amount of rows it can display on a screen, Android is smart enough to begin recycling those row Views.",
      "href": "Using an ArrayAdapter with ListView | CodePath Android Cliffnotes"
    },
    {
      "id": "eye-gazing-tag-57",
      "tag": "SPAN",
      "text": " We check if a View is recycled with if (convertView == null).",
      "href": "Using an ArrayAdapter with ListView | CodePath Android Cliffnotes"
    },
    {
      "id": "uid-1108",
      "tag": "CODE",
      "text": "if (convertView == null)",
      "href": "Using an ArrayAdapter with ListView | CodePath Android Cliffnotes"
    },
    {
      "id": "eye-gazing-tag-58",
      "tag": "SPAN",
      "text": " If it is not null then we have a recycled View and can just change its values, otherwise we need to create a new row View.",
      "href": "Using an ArrayAdapter with ListView | CodePath Android Cliffnotes"
    },
    {
      "id": "eye-gazing-tag-59",
      "tag": "SPAN",
      "text": " The magic behind this is the setTag() method which lets us attach an arbitrary object onto a View object, which is how we save the already inflated View for future reuse.",
      "href": "Using an ArrayAdapter with ListView | CodePath Android Cliffnotes"
    }
  ]
}