{
  "session_uid": "Tarcisio",
  "type": "FROM_PARTICIPANT",
  "items": [
    {
      "id": "eye-gazing-tag-8",
      "tag": "SPAN",
      "text": "To be able to record, your app must tell the user that it will access the\ndevice's audio input.",
      "href": "MediaRecorder overview  |  Android Developers"
    },
    {
      "id": "eye-gazing-tag-9",
      "tag": "SPAN",
      "text": "You must include this permission tag in the app's manifest file:\n",
      "href": "MediaRecorder overview  |  Android Developers"
    },
    {
      "id": "uid-7949",
      "tag": "PRE",
      "text": "<uses-permission android:name=\"android.permission.RECORD_AUDIO\" />",
      "href": "MediaRecorder overview  |  Android Developers"
    },
    {
      "id": "eye-gazing-tag-2889",
      "tag": "SPAN",
      "text": "Set the audio source using\n        setAudioSource().",
      "href": "MediaRecorder overview  |  Android Developers"
    },
    {
      "id": "eye-gazing-tag-28",
      "tag": "SPAN",
      "text": "Starting with Android 8.0 (API level 26) you can use a MediaMuxer\nto record multiple simultaneous audio and video streams.",
      "href": "MediaRecorder overview  |  Android Developers"
    },
    {
      "id": "eye-gazing-tag-30",
      "tag": "SPAN",
      "text": "Use the addTrack()\nmethod to mix multipe tracks together.",
      "href": "MediaRecorder overview  |  Android Developers"
    },
    {
      "id": "sample-code",
      "tag": "H2",
      "text": "Sample code",
      "href": "MediaRecorder overview  |  Android Developers"
    },
    {
      "id": "uid-8037",
      "tag": "PRE",
      "text": "package com.android.audiorecordtest;import android.Manifest;import android.content.Context;import android.content.pm.PackageManager;import android.media.MediaPlayer;import android.media.MediaRecorder;import android.os.Bundle;import android.support.annotation.NonNull;import android.support.v4.app.ActivityCompat;import android.support.v7.app.AppCompatActivity;import android.util.Log;import android.view.View;import android.view.ViewGroup;import android.widget.Button;import android.widget.LinearLayout;import java.io.IOException;public class AudioRecordTest extends AppCompatActivity {    private static final String LOG_TAG = \"AudioRecordTest\";    private static final int REQUEST_RECORD_AUDIO_PERMISSION = 200;    private static String fileName = null;    private RecordButton recordButton = null;    private MediaRecorder recorder = null;    private PlayButton   playButton = null;    private MediaPlayer   player = null;    // Requesting permission to RECORD_AUDIO    private boolean permissionToRecordAccepted = false;    private String [] permissions = {Manifest.permission.RECORD_AUDIO};    @Override    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {        super.onRequestPermissionsResult(requestCode, permissions, grantResults);        switch (requestCode){            case REQUEST_RECORD_AUDIO_PERMISSION:                permissionToRecordAccepted  = grantResults[0] == PackageManager.PERMISSION_GRANTED;                break;        }        if (!permissionToRecordAccepted ) finish();    }    private void onRecord(boolean start) {        if (start) {            startRecording();        } else {            stopRecording();        }    }    private void onPlay(boolean start) {        if (start) {            startPlaying();        } else {            stopPlaying();        }    }    private void startPlaying() {        player = new MediaPlayer();        try {            player.setDataSource(fileName);            player.prepare();            player.start();        } catch (IOException e) {            Log.e(LOG_TAG, \"prepare() failed\");        }    }    private void stopPlaying() {        player.release();        player = null;    }    private void startRecording() {        recorder = new MediaRecorder();        recorder.setAudioSource(MediaRecorder.AudioSource.MIC);        recorder.setOutputFormat(MediaRecorder.OutputFormat.THREE_GPP);        recorder.setOutputFile(fileName);        recorder.setAudioEncoder(MediaRecorder.AudioEncoder.AMR_NB);        try {            recorder.prepare();        } catch (IOException e) {            Log.e(LOG_TAG, \"prepare() failed\");        }        recorder.start();    }    private void stopRecording() {        recorder.stop();        recorder.release();        recorder = null;    }    class RecordButton extends Button {        boolean mStartRecording = true;        OnClickListener clicker = new OnClickListener() {            public void onClick(View v) {                onRecord(mStartRecording);                if (mStartRecording) {                    setText(\"Stop recording\");                } else {                    setText(\"Start recording\");                }                mStartRecording = !mStartRecording;            }        };        public RecordButton(Context ctx) {            super(ctx);            setText(\"Start recording\");            setOnClickListener(clicker);        }    }    class PlayButton extends Button {        boolean mStartPlaying = true;        OnClickListener clicker = new OnClickListener() {            public void onClick(View v) {                onPlay(mStartPlaying);                if (mStartPlaying) {                    setText(\"Stop playing\");                } else {                    setText(\"Start playing\");                }                mStartPlaying = !mStartPlaying;            }        };        public PlayButton(Context ctx) {            super(ctx);            setText(\"Start playing\");            setOnClickListener(clicker);        }    }    @Override    public void onCreate(Bundle icicle) {        super.onCreate(icicle);        // Record to the external cache directory for visibility        fileName = getExternalCacheDir().getAbsolutePath();        fileName += \"/audiorecordtest.3gp\";        ActivityCompat.requestPermissions(this, permissions, REQUEST_RECORD_AUDIO_PERMISSION);        LinearLayout ll = new LinearLayout(this);        recordButton = new RecordButton(this);        ll.addView(recordButton,                new LinearLayout.LayoutParams(                        ViewGroup.LayoutParams.WRAP_CONTENT,                        ViewGroup.LayoutParams.WRAP_CONTENT,                        0));        playButton = new PlayButton(this);        ll.addView(playButton,                new LinearLayout.LayoutParams(                        ViewGroup.LayoutParams.WRAP_CONTENT,                        ViewGroup.LayoutParams.WRAP_CONTENT,                        0));        setContentView(ll);    }    @Override    public void onStop() {        super.onStop();        if (recorder != null) {            recorder.release();            recorder = null;        }        if (player != null) {            player.release();            player = null;        }    }}",
      "href": "MediaRecorder overview  |  Android Developers"
    }
  ]
}