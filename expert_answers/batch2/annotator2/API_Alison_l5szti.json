{
    "session_uid": "Alison",
    "type": "FROM_PARTICIPANT",
    "items": [
        {
            "id": "eye-gazing-tag-8",
            "tag": "SPAN",
            "text": " Collections are primarily concerned with the efficient\n management of, and access to, their elements.",
            "href": "Stream (Java Platform SE 8 )"
        },
        {
            "id": "eye-gazing-tag-9",
            "tag": "SPAN",
            "text": " By contrast, streams do not\n provide a means to directly access or manipulate their elements, and are\n instead concerned with declaratively describing their source and the\n computational operations which will be performed in aggregate on that source.",
            "href": "Stream (Java Platform SE 8 )"
        },
        {
            "id": "eye-gazing-tag-391",
            "tag": "SPAN",
            "text": "\n\n\n\n\n\nNested Class Summary\n\nNested Classes\u00a0\n\nModifier and Type\nInterface and Description\n\n\nstatic interface\u00a0\nStream.Builder<T>\nA mutable builder for a Stream.\n\n\n\n\n\n\n\n\n\n\nMethod Summary\n\nAll Methods\u00a0Static Methods\u00a0Instance Methods\u00a0Abstract Methods\u00a0Default Methods\u00a0\n\nModifier and Type\nMethod and Description\n\n\nboolean\nallMatch(Predicate<?\nsuper T>\u00a0predicate)\nReturns whether all elements of this stream match the provided predicate.\n\n\n\nboolean\nanyMatch(Predicate<?\nsuper T>\u00a0predicate)\nReturns whether any elements of this stream match the provided\n predicate.\n\n\n\nstatic <T>\u00a0Stream.Builder<T>\nbuilder()\nReturns a builder for a Stream.\n\n\n\n<R,A>\u00a0R\ncollect(Collector<?\nsuper T,A,R>\u00a0collector)\nPerforms a mutable\n reduction operation on the elements of this stream using a\n Collector.\n\n\n\n<R>\u00a0R\ncollect(Supplier<R>\u00a0supplier,\n       BiConsumer<R,?\nsuper T>\u00a0accumulator,\n       BiConsumer<R,R>\u00a0combiner)\nPerforms a mutable\n reduction operation on the elements of this stream.\n\n\n\nstatic <T>\u00a0Stream<T>\nconcat(Stream<?\nextends T>\u00a0a,\n      Stream<?\nextends T>\u00a0b)\nCreates a lazily concatenated stream whose elements are all the\n elements of the first stream followed by all the elements of the\n second stream.\n\n\n\nlong\ncount()\nReturns the count of elements in this stream.\n\n\n\nStream<T>\ndistinct()\nReturns a stream consisting of the distinct elements (according to\n Object.equals(Object)) of this stream.\n\n\n\nstatic <T>\u00a0Stream<T>\nempty()\nReturns an empty sequential Stream.\n\n\n\nStream<T>\nfilter(Predicate<?\nsuper T>\u00a0predicate)\nReturns a stream consisting of the elements of this stream that match\n the given predicate.\n\n\n\nOptional<T>\nfindAny()\nReturns an Optional describing some element of the stream, or an\n empty Optional if the stream is empty.\n\n\n\nOptional<T>\nfindFirst()\nReturns an Optional describing the first element of this stream,\n or an empty Optional if the stream is empty.\n\n\n\n<R>\u00a0Stream<R>\nflatMap(Function<?\nsuper T,?\nextends Stream<?\nextends R>>\u00a0mapper)\nReturns a stream consisting of the results of replacing each element of\n this stream with the contents of a mapped stream produced by applying\n the provided mapping function to each element.\n\n\n\nDoubleStream\nflatMapToDouble(Function<?\nsuper T,?\nextends DoubleStream>\u00a0mapper)\nReturns an DoubleStream consisting of the results of replacing\n each element of this stream with the contents of a mapped stream produced\n by applying the provided mapping function to each element.\n\n\n\nIntStream\nflatMapToInt(Function<?\nsuper T,?\nextends IntStream>\u00a0mapper)\nReturns an IntStream consisting of the results of replacing each\n element of this stream with the contents of a mapped stream produced by\n applying the provided mapping function to each element.\n\n\n\nLongStream\nflatMapToLong(Function<?\nsuper T,?\nextends LongStream>\u00a0mapper)\nReturns an LongStream consisting of the results of replacing each\n element of this stream with the contents of a mapped stream produced by\n applying the provided mapping function to each element.\n\n\n\nvoid\nforEach(Consumer<?\nsuper T>\u00a0action)\nPerforms an action for each element of this stream.\n\n\n\nvoid\nforEachOrdered(Consumer<?\nsuper T>\u00a0action)\nPerforms an action for each element of this stream, in the encounter\n order of the stream if the stream has a defined encounter order.\n\n\n\nstatic <T>\u00a0Stream<T>\ngenerate(Supplier<T>\u00a0s)\nReturns an infinite sequential unordered stream where each element is\n generated by the provided Supplier.\n\n\n\nstatic <T>\u00a0Stream<T>\niterate(T\u00a0seed,\n       UnaryOperator<T>\u00a0f)\nReturns an infinite sequential ordered Stream produced by iterative\n application of a function f to an initial element seed,\n producing a Stream consisting of seed, f(seed),\n f(f(seed)), etc.\n\n\n\nStream<T>\nlimit(long\u00a0maxSize)\nReturns a stream consisting of the elements of this stream, truncated\n to be no longer than maxSize in length.\n\n\n\n<R>\u00a0Stream<R>\nmap(Function<?\nsuper T,?\nextends R>\u00a0mapper)\nReturns a stream consisting of the results of applying the given\n function to the elements of this stream.\n\n\n\nDoubleStream\nmapToDouble(ToDoubleFunction<?\nsuper T>\u00a0mapper)\nReturns a DoubleStream consisting of the results of applying the\n given function to the elements of this stream.\n\n\n\nIntStream\nmapToInt(ToIntFunction<?\nsuper T>\u00a0mapper)\nReturns an IntStream consisting of the results of applying the\n given function to the elements of this stream.\n\n\n\nLongStream\nmapToLong(ToLongFunction<?\nsuper T>\u00a0mapper)\nReturns a LongStream consisting of the results of applying the\n given function to the elements of this stream.\n\n\n\nOptional<T>\nmax(Comparator<?\nsuper T>\u00a0comparator)\nReturns the maximum element of this stream according to the provided\n Comparator.\n\n\n\nOptional<T>\nmin(Comparator<?\nsuper T>\u00a0comparator)\nReturns the minimum element of this stream according to the provided\n Comparator.\n\n\n\nboolean\nnoneMatch(Predicate<?\nsuper T>\u00a0predicate)\nReturns whether no elements of this stream match the provided predicate.\n\n\n\nstatic <T>\u00a0Stream<T>\nof(T...\u00a0values)\nReturns a sequential ordered stream whose elements are the specified values.\n\n\n\nstatic <T>\u00a0Stream<T>\nof(T\u00a0t)\nReturns a sequential Stream containing a single element.\n\n\n\nStream<T>\npeek(Consumer<?\nsuper T>\u00a0action)\nReturns a stream consisting of the elements of this stream, additionally\n performing the provided action on each element as elements are consumed\n from the resulting stream.\n\n\n\nOptional<T>\nreduce(BinaryOperator<T>\u00a0accumulator)\nPerforms a reduction on the\n elements of this stream, using an\n associative accumulation\n function, and returns an Optional describing the reduced value,\n if any.\n\n\n\nT\nreduce(T\u00a0identity,\n      BinaryOperator<T>\u00a0accumulator)\nPerforms a reduction on the\n elements of this stream, using the provided identity value and an\n associative\n accumulation function, and returns the reduced value.\n\n\n\n<U>\u00a0U\nreduce(U\u00a0identity,\n      BiFunction<U,?\nsuper T,U>\u00a0accumulator,\n      BinaryOperator<U>\u00a0combiner)\nPerforms a reduction on the\n elements of this stream, using the provided identity, accumulation and\n combining functions.\n\n\n\nStream<T>\nskip(long\u00a0n)\nReturns a stream consisting of the remaining elements of this stream\n after discarding the first n elements of the stream.\n\n\n\nStream<T>\nsorted()\nReturns a stream consisting of the elements of this stream, sorted\n according to natural order.\n\n\n\nStream<T>\nsorted(Comparator<?\nsuper T>\u00a0comparator)\nReturns a stream consisting of the elements of this stream, sorted\n according to the provided Comparator.\n\n\n\nObject[]\ntoArray()\nReturns an array containing the elements of this stream.\n\n\n\n<A>\u00a0A[]\ntoArray(IntFunction<A[]>\u00a0generator)\nReturns an array containing the elements of this stream, using the\n provided generator function to allocate the returned array, as\n well as any additional arrays that might be required for a partitioned\n execution or for resizing.\n\n\n\n\n\n\n\nMethods inherited from interface\u00a0java.util.stream.BaseStream\nclose, isParallel, iterator, onClose, parallel, sequential, spliterator, unordered\n\n\n\n",
            "href": "Stream (Java Platform SE 8 )"
        },
        {
            "id": "uid-1489",
            "tag": "PRE",
            "text": "Stream<T>\u00a0filter(Predicate<?\nsuper T>\u00a0predicate)",
            "href": "Stream (Java Platform SE 8 )"
        },
        {
            "id": "eye-gazing-tag-100",
            "tag": "SPAN",
            "text": " We create\n a stream of Widget objects via Collection.stream(),\n filter it to produce a stream containing only the red widgets, and then\n transform it into a stream of int values representing the weight of\n each red widget.",
            "href": "Stream (Java Platform SE 8 )"
        },
        {
            "id": "eye-gazing-tag-46",
            "tag": "SPAN",
            "text": "\n This is an intermediate\n operation.",
            "href": "Stream (Java Platform SE 8 )"
        },
        {
            "id": "eye-gazing-tag-60",
            "tag": "SPAN",
            "text": "\n This is an intermediate\n operation.",
            "href": "Stream (Java Platform SE 8 )"
        },
        {
            "id": "eye-gazing-tag-73",
            "tag": "SPAN",
            "text": "This is an intermediate\n operation.",
            "href": "Stream (Java Platform SE 8 )"
        },
        {
            "id": "eye-gazing-tag-18",
            "tag": "SPAN",
            "text": " We create\n a stream of Widget objects via Collection.stream(),\n filter it to produce a stream containing only the red widgets, and then\n transform it into a stream of int values representing the weight of\n each red widget.",
            "href": "Stream (Java Platform SE 8 )"
        },
        {
            "id": "eye-gazing-tag-34",
            "tag": "SPAN",
            "text": " The following example illustrates an aggregate operation using\n Stream and IntStream:\n\n \n     int sum = widgets.stream()\n                      .filter(w -> w.getColor() == RED)\n                      .mapToInt(w -> w.getWeight())\n                      .sum();\n \n\n In this example, widgets is a Collection<Widget>.",
            "href": "Stream (Java Platform SE 8 )"
        },
        {
            "id": "eye-gazing-tag-86",
            "tag": "SPAN",
            "text": " The following example illustrates an aggregate operation using\n Stream and IntStream:\n\n \n     int sum = widgets.stream()\n                      .filter(w -> w.getColor() == RED)\n                      .mapToInt(w -> w.getWeight())\n                      .sum();\n \n\n In this example, widgets is a Collection<Widget>.",
            "href": "Stream (Java Platform SE 8 )"
        },
        {
            "id": "eye-gazing-tag-45",
            "tag": "SPAN",
            "text": " The following example illustrates an aggregate operation using\n Stream and IntStream:\n\n \n     int sum = widgets.stream()\n                      .filter(w -> w.getColor() == RED)\n                      .mapToInt(w -> w.getWeight())\n                      .sum();\n \n\n In this example, widgets is a Collection<Widget>.",
            "href": "Stream (Java Platform SE 8 )"
        },
        {
            "id": "eye-gazing-tag-66",
            "tag": "SPAN",
            "text": " The following example illustrates an aggregate operation using\n Stream and IntStream:\n\n \n     int sum = widgets.stream()\n                      .filter(w -> w.getColor() == RED)\n                      .mapToInt(w -> w.getWeight())\n                      .sum();\n \n\n In this example, widgets is a Collection<Widget>.",
            "href": "Stream (Java Platform SE 8 )"
        }
    ]
}