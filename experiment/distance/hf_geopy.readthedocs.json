[
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Welcome to GeoPy's documentation !"
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Installation Geocoders Specifying Parameters Once Geopy Is Not a Service Async Mode Accessing Geocoders Default Options Object Usage with Pandas Rate Limiter"
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Calculating Distance Data Units Conversion Exceptions Adapters Supported Adapters Base Classes"
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Almost 60 % of maintainers have quit or considered quitting."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Read the reportAd by EthicalAds \u00b7 Monetize your site"
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "'' Welcome to GeoPy's documentation !"
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "geopy is a Python client for several popular geocoding web services."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "geopy makes it easy for Python developers to locate the coordinates of addresses, cities, countries, and landmarks across the globe using third-party geocoders and other data sources."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Each geolocation service you might use, such as Google Maps, Bing Maps, or Nominatim, has its own class in geopy.geocoders abstracting the service's API."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Geocoders each define at least a geocode method, for resolving a location from a string, and may define a reverse method, which resolves a pair of coordinates to an address."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Each Geocoder accepts any credentials or settings needed to interact with its service, e.g., an API key or locale, during its initialization."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "To geolocate a query to an address and coordinates:"
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "To find the address corresponding to a set of coordinates:"
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Locators' geocode and reverse methods require the argument query, and also accept at least the argument exactly_one, which is True by default."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Geocoders may have additional attributes, e.g., Bing accepts user_location, the effect of which is to bias results near that location."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "geocode and reverse methods may return three types of values:"
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "When there are no results found, returns None."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "When the method's exactly_one argument is True and at least one result is found, returns a geopy.location.Location object, which can be iterated over as:"
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Or can be accessed as location.address, location.latitude, location.longitude, location.altitude, and location.raw."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "The last contains the full geocoder's response for this result."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "When exactly_one is False, and there is at least one result, returns a list of geopy.location.Location objects, as above:"
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "If a service is unavailable or otherwise returns a non-OK response, or doesn't receive a response in the allotted timeout, you will receive one of the Exceptions detailed below."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Geocoding methods accept a lot of different parameters, and you would probably want to specify some of them just once and not care about them later."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "This is easy to achieve with Python's functools.partial ( ):"
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "If you need to modify the query, you can also use a one-liner with lambda."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "For example, if you only need to geocode locations in Cleveland, Ohio, you could do:"
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "That lambda doesn't accept kwargs."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "If you need them, you could do:"
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Geopy Is Not a Service"
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Geocoding is provided by a number of different services, which are not affiliated with geopy in any way."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "These services provide APIs, which anyone could implement, and geopy is just a library which provides these implementations for many different services in a single package."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Different services have different Terms of Use, quotas, pricing, geodatabases and so on."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "For example, Nominatim is free, but provides low request limits."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "If you need to make more queries, consider using another ( probably paid ) service, such as OpenMapQuest or PickPoint ( these two are commercial providers of Nominatim, so they should have the same data and APIs )."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Or, if you are ready to wait, you can try geopy.extra.rate _ limiter."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "geopy can not be responsible for the geocoding services' databases."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "If you have issues with some queries which the service can not fulfill, it should be directed to that service's support team."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "geopy can not be responsible for any networking issues between your computer and the geocoding service."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "If you face any problem with your current geocoding service provider, you can always try a different one."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "By default geopy geocoders are synchronous ( i.e. they use an Adapter based on BaseSyncAdapter )."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "All geocoders can be used with asyncio by simply switching to an Adapter based on BaseAsyncAdapter ( like AioHTTPAdapter )."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Basically the usage is the same as in synchronous mode, except that all geocoder calls should be used with await, and the geocoder instance should be created by async with."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "The context manager is optional, however, it is strongly advised to use it to avoid resources leaks."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "The typical way of retrieving a geocoder class is to make an import from geopy.geocoders package:"
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "geopy.geocoders.get _ geocoder_for_service ( service )"
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "For the service provided, try to return a geocoder class."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "If the string given is not recognized, a geopy.exc.GeocoderNotFound exception is raised."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Given that almost all of the geocoders provide the geocode method it could be used to make basic queries based entirely on user input:"
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "The options object contains default configuration values for geocoders, e.g. timeout and User-Agent."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Instead of passing a custom value to each geocoder individually, you can override a default value in this object."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Please note that not all geocoders use all attributes of this object."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "For example, some geocoders don't respect the default_scheme attribute."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Refer to the specific geocoder's initializer doc for a list of parameters which that geocoder accepts."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Example for overriding default timeout and user_agent:"
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Attributes: default_adapter_factoryA callable which returns a geopy.adapters.BaseAdapter instance."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Adapters are different implementations of HTTP clients."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "See geopy.adapters for more info."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "This callable accepts two keyword args: proxies and ssl_context."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "A class might be specified as this callable as well."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "If requests package is installed, the default adapter is geopy.adapters.RequestsAdapter."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "default_proxiesTunnel requests through HTTP proxy."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "By default the system proxies are respected ( e.g. HTTP_PROXY and HTTPS_PROXY env vars or platform-specific proxy settings, such as macOS or Windows native preferences -- see urllib.request.getproxies ( ) for more details )."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "The proxies value for using system proxies is None."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "To disable system proxies and issue requests directly, explicitly pass an empty dict as a value for proxies: -LCB- -RCB-."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "To use a custom HTTP proxy location, pass a string."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Scheme part ( http: / / ) of the proxy is ignored."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Only http proxy is supported."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Even if the proxy scheme is https, it will be ignored, and the connection between client and proxy would still be unencrypted."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "However, https requests via http proxy are still supported ( via HTTP CONNECT method )."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Raw urllib-style proxies dict might be provided instead of a string:"
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "-LCB- `` https'': `` 192.0.2.0:8080'' -RCB- -- means that HTTP proxy would be used only for requests having https scheme."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "String proxies value is automatically used for both schemes, and is provided as a shorthand for the urllib-style proxies dict."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "For more information, see documentation on urllib.request.getproxies ( )."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "default_schemeUse ` https' or ` http' as the API URL's scheme."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "default_ssl_contextAn ssl.SSLContext instance with custom TLS verification settings."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Pass None to use the interpreter's defaults ( that is to use the system's trusted CA certificates )."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "To use the CA bundle used by requests library:"
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "To disable TLS certificate verification completely:"
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "See docs for the ssl.SSLContext class for more examples."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "default_timeoutTime, in seconds, to wait for the geocoding service to respond before raising a geopy.exc.GeocoderTimedOut exception."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Pass None to disable timeout."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "default_user_agentUser-Agent header to send with the requests to geocoder API."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "It is possible to geocode a pandas DataFrame with geopy, however, rate-limiting must be taken into account."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "A large number of DataFrame rows might produce a significant amount of geocoding requests to a Geocoding service, which might be throttled by the service ( e.g. by returning Too Many Requests 429 HTTP error or timing out )."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "geopy.extra.rate _ limiter classes provide a convenient wrapper, which can be used to automatically add delays between geocoding calls to reduce the load on the Geocoding service."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Also it can retry failed requests and swallow errors for individual rows."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "If you're having the Too Many Requests error, you may try the following:"
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Use geopy.extra.rate _ limiter with non-zero min_delay_seconds."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Try a different Geocoding service ( please consult with their ToS first, as some services prohibit bulk geocoding )."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Take a paid plan on the chosen Geocoding service, which provides higher quota."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Provision your own local copy of the Geocoding service ( such as Nominatim )."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "RateLimiter and AsyncRateLimiter allow to perform bulk operations while gracefully handling error responses and adding delays when needed."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "In the example below a delay of 1 second ( min_delay_seconds = 1 ) will be added between each pair of geolocator.geocode calls ; all geopy.exc.GeocoderServiceError exceptions will be retried ( up to max_retries times ):"
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "This would produce the following DataFrame:"
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "To pass extra options to the geocode call:"
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "To see a progress bar:"
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Before using rate limiting classes, please consult with the Geocoding service ToS, which might explicitly consider bulk requests ( even throttled ) a violation."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "This is a Rate Limiter implementation for synchronous functions ( like geocoders with the default geopy.adapters.BaseSyncAdapter )."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "If geocoding service's responses are slower than min_delay_seconds, then you can benefit from parallelizing the work:"
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Changed in version 2.0: Added thread-safety support."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "func ( callable ) -- A function which should be wrapped by the rate limiter."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "min_delay_seconds ( float ) -- Minimum delay in seconds between the wrapped func calls."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "To convert RPS rate to min_delay_seconds you need to divide 1 by RPS."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "For example, if you need to keep the rate at 20 RPS, you can use min_delay_seconds = 1/20."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "max_retries ( int ) -- Number of retries on exceptions."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Only geopy.exc.GeocoderServiceError exceptions are retried -- others are always re-raised."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "max_retries + 1 requests would be performed at max per query."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Set max_retries = 0 to disable retries."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "error_wait_seconds ( float ) -- Time to wait between retries after errors."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Must be greater or equal to min_delay_seconds."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "swallow_exceptions ( bool ) -- Should an exception be swallowed after retries ?"
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "If not, it will be re-raised."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "If yes, the return_value_on_exception will be returned."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "return_value_on_exception -- Value to return on failure when swallow_exceptions = True."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "This is a Rate Limiter implementation for asynchronous functions ( like geocoders with geopy.adapters.BaseAsyncAdapter )."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "AsyncRateLimiter class is safe to use across multiple concurrent tasks."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "class geopy.geocoders.AlgoliaPlaces ( *, app_id = None, api_key = None, domain='places-dsn.algolia.net', scheme = None, timeout = DEFAULT_SENTINEL, proxies = DEFAULT_SENTINEL, user_agent = None, ssl_context = DEFAULT_SENTINEL, adapter_factory = None )"
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Geocoder using the Algolia Places API."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "app_id ( str ) -- Unique application identifier."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "It's used to identify you when using Algolia's API."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "api_key ( str ) -- Algolia's user API key."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "domain ( str ) -- Currently it is'places-dsn.algolia.net', can be changed for testing purposes."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "scheme ( str ) -- See geopy.geocoders.options.default _ scheme."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "timeout ( int ) -- See geopy.geocoders.options.default _ timeout."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "proxies ( dict ) -- See geopy.geocoders.options.default _ proxies."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "ssl_context ( ssl.SSLContext ) -- See geopy.geocoders.options.default _ ssl_context."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "adapter_factory ( callable ) -- See geopy.geocoders.options.default _ adapter_factory."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "geocode ( query, *, exactly_one = True, timeout = DEFAULT_SENTINEL, type = None, restrict_searchable_attributes = None, limit = None, language = None, countries = None, around = None, around_via_ip = None, around_radius = None, x_forwarded_for = None )"
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Return a location point by address."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "query ( str ) -- The address or query you wish to geocode."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "exactly_one ( bool ) -- Return one result or a list of results, if available."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "timeout ( int ) -- Time, in seconds, to wait for the geocoding service to respond before raising a geopy.exc.GeocoderTimedOut exception."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Set this only if you wish to override, on this call only, the value set during the geocoder's initialization."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "type ( str ) -- Restrict the search results to a specific type."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Available types are defined in documentation: https://community.algolia.com/places/api-clients.html#api-options-type restrict_searchable_attributes ( str ) -- Restrict the fields in which the search is done."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "limit ( int ) -- Limit the maximum number of items in the response."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "If not provided and there are multiple results Algolia API will return 20 results by default."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "This will be reset to one if exactly_one is True."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "language ( str ) -- If specified, restrict the search results to a single language."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "You can pass two letters country codes ( ISO 639-1 )."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "countries ( list ) -- If specified, restrict the search results to a specific list of countries."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "You can pass two letters country codes ( ISO 3166-1 )."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "around ( geopy.point.Point, list or tuple of ( latitude, longitude ), or string as'' % ( latitude ) s, % ( longitude ) s''. )"
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "-- Force to first search around a specific latitude longitude."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "around_via_ip ( bool ) -- Whether or not to first search around the geolocation of the user found via his IP address."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "This is true by default."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "around_radius ( int ) -- Radius in meters to search around the latitude/longitude."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Otherwise a default radius is automatically computed given the area density."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "x_forwarded_for ( str ) -- Override the HTTP header X-Forwarded-For."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "With this you can control the source IP address used to resolve the geo-location of the user."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "This is particularly useful when you want to use the API from your backend as if it was from your end-users' locations."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Return type None, geopy.location.Location or a list of them, if exactly_one = False."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "reverse ( query, *, exactly_one = True, timeout = DEFAULT_SENTINEL, limit = None, language = None )"
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Return an address by location point."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "query ( geopy.point.Point, list or tuple of ( latitude, longitude ), or string as'' % ( latitude ) s, % ( longitude ) s''. )"
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "-- The coordinates for which you wish to obtain the closest human-readable addresses."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "class geopy.geocoders.ArcGIS ( username = None, password = None, *, referer = None, token_lifetime = 60, scheme = None, timeout = DEFAULT_SENTINEL, proxies = DEFAULT_SENTINEL, user_agent = None, ssl_context = DEFAULT_SENTINEL, adapter_factory = None, auth_domain='www.arcgis.com', domain='geocode.arcgis.com' )"
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Geocoder using the ERSI ArcGIS API."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "__ init __ ( username = None, password = None, *, referer = None, token_lifetime = 60, scheme = None, timeout = DEFAULT_SENTINEL, proxies = DEFAULT_SENTINEL, user_agent = None, ssl_context = DEFAULT_SENTINEL, adapter_factory = None, auth_domain='www.arcgis.com', domain='geocode.arcgis.com' )"
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "username ( str ) -- ArcGIS username."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Required if authenticated mode is desired."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "password ( str ) -- ArcGIS password."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "referer ( str ) -- Required if authenticated mode is desired."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Referer HTTP header to send with each request, e.g., ` http://www.example.com'."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "This is tied to an issued token, so fielding queries for multiple referrers should be handled by having multiple ArcGIS geocoder instances."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "token_lifetime ( int ) -- Desired lifetime, in minutes, of an ArcGIS-issued token."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "If authenticated mode is in use, it must be ` https'."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "auth_domain ( str ) -- Domain where the target ArcGIS auth service is hosted."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Used only in authenticated mode ( i.e. username, password and referer are set )."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "domain ( str ) -- Domain where the target ArcGIS service is hosted."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "geocode ( query, *, exactly_one = True, timeout = DEFAULT_SENTINEL, out_fields = None )"
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "out_fields ( str or iterable ) -- A list of output fields to be returned in the attributes field of the raw data."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "This can be either a python list/tuple of fields or a comma-separated string."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "See https://developers.arcgis.com/rest/geocode/api-reference/geocoding-service-output.htm for a list of supported output fields."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "If you want to return all supported output fields, set out_fields ='' *''."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "reverse ( query, *, exactly_one = True, timeout = DEFAULT_SENTINEL, distance = None )"
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "distance ( int ) -- Distance from the query location, in meters, within which to search."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "ArcGIS has a default of 100 meters, if not specified."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "class geopy.geocoders.AzureMaps ( subscription_key, *, scheme = None, timeout = DEFAULT_SENTINEL, proxies = DEFAULT_SENTINEL, user_agent = None, ssl_context = DEFAULT_SENTINEL, adapter_factory = None, domain='atlas.microsoft.com' )"
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "__ init __ ( subscription_key, *, scheme = None, timeout = DEFAULT_SENTINEL, proxies = DEFAULT_SENTINEL, user_agent = None, ssl_context = DEFAULT_SENTINEL, adapter_factory = None, domain='atlas.microsoft.com' )"
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "subscription_key ( str ) -- Azure Maps subscription key."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "domain ( str ) -- Domain where the target Azure Maps service is hosted."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "geocode ( query, *, exactly_one = True, timeout = DEFAULT_SENTINEL, limit = None, typeahead = False, language = None )"
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "limit ( int ) -- Maximum amount of results to return from the service."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Unless exactly_one is set to False, limit will always be 1."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "typeahead ( bool ) -- If the `` typeahead'' flag is set, the query will be interpreted as a partial input and the search will enter predictive mode."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "language ( str ) -- Language in which search results should be returned."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "When data in specified language is not available for a specific field, default language is used."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "List of supported languages ( case-insensitive ): https://developer.tomtom.com/online-search/online-search-documentation/supported-languages"
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "reverse ( query, *, exactly_one = True, timeout = DEFAULT_SENTINEL, language = None )"
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "class geopy.geocoders.Baidu ( api_key, *, scheme = None, timeout = DEFAULT_SENTINEL, proxies = DEFAULT_SENTINEL, user_agent = None, ssl_context = DEFAULT_SENTINEL, adapter_factory = None, security_key = None )"
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Geocoder using the Baidu Maps v2 API."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Attention Newly registered API keys will not work with v2 API, use BaiduV3 instead."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "api_key ( str ) -- The API key ( AK ) required by Baidu Map to perform geocoding requests."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "API keys are managed through the Baidu APIs console ( http://lbsyun.baidu.com/apiconsole/key )."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "security_key ( str ) -- The security key ( SK ) to calculate the SN parameter in request if authentication setting requires ( http://lbsyun.baidu.com/index.php?title=lbscloud/api/appendix )."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "geocode ( query, *, exactly_one = True, timeout = DEFAULT_SENTINEL )"
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "reverse ( query, *, exactly_one = True, timeout = DEFAULT_SENTINEL )"
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Baidu's API will always return at most one result."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "class geopy.geocoders.BaiduV3 ( api_key, *, scheme = None, timeout = DEFAULT_SENTINEL, proxies = DEFAULT_SENTINEL, user_agent = None, ssl_context = DEFAULT_SENTINEL, adapter_factory = None, security_key = None )"
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Bases: geopy.geocoders.baidu.Baidu Geocoder using the Baidu Maps v3 API."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "class geopy.geocoders.BANFrance ( *, domain = ` api-adresse."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "data.gouv.fr', scheme = None, timeout = DEFAULT_SENTINEL, proxies = DEFAULT_SENTINEL, user_agent = None, ssl_context = DEFAULT_SENTINEL, adapter_factory = None )"
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Geocoder using the Base Adresse Nationale France API."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "domain ( str ) -- Currently it is ` api-adresse."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "data.gouv.fr', can be changed for testing purposes."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "geocode ( query, *, limit = None, exactly_one = True, timeout = DEFAULT_SENTINEL )"
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "limit ( int ) -- Defines the maximum number of items in the response structure."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "If not provided and there are multiple results the BAN API will return 5 results by default."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "class geopy.geocoders.Bing ( api_key, *, scheme = None, timeout = DEFAULT_SENTINEL, proxies = DEFAULT_SENTINEL, user_agent = None, ssl_context = DEFAULT_SENTINEL, adapter_factory = None )"
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Geocoder using the Bing Maps Locations API."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "geocode ( query, *, exactly_one = True, user_location = None, timeout = DEFAULT_SENTINEL, culture = None, include_neighborhood = None, include_country_code = False )"
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "query ( str or dict ) -- The address or query you wish to geocode."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "For a structured query, provide a dictionary whose keys are one of: addressLine, locality ( city ), adminDistrict ( state ), countryRegion, or postalCode."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "user_location ( geopy.point.Point ) -- Prioritize results closer to this location."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "culture ( str ) -- Affects the language of the response, must be a two-letter country code."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "include_neighborhood ( bool ) -- Sets whether to include the neighborhood field in the response."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "include_country_code ( bool ) -- Sets whether to include the two-letter ISO code of the country in the response ( field name ` countryRegionIso2' )."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "reverse ( query, *, exactly_one = True, timeout = DEFAULT_SENTINEL, culture = None, include_country_code = False )"
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "class geopy.geocoders.DataBC ( *, scheme = None, timeout = DEFAULT_SENTINEL, proxies = DEFAULT_SENTINEL, user_agent = None, ssl_context = DEFAULT_SENTINEL, adapter_factory = None )"
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Geocoder using the Physical Address Geocoder from DataBC."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "max_results ( int ) -- The maximum number of resutls to request."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "set_back ( float ) -- The distance to move the accessPoint away from the curb ( in meters ) and towards the interior of the parcel."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "location_descriptor must be set to accessPoint for set_back to take effect."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "location_descriptor ( str ) -- The type of point requested."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "class geopy.geocoders.GeocodeEarth ( api_key, *, domain = ` api.geocode.earth', timeout = DEFAULT_SENTINEL, proxies = DEFAULT_SENTINEL, user_agent = None, scheme = None, ssl_context = DEFAULT_SENTINEL, adapter_factory = None )"
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Bases: geopy.geocoders.pelias.Pelias geocode.earth, a Pelias-based service provided by the developers of Pelias itself."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "domain ( str ) -- Specify a custom domain for Pelias API."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "geocode ( query, *, exactly_one = True, timeout = DEFAULT_SENTINEL, boundary_rect = None, country_bias = None, language = None )"
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "boundary_rect ( list or tuple of 2 items of geopy.point.Point or ( latitude, longitude ) or'' % ( latitude ) s, % ( longitude ) s''. )"
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "-- Coordinates to restrict search within."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "country_bias ( str ) -- Bias results to this country ( ISO alpha-3 )."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "language ( str ) -- Preferred language in which to return results."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Either uses standard RFC2616 accept-language string or a simple comma-separated list of language codes."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Changed in version 2.2: This class has been removed, because the service is too unreliable."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "class geopy.geocoders.Geocodio ( api_key, *, scheme = None, timeout = DEFAULT_SENTINEL, proxies = DEFAULT_SENTINEL, user_agent = None, ssl_context = DEFAULT_SENTINEL, adapter_factory = None )"
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Geocoder using the Geocod.io API."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "query ( dict or str ) -- The address, query or a structured query you wish to geocode."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "For a structured query, provide a dictionary whose keys are one of: street, city, state, postal_code or country."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "limit ( int ) -- The maximum number of matches to return."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "This will be reset to 1 if exactly_one is True."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "reverse ( query, *, exactly_one = True, timeout = DEFAULT_SENTINEL, limit = None )"
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "query ( str ) -- The coordinates for which you wish to obtain the closest human-readable addresses exactly_one ( bool ) -- Return one result or a list of results, if available."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "class geopy.geocoders.Geolake ( api_key, *, domain='api.geolake.com', scheme = None, timeout = DEFAULT_SENTINEL, proxies = DEFAULT_SENTINEL, user_agent = None, ssl_context = DEFAULT_SENTINEL, adapter_factory = None )"
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Geocoder using the Geolake API."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "api_key ( str ) -- The API key required by Geolake to perform geocoding requests."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "You can get your key here: https://geolake.com/ domain ( str ) -- Currently it is'api.geolake.com', can be changed for testing purposes."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "geocode ( query, *, country_codes = None, exactly_one = True, timeout = DEFAULT_SENTINEL )"
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "For a structured query, provide a dictionary whose keys are one of: country, state, city, zipcode, street, address, houseNumber or subNumber."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "country_codes ( str or list ) -- Provides the geocoder with a list of country codes that the query may reside in."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "This value will limit the geocoder to the supplied countries."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "The country code is a 2 character code as defined by the ISO-3166-1 alpha-2 standard ( e.g. FR )."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Multiple countries can be specified with a Python list."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "exactly_one ( bool ) -- Return one result or a list of one result."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "class geopy.geocoders.GeoNames ( username, *, timeout = DEFAULT_SENTINEL, proxies = DEFAULT_SENTINEL, user_agent = None, ssl_context = DEFAULT_SENTINEL, adapter_factory = None, scheme = ` http' )"
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Reverse geocoding documentation at: http://www.geonames.org/export/web-services.html#findNearbyPlaceName"
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "username ( str ) -- GeoNames username, required."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Sign up here: http://www.geonames.org/login timeout ( int ) -- See geopy.geocoders.options.default _ timeout."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Note that at the time of writing GeoNames doesn't support https, so the default scheme is http."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "The value of geopy.geocoders.options.default _ scheme is not respected."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "This parameter is present to make it possible to switch to https once GeoNames adds support for it."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "geocode ( query, *, exactly_one = True, timeout = DEFAULT_SENTINEL, country = None, country_bias = None )"
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "country ( str or list ) -- Limit records to the specified countries."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Two letter country code ISO-3166 ( e.g. FR )."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Might be a single string or a list of strings."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "country_bias ( str ) -- Records from the country_bias are listed first."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Two letter country code ISO-3166."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "reverse ( query, *, exactly_one = True, timeout = DEFAULT_SENTINEL, feature_code = None, lang = None, find_nearby_type = ` findNearbyPlaceName' )"
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "feature_code ( str ) -- A GeoNames feature code lang ( str ) -- language of the returned name element ( the pseudo language code ` local' will return it in local language ) Full list of supported languages can be found here: https://www.geonames.org/countries/ find_nearby_type ( str ) -- A flag to switch between different GeoNames API endpoints."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "The default value is findNearbyPlaceName which returns the closest populated place."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Another currently implemented option is findNearby which returns the closest toponym for the lat/lng query."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "reverse_timezone ( query, *, timeout = DEFAULT_SENTINEL )"
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Find the timezone for a point in query."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "GeoNames always returns a timezone: if the point being queried doesn't have an assigned Olson timezone id, a pytz.FixedOffset timezone is used to produce the geopy.timezone.Timezone."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "query ( geopy.point.Point, list or tuple of ( latitude, longitude ), or string as `` % ( latitude ) s, % ( longitude ) s'' ) -- The coordinates for which you want a timezone."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "class geopy.geocoders.GoogleV3 ( api_key = None, *, domain='maps.googleapis.com', scheme = None, client_id = None, secret_key = None, timeout = DEFAULT_SENTINEL, proxies = DEFAULT_SENTINEL, user_agent = None, ssl_context = DEFAULT_SENTINEL, adapter_factory = None, channel ='' )"
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Geocoder using the Google Maps v3 API."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "api_key ( str ) -- The API key required by Google to perform geocoding requests, mandatory ( unless premier is used, then both client_id and secret_key must be specified instead )."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "API keys are managed through the Google APIs console ( https://code.google.com/apis/console )."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Make sure to have both Geocoding API and Time Zone API services enabled for this API key."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Changed in version 2.1: Previously a warning has been emitted when neither api_key nor premier were specified."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Now a geopy.exc.ConfigurationError is raised."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "domain ( str ) -- Should be the localized Google Maps domain to connect to."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "The default is ` maps.googleapis.com', but if you're geocoding address in the UK ( for example ), you may want to set it to ` maps.google.co.uk' to properly bias results."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "client_id ( str ) -- If using premier, the account client id."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "secret_key ( str ) -- If using premier, the account secret key."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "channel ( str ) -- If using premier, the channel identifier."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "geocode ( query = None, *, exactly_one = True, timeout = DEFAULT_SENTINEL, bounds = None, region = None, components = None, place_id = None, language = None, sensor = False )"
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Optional, if components param is set:"
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "bounds ( list or tuple of 2 items of geopy.point.Point or ( latitude, longitude ) or'' % ( latitude ) s, % ( longitude ) s''. )"
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "-- The bounding box of the viewport within which to bias geocode results more prominently."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "region ( str ) -- The region code, specified as a ccTLD ( `` top-level domain'' ) two-character value."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "components ( dict or list ) -- Restricts to an area."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Can use any combination of: route, locality, administrative_area, postal_code, country."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Pass a list of tuples if you want to specify multiple components of the same type, e.g.:"
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "place_id ( str ) -- Retrieve a Location using a Place ID."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Can not be not used with query or bounds parameters."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "language ( str ) -- The language in which to return results."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "sensor ( bool ) -- Whether the geocoding request comes from a device with a location sensor."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "reverse ( query, *, exactly_one = True, timeout = DEFAULT_SENTINEL, language = None, sensor = False )"
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Find the timezone a point in query was in for a specified at_time."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "None will be returned for points without an assigned Olson timezone id ( e.g. for Antarctica )."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "at_time ( datetime.datetime or None ) -- The time at which you want the timezone of this location."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "This is optional, and defaults to the time that the function is called in UTC."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Timezone-aware datetimes are correctly handled and naive datetimes are silently treated as UTC."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Return type None or geopy.timezone.Timezone."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "class geopy.geocoders.Here ( *, app_id = None, app_code = None, apikey = None, scheme = None, timeout = DEFAULT_SENTINEL, proxies = DEFAULT_SENTINEL, user_agent = None, ssl_context = DEFAULT_SENTINEL, adapter_factory = None )"
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Geocoder using the HERE Geocoder API."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Attention This class uses a v6 API which is in maintenance mode."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Consider using the newer HereV7 class."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "app_id ( str ) -- Should be a valid HERE Maps APP ID."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Will eventually be replaced with APIKEY."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Attention App ID and App Code are being replaced by API Keys and OAuth 2.0 by HERE."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Consider getting an apikey instead of using app_id and app_code."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "app_code ( str ) -- Should be a valid HERE Maps APP CODE."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "apikey ( str ) -- Should be a valid HERE Maps APIKEY."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "These keys were introduced in December 2019 and will eventually replace the legacy APP CODE/APP ID pairs which are already no longer available for new accounts ( but still work for old accounts )."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "More authentication details are available at https://developer.here.com/blog/announcing-two-new-authentication-types."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "geocode ( query, *, bbox = None, mapview = None, exactly_one = True, maxresults = None, pageinformation = None, language = None, additional_data = False, timeout = DEFAULT_SENTINEL )"
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "This implementation supports only a subset of all available parameters."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "A list of all parameters of the pure REST API is available here: https://developer.here.com/documentation/geocoder/topics/resource-geocode.html"
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "For a structured query, provide a dictionary whose keys are one of: city, county, district, country, state, street, housenumber, or postalcode."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "bbox ( list or tuple of 2 items of geopy.point.Point or ( latitude, longitude ) or'' % ( latitude ) s, % ( longitude ) s''. )"
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "-- A type of spatial filter, limits the search for any other attributes in the request."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Specified by two coordinate ( lat/lon ) pairs -- corners of the box."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "The bbox search is currently similar to mapview but it is not extended ( cited from the REST API docs )."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Relevant global results are also returned."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "mapview ( list or tuple of 2 items of geopy.point.Point or ( latitude, longitude ) or'' % ( latitude ) s, % ( longitude ) s''. )"
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "-- The app's viewport, given as two coordinate pairs, specified by two lat/lon pairs -- corners of the bounding box, respectively."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Matches from within the set map view plus an extended area are ranked highest."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "maxresults ( int ) -- Defines the maximum number of items in the response structure."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "If not provided and there are multiple results the HERE API will return 10 results by default."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "pageinformation ( int ) -- A key which identifies the page to be returned when the response is separated into multiple pages."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Only useful when maxresults is also provided."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "language ( str ) -- Affects the language of the response, must be a RFC 4647 language code, e.g. ` en-US'."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "additional_data ( str ) -- A string with key-value pairs as described on https://developer.here.com/documentation/geocoder/topics/resource-params-additional.html."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "These will be added as one query parameter to the URL."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "reverse ( query, *, radius = None, exactly_one = True, maxresults = None, pageinformation = None, language = None, mode = ` retrieveAddresses', timeout = DEFAULT_SENTINEL )"
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "A list of all parameters of the pure REST API is available here: https://developer.here.com/documentation/geocoder/topics/resource-reverse-geocode.html"
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "radius ( float ) -- Proximity radius in meters."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "mode ( str ) -- Affects the type of returned response items, must be one of: ` retrieveAddresses' ( default ), ` retrieveAreas', ` retrieveLandmarks', ` retrieveAll', or ` trackPosition'."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "See online documentation for more information."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "class geopy.geocoders.HereV7 ( apikey, *, scheme = None, timeout = DEFAULT_SENTINEL, proxies = DEFAULT_SENTINEL, user_agent = None, ssl_context = DEFAULT_SENTINEL, adapter_factory = None )"
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Geocoder using the HERE Geocoding & Search v7 API."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "apikey ( str ) -- Should be a valid HERE Maps apikey."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "A project can be created at https://developer.here.com/projects."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "geocode ( query = None, *, components = None, at = None, countries = None, language = None, limit = None, exactly_one = True, timeout = DEFAULT_SENTINEL )"
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Optional, if components param is set."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "components ( dict ) -- A structured query."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Can be used along with the free-text query."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Should be a dictionary whose keys are one of: country, state, county, city, district, street, houseNumber, postalCode."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "at ( geopy.point.Point, list or tuple of ( latitude, longitude ), or string as'' % ( latitude ) s, % ( longitude ) s''. )"
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "-- The center of the search context."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "countries ( list ) -- A list of country codes specified in ISO 3166-1 alpha-3 format, e.g. -LSB- ` USA', ` CAN' -RSB-."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "This is a hard filter."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "language ( str ) -- Affects the language of the response, must be a BCP 47 compliant language code, e.g. en-US."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "If not provided and there are multiple results the HERE API will return 20 results by default."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "reverse ( query, *, language = None, limit = None, exactly_one = True, timeout = DEFAULT_SENTINEL )"
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "limit ( int ) -- Maximum number of results to be returned."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "class geopy.geocoders.IGNFrance ( api_key, *, username = None, password = None, referer = None, domain = ` wxs.ign.fr', scheme = None, timeout = DEFAULT_SENTINEL, proxies = DEFAULT_SENTINEL, user_agent = None, ssl_context = DEFAULT_SENTINEL, adapter_factory = None )"
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Geocoder using the IGN France GeoCoder OpenLS API."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "api_key ( str ) -- The API key required by IGN France API to perform geocoding requests."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "You can get your key here: https://geoservices.ign.fr/documentation/services-acces.html."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "For authentication with referer and with username/password, the api key always differ."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "username ( str ) -- When making a call need HTTP simple authentication username."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Mandatory if no referer set password ( str ) -- When making a call need HTTP simple authentication password."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Mandatory if no referer set referer ( str ) -- When making a call need HTTP referer."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Mandatory if no password and username domain ( str ) -- Currently it is ` wxs.ign.fr', can be changed for testing purposes for developer API e.g ` gpp3-wxs."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "geocode ( query, *, query_type = ` StreetAddress', maximum_responses = 25, is_freeform = False, filtering = None, exactly_one = True, timeout = DEFAULT_SENTINEL )"
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "query ( str ) -- The query string to be geocoded."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "query_type ( str ) -- The type to provide for geocoding."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "StreetAddress is the default choice if none provided."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "maximum_responses ( int ) -- The maximum number of responses to ask to the API in the query body."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "is_freeform ( str ) -- Set if return is structured with freeform structure or a more structured returned."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "By default, value is False."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "filtering ( str ) -- Provide string that help setting geocoder filter."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "It contains an XML string."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "See examples in documentation and ignfrance.py file in directory tests."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "reverse ( query, *, reverse_geocode_preference =( ` StreetAddress' ), maximum_responses = 25, filtering ='', exactly_one = True, timeout = DEFAULT_SENTINEL )"
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "reverse_geocode_preference ( list ) -- Enable to set expected results type."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "It can be StreetAddress or PositionOfInterest."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Default is set to StreetAddress."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "class geopy.geocoders.MapBox ( api_key, *, scheme = None, timeout = DEFAULT_SENTINEL, proxies = DEFAULT_SENTINEL, user_agent = None, ssl_context = DEFAULT_SENTINEL, adapter_factory = None, domain='api.mapbox.com' )"
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Geocoder using the Mapbox API."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "api_key ( str ) -- The API key required by Mapbox to perform geocoding requests."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "API keys are managed through Mapox's account page ( https://www.mapbox.com/account/access-tokens )."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "domain ( str ) -- base api domain for mapbox"
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "geocode ( query, *, exactly_one = True, timeout = DEFAULT_SENTINEL, proximity = None, country = None, bbox = None )"
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "proximity ( geopy.point.Point, list or tuple of ( latitude, longitude ), or string as'' % ( latitude ) s, % ( longitude ) s''. )"
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "-- A coordinate to bias local results based on a provided location."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "country ( str or list ) -- Country to filter result in form of ISO 3166-1 alpha-2 country code ( e.g. FR )."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Might be a Python list of strings."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "class geopy.geocoders.MapQuest ( api_key, *, scheme = None, timeout = DEFAULT_SENTINEL, proxies = DEFAULT_SENTINEL, user_agent = None, ssl_context = DEFAULT_SENTINEL, adapter_factory = None, domain='www.mapquestapi.com' )"
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Geocoder using the MapQuest API based on Licensed data."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "geopy.geocoders.OpenMapQuest Nominatim-alike API which is based on Open data from OpenStreetMap."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "geopy.geocoders.MapQuest ( this class ) MapQuest's own API which is based on Licensed data."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "api_key ( str ) -- The API key required by Mapquest to perform geocoding requests."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "API keys are managed through MapQuest's `` Manage Keys'' page ( https://developer.mapquest.com/user/me/apps )."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "domain ( str ) -- base api domain for mapquest"
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "geocode ( query, *, exactly_one = True, timeout = DEFAULT_SENTINEL, limit = None, bounds = None )"
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "class geopy.geocoders.MapTiler ( api_key, *, scheme = None, timeout = DEFAULT_SENTINEL, proxies = DEFAULT_SENTINEL, user_agent = None, ssl_context = DEFAULT_SENTINEL, adapter_factory = None, domain='api.maptiler.com' )"
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Geocoder using the MapTiler API."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Documentation at: https://cloud.maptiler.com/geocoding/ ( requires sign-up )"
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "api_key ( str ) -- The API key required by Maptiler to perform geocoding requests."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "API keys are managed through Maptiler's account page ( https://cloud.maptiler.com/account/keys )."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "domain ( str ) -- base api domain for Maptiler"
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "geocode ( query, *, exactly_one = True, timeout = DEFAULT_SENTINEL, proximity = None, language = None, bbox = None )"
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "language ( str or list ) -- Prefer results in specific languages."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Accepts a single string like `` en'' or a list like -LSB- `` de'', `` en'' -RSB-."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "class geopy.geocoders.OpenCage ( api_key, *, domain='api.opencagedata.com', scheme = None, timeout = DEFAULT_SENTINEL, proxies = DEFAULT_SENTINEL, user_agent = None, ssl_context = DEFAULT_SENTINEL, adapter_factory = None )"
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Geocoder using the OpenCageData API."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Changed in version 2.2: Improved error handling by using the default errors map ( e.g. to raise exc.GeocoderQuotaExceeded instead of exc.GeocoderQueryError for HTTP 402 error )"
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "api_key ( str ) -- The API key required by OpenCageData to perform geocoding requests."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "You can get your key here: https://opencagedata.com/ domain ( str ) -- Currently it is'api.opencagedata.com', can be changed for testing purposes."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "geocode ( query, *, bounds = None, country = None, language = None, annotations = True, exactly_one = True, timeout = DEFAULT_SENTINEL )"
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "-- Provides the geocoder with a hint to the region that the query resides in."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "This value will help the geocoder but will not restrict the possible results to the supplied region."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "The bounds parameter should be specified as 2 coordinate points -- corners of a bounding box."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "country ( str or list ) -- Restricts the results to the specified country or countries."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "The country code is a 2 character code as defined by the ISO 3166-1 Alpha 2 standard ( e.g. fr )."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "language ( str ) -- an IETF format language code ( such as es for Spanish or pt-BR for Brazilian Portuguese ) ; if this is omitted a code of en ( English ) will be assumed by the remote service."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "annotations ( bool ) -- Enable annotations data, which can be accessed via Location.raw."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Set to False if you don't need it to gain a little performance win."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "reverse ( query, *, language = None, exactly_one = True, timeout = DEFAULT_SENTINEL )"
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "class geopy.geocoders.OpenMapQuest ( api_key, *, timeout = DEFAULT_SENTINEL, proxies = DEFAULT_SENTINEL, domain='open.mapquestapi.com', scheme = None, user_agent = None, ssl_context = DEFAULT_SENTINEL, adapter_factory = None )"
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Bases: geopy.geocoders.nominatim.Nominatim Geocoder using MapQuest Open Platform Web Services."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "geopy.geocoders.OpenMapQuest ( this class ) Nominatim-alike API which is based on Open data from OpenStreetMap."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "geopy.geocoders.MapQuest MapQuest's own API which is based on Licensed data."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "api_key ( str ) -- API key provided by MapQuest, required."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "domain ( str ) -- Domain where the target Nominatim service is hosted."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "geocode ( query, *, exactly_one = True, timeout = DEFAULT_SENTINEL, limit = None, addressdetails = False, language = False, geometry = None, extratags = False, country_codes = None, viewbox = None, bounded = False, featuretype = None, namedetails = False )"
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "For a structured query, provide a dictionary whose keys are one of: street, city, county, state, country, or postalcode."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "For more information, see Nominatim's documentation for structured requests:"
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "limit ( int ) -- Maximum amount of results to return from Nominatim."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "addressdetails ( bool ) -- If you want in Location.raw to include address details such as house_number, city_district, postcode, etc ( in a structured form ) set it to True language ( str ) -- Preferred language in which to return results."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "geometry ( str ) -- If present, specifies whether the geocoding service should return the result's geometry in wkt, svg, kml, or geojson formats."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "This is available via the raw attribute on the returned geopy.location.Location object."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "extratags ( bool ) -- Include additional information in the result if available, e.g. wikipedia link, opening hours."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "country_codes ( str or list ) -- Limit search results to a specific country ( or a list of countries )."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "A country_code should be the ISO 3166-1alpha2 code, e.g. gb for the United Kingdom, de for Germany, etc. viewbox ( list or tuple of 2 items of geopy.point.Point or ( latitude, longitude ) or'' % ( latitude ) s, % ( longitude ) s''. )"
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "-- Prefer this area to find search results."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "By default this is treated as a hint, if you want to restrict results to this area, specify bounded = True as well."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "bounded ( bool ) -- Restrict the results to only items contained within the bounding viewbox."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "featuretype ( str ) -- If present, restrict results to certain type of features."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Allowed values: country, state, city, settlement."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "namedetails ( bool ) -- If you want in Location.raw to include namedetails, set it to True."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "This will be a list of alternative names, including language variants, etc.."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "reverse ( query, *, exactly_one = True, timeout = DEFAULT_SENTINEL, language = False, addressdetails = True, zoom = None )"
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "addressdetails ( bool ) -- Whether or not to include address details, such as city, county, state, etc. in Location.raw zoom ( int ) -- Level of detail required for the address, an integer in range from 0 ( country level ) to 18 ( building level ), default is 18."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "class geopy.geocoders.Nominatim ( *, timeout = DEFAULT_SENTINEL, proxies = DEFAULT_SENTINEL, domain='nominatim.openstreetmap.org', scheme = None, user_agent = None, ssl_context = DEFAULT_SENTINEL, adapter_factory = None )"
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Nominatim geocoder for OpenStreetMap data."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Attention Using Nominatim with the default user_agent is strongly discouraged, as it violates Nominatim's Usage Policy https://operations.osmfoundation.org/policies/nominatim/ and may possibly cause 403 and 429 HTTP errors."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Please make sure to specify a custom user_agent with Nominatim ( user_agent = `` my-application'' ) or by overriding the default user_agent: geopy.geocoders.options.default _ user_agent = `` my-application''."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "An exception will be thrown if a custom user_agent is not specified."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "__ init __ ( *, timeout = DEFAULT_SENTINEL, proxies = DEFAULT_SENTINEL, domain='nominatim.openstreetmap.org', scheme = None, user_agent = None, ssl_context = DEFAULT_SENTINEL, adapter_factory = None )"
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "class geopy.geocoders.Pelias ( domain, api_key = None, *, timeout = DEFAULT_SENTINEL, proxies = DEFAULT_SENTINEL, user_agent = None, scheme = None, ssl_context = DEFAULT_SENTINEL, adapter_factory = None )"
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "See also geopy.geocoders.GeocodeEarth which is a Pelias-based service provided by the developers of Pelias itself."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "domain ( str ) -- Specify a domain for Pelias API."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "class geopy.geocoders.Photon ( *, scheme = None, timeout = DEFAULT_SENTINEL, proxies = DEFAULT_SENTINEL, domain = ` photon.komoot.io', user_agent = None, ssl_context = DEFAULT_SENTINEL, adapter_factory = None )"
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Geocoder using Photon geocoding service ( data based on OpenStreetMap and service provided by Komoot on https://photon.komoot.io )."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Photon/Komoot geocoder aims to let you search as you type with OpenStreetMap."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "No API Key is needed by this platform."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Changed in version 2.2: Changed default domain from photon.komoot.de to photon.komoot.io."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "domain ( str ) -- Should be the localized Photon domain to connect to."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "The default is ` photon.komoot.io', but you can change it to a domain of your own."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "geocode ( query, *, exactly_one = True, timeout = DEFAULT_SENTINEL, location_bias = None, language = False, limit = None, osm_tag = None, bbox = None )"
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "location_bias ( geopy.point.Point, list or tuple of ( latitude, longitude ), or string as'' % ( latitude ) s, % ( longitude ) s''. )"
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "-- The coordinates to use as location bias."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "limit ( int ) -- Limit the number of returned results, defaults to no limit."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "osm_tag ( str or list or set ) -- The expression to filter ( include/exclude ) by key and / or value, str as ` key: value' or list/set of str if multiple filters are required as -LSB- ` key: !"
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "reverse ( query, *, exactly_one = True, timeout = DEFAULT_SENTINEL, language = False, limit = None )"
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "class geopy.geocoders.PickPoint ( api_key, *, timeout = DEFAULT_SENTINEL, proxies = DEFAULT_SENTINEL, domain = ` api.pickpoint.io', scheme = None, user_agent = None, ssl_context = DEFAULT_SENTINEL, adapter_factory = None )"
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Bases: geopy.geocoders.nominatim.Nominatim PickPoint geocoder is a commercial version of Nominatim."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "api_key ( str ) -- PickPoint API key obtained at https://pickpoint.io."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "class geopy.geocoders.LiveAddress ( auth_id, auth_token, *, timeout = DEFAULT_SENTINEL, proxies = DEFAULT_SENTINEL, user_agent = None, ssl_context = DEFAULT_SENTINEL, adapter_factory = None )"
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Geocoder using the LiveAddress API provided by SmartyStreets."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "auth_id ( str ) -- Valid Auth ID from SmartyStreets."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "auth_token ( str ) -- Valid Auth Token from SmartyStreets."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "geocode ( query, *, exactly_one = True, timeout = DEFAULT_SENTINEL, candidates = 1 )"
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "candidates ( int ) -- An integer between 1 and 10 indicating the max number of candidate addresses to return if a valid address could be found."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "class geopy.geocoders.TomTom ( api_key, *, scheme = None, timeout = DEFAULT_SENTINEL, proxies = DEFAULT_SENTINEL, user_agent = None, ssl_context = DEFAULT_SENTINEL, adapter_factory = None, domain='api.tomtom.com' )"
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "domain ( str ) -- Domain where the target TomTom service is hosted."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "class geopy.geocoders.What3Words ( api_key, *, timeout = DEFAULT_SENTINEL, proxies = DEFAULT_SENTINEL, user_agent = None, ssl_context = DEFAULT_SENTINEL, adapter_factory = None )"
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "What3Words geocoder using the legacy V2 API."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Attention Consider using What3WordsV3 instead."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Return a location point for a 3 words query."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "If the 3 words address doesn't exist, a geopy.exc.GeocoderQueryError exception will be thrown."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "query ( str ) -- The 3-word address you wish to geocode."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "lang ( str ) -- two character language code as supported by the API ( https://docs.what3words.com/api/v2/#lang )."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Due to the address scheme there is always exactly one result for each 3 words address, so this parameter is rather useless for this geocoder."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Return type geopy.location.Location or a list of them, if exactly_one = False."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Return a 3 words address by location point."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Each point on surface has a 3 words address, so there's always a non-empty response."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "-- The coordinates for which you wish to obtain the 3 word address."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "class geopy.geocoders.What3WordsV3 ( api_key, *, timeout = DEFAULT_SENTINEL, proxies = DEFAULT_SENTINEL, user_agent = None, ssl_context = DEFAULT_SENTINEL, adapter_factory = None )"
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "What3Words geocoder using the V3 API."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "lang ( str ) -- two character language code as supported by the API ( https://developer.what3words.com/public-api/docs#available-languages )."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "class geopy.geocoders.Yandex ( api_key, *, timeout = DEFAULT_SENTINEL, proxies = DEFAULT_SENTINEL, user_agent = None, scheme = None, ssl_context = DEFAULT_SENTINEL, adapter_factory = None )"
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "The key can be created at https://developer.tech.yandex.ru/ timeout ( int ) -- See geopy.geocoders.options.default _ timeout."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "geocode ( query, *, exactly_one = True, timeout = DEFAULT_SENTINEL, lang = None )"
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "lang ( str ) -- Language of the response and regional settings of the map."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "tr_TR -- Turkish ( only for maps of Turkey ) ; en_RU -- response in English, Russian map features ; en_US -- response in English, American map features ; ru_RU -- Russian ( default ) ; uk_UA -- Ukrainian ; be_BY -- Belarusian."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "reverse ( query, *, exactly_one = True, timeout = DEFAULT_SENTINEL, kind = None, lang = None )"
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Allowed values: house, street, metro, district, locality."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Geopy can calculate geodesic distance between two points using the geodesic distance or the great-circle distance, with a default of the geodesic distance available as the function geopy.distance.distance."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Great-circle distance ( great_circle ) uses a spherical model of the earth, using the mean earth radius as defined by the International Union of Geodesy and Geophysics, ( 2a + b ) / 3 = 6371.0087714150598 kilometers approx 6371.009 km ( for WGS-84 ), resulting in an error of up to about 0.5 %."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "The radius value is stored in distance.EARTH _ RADIUS, so it can be customized ( it should always be in kilometers, however )."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "The geodesic distance is the shortest distance on the surface of an ellipsoidal model of the earth."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "The default algorithm uses the method is given by Karney ( 2013 ) ( geodesic ) ; this is accurate to round-off and always converges."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "There are multiple popular ellipsoidal models, and which one will be the most accurate depends on where your points are located on the earth."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "The default is the WGS-84 ellipsoid, which is the most globally accurate."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "geopy includes a few other models in the distance.ELLIPSOIDS dictionary:"
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Here are examples of distance.distance usage, taking pair of ( lat, lon ) tuples:"
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "You can change the ellipsoid model used by the geodesic formulas like so:"
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "The above model name will automatically be retrieved from the distance.ELLIPSOIDS dictionary."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Alternatively, you can specify the model values directly:"
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Distances support simple arithmetic, making it easy to do things like calculate the length of a path:"
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Currently all algorithms assume that altitudes of the points are either zero ( as in the examples above ) or equal, and are relatively small."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Thus altitudes never affect the resulting distances:"
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "If you need to calculate distances with elevation, then for short distances the Euclidean distance formula might give a suitable approximation:"
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "An attempt to calculate distances between points with different altitudes would result in a ValueError exception."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "geopy.distance.distance accepts coordinates in ( y, x ) / ( lat, lon ) order, while some other libraries and systems might use ( x, y ) / ( lon, lat )."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "This function provides a convenient way to convert coordinates of the ( x, y ) / ( lon, lat ) format to a geopy.point.Point instance."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "x -- longitude y -- latitude z -- ( optional ) altitude"
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Returns Point ( latitude, longitude, altitude )"
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Base class for other distance algorithms."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Can be used for units conversion:"
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Distance instances have all distance properties from geopy.units, e.g.: km, m, meters, miles and so on."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "There are 3 ways to create a distance:"
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "From points ( for non-abstract distances only ), calculated as a sum of distances between all points:"
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "destination ( point, bearing, distance = None )"
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Calculate destination point using a starting point, bearing and a distance."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "This method works for non-abstract distances only."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Example: a point 10 miles east from ( 34, 148 ):"
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "point ( geopy.point.Point, list or tuple of ( latitude, longitude ), or string as'' % ( latitude ) s, % ( longitude ) s''. )"
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "distance ( Distance ) -- Distance, can be used to override this instance:"
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Bases: geopy.distance.Distance Calculate the geodesic distance between points."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Set which ellipsoidal model of the earth to use by specifying an ellipsoid keyword argument."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "The default is ` WGS-84', which is the most globally accurate model."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "If ellipsoid is a string, it is looked up in the ELLIPSOIDS dictionary to obtain the major and minor semiaxes and the flattening."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Otherwise, it should be a tuple with those values."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "See the comments above the ELLIPSOIDS dictionary for more information."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Bases: geopy.distance.Distance Use spherical geometry to calculate the surface distance between points."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Set which radius of the earth to use by specifying a radius keyword argument."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "It must be in kilometers."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "The default is to use the module constant EARTH_RADIUS, which uses the average great-circle radius."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "class geopy.location.Location ( address, point, raw )"
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Contains a parsed geocoder response."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Can be iterated over as ( location <String>, ( latitude <float>, longitude < Float ) )."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Or one can access the properties address, latitude, longitude, or raw."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "The last is a dictionary of the geocoder's response for this item."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Location as a formatted string returned by the geocoder or constructed by geopy, depending on the service."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Note Geocoding services usually don't consider altitude neither in requests nor in responses, so almost always the value of this property would be zero."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "geopy.point.Point instance representing the location's latitude, longitude, and altitude."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Location's raw, unparsed geocoder response."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "For details on this, consult the service's documentation."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "class geopy.point.Point ( latitude = None, longitude = None, altitude = None )"
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "A geodetic point with latitude, longitude, and altitude."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Latitude and longitude are floating point values in degrees."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Altitude is a floating point value in kilometers."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "The reference level is never considered and is thus application dependent, so be consistent !"
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "The default for all values is 0."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Points can be created in a number of ways ... With latitude, longitude, and altitude:"
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "With a sequence of 2 to 3 values ( latitude, longitude, altitude ):"
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Give a string containing at least latitude and longitude:"
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Point values can be accessed by name or by index:"
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "When unpacking ( or iterating ), a ( latitude, longitude, altitude ) tuple is returned:"
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "latitude ( float ) -- Latitude of point."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "longitude ( float ) -- Longitude of point."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "altitude ( float ) -- Altitude of point."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Format decimal degrees ( DD ) to degrees minutes seconds ( DMS ):"
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "See also format_unicode ( )."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Parameters altitude ( bool ) -- Whether to include altitude value."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "By default it is automatically included if it is non-zero."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Parameters unit ( str ) -- Resulting altitude unit."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Supported units are listed in from_string ( ) doc."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "format_decimal ( altitude = None )"
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Format decimal degrees with altitude:"
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "format_unicode ( altitude = None )"
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "format ( ) with pretty unicode chars for degrees, minutes and seconds:"
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "classmethod from_point ( point )"
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Create and return a new Point instance from another Point instance."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "classmethod from_sequence ( seq )"
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Create and return a new Point instance from any iterable with 2 to 3 elements."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "The elements, if present, must be latitude, longitude, and altitude, respectively."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "classmethod from_string ( string )"
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Create and return a Point instance from a string containing latitude and longitude, and optionally, altitude."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Latitude and longitude must be in degrees and may be in decimal form or indicate arcminutes and arcseconds ( labeled with Unicode prime and double prime, ASCII quote and double quote or ` m' and ` s' )."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "The degree symbol is optional and may be included after the decimal places ( in decimal form ) and before the arcminutes and arcseconds otherwise."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Coordinates given from south and west ( indicated by S and W suffixes ) will be converted to north and east by switching their signs."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "If no ( or partial ) cardinal directions are given, north and east are the assumed directions."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Latitude and longitude must be separated by at least whitespace, a comma, or a semicolon ( each with optional surrounding whitespace )."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Altitude, if supplied, must be a decimal number with given units."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "The following unit abbrevations ( case-insensitive ) are supported:"
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "km ( kilometers ) m ( meters ) mi ( miles ) ft ( feet ) nm, nmi ( nautical miles )"
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Some example strings that will work include:"
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "classmethod parse_altitude ( distance, unit )"
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Parse altitude managing units conversion:"
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "distance ( float ) -- Numeric value of altitude."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "classmethod parse_degrees ( degrees, arcminutes, arcseconds, direction = None )"
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Convert degrees, minutes, seconds and direction ( N, S, E, W ) to a single degrees number."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "class geopy.timezone.Timezone ( pytz_timezone, raw )"
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Contains a parsed response for a timezone request, which is implemented in few geocoders which provide such lookups."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Timezone's raw, unparsed geocoder response."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "geopy.units module provides utility functions for performing angle and distance unit conversions."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Some shortly named aliases are provided for convenience ( e.g. km ( ) is an alias for kilometers ( ) )."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "geopy.units.arcmin ( degrees = 0, radians = 0, arcseconds = 0 )"
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "geopy.units.arcminutes ( degrees = 0, radians = 0, arcseconds = 0 )"
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "geopy.units.arcsec ( degrees = 0, radians = 0, arcminutes = 0 )"
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "geopy.units.arcseconds ( degrees = 0, radians = 0, arcminutes = 0 )"
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "geopy.units.degrees ( radians = 0, arcminutes = 0, arcseconds = 0 )"
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Convert distance to nautical miles."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "geopy.units.rad ( degrees = 0, arcminutes = 0, arcseconds = 0 )"
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "geopy.units.radians ( degrees = 0, arcminutes = 0, arcseconds = 0 )"
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Bases: Exception Geopy-specific exceptions are all inherited from GeopyError."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Bases: geopy.exc.GeopyError, ValueError When instantiating a geocoder, the arguments given were invalid."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "See the documentation of each geocoder's __ init __ for more details."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Bases: geopy.exc.GeopyError There was an exception caused when calling the remote geocoding service, and no more specific exception could be raised by geopy."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "When calling geocoders' geocode or reverse methods, this is the most generic exception that can be raised, and any non-geopy exception will be caught and turned into this."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "The exception's message will be that of the original exception."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Bases: geopy.exc.GeocoderServiceError, ValueError Either geopy detected input that would cause a request to fail, or a request was made and the remote geocoding service responded that the request was bad."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Bases: geopy.exc.GeocoderServiceError The remote geocoding service refused to fulfill the request because the client has used its quota."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "class geopy.exc.GeocoderRateLimited ( message, *, retry_after = None )"
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Bases: geopy.exc.GeocoderQuotaExceeded, OSError The remote geocoding service has rate-limited the request."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Exception of this type has a retry_after attribute, which contains amount of time ( in seconds ) the service has asked to wait."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Might be None if there were no such data in response."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Bases: geopy.exc.GeocoderServiceError The remote geocoding service rejected the API key or account credentials this geocoder was instantiated with."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Bases: geopy.exc.GeocoderServiceError The remote geocoding service refused to fulfill a request using the account credentials given."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Bases: geopy.exc.GeocoderServiceError, TimeoutError The call to the geocoding service was aborted because no response has been received within the timeout argument of either the geocoding class or, if specified, the method call."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Some services are just consistently slow, and a higher timeout may be needed to use them."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Bases: geopy.exc.GeocoderServiceError, OSError Either it was not possible to establish a connection to the remote geocoding service, or the service responded with a code indicating it was unavailable."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Bases: geopy.exc.GeocoderServiceError Geopy could not parse the service's response."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "This is probably due to a bug in geopy."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Bases: geopy.exc.GeopyError, ValueError Caller requested the geocoder matching a string, e.g., `` google'' > GoogleV3, but no geocoder could be found."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Adapters are HTTP client implementations used by geocoders."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Some adapters might support keep-alives, request retries, http2, persistence of Cookies, response compression and so on."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Adapters should be considered an implementation detail."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Most of the time you wouldn't need to know about their existence unless you want to tune HTTP client settings."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "New in version 2.0: Adapters are currently provided on a provisional basis."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "class geopy.adapters.RequestsAdapter ( *, proxies, ssl_context, pool_connections = 10, pool_maxsize = 10, max_retries = 2, pool_block = False )"
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Bases: geopy.adapters.BaseSyncAdapter The adapter which uses requests library."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "requests supports keep-alives, retries, persists Cookies, allows response compression and uses HTTP/1 .1 -LSB- currently -RSB-."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "requests package must be installed in order to use this adapter."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "class geopy.adapters.URLLibAdapter ( *, proxies, ssl_context )"
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Bases: geopy.adapters.BaseSyncAdapter The fallback adapter which uses urllib from the Python standard library, see urllib.request.urlopen ( )."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "urllib doesn't support keep-alives, request retries, doesn't persist Cookies and is HTTP/1 .1 only."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "urllib was the only available option for making requests in geopy 1.x, so this adapter behaves the same as geopy 1.x in terms of HTTP requests."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "class geopy.adapters.AioHTTPAdapter ( *, proxies, ssl_context )"
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Bases: geopy.adapters.BaseAsyncAdapter The adapter which uses aiohttp library."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "aiohttp supports keep-alives, persists Cookies, allows response compression and uses HTTP/1 .1 -LSB- currently -RSB-."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "aiohttp package must be installed in order to use this adapter."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "class geopy.adapters.AdapterHTTPError ( message, *, status_code, headers, text )"
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Bases: OSError An exception which must be raised by adapters when an HTTP response with a non-successful status code has been received."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Base Geocoder class translates this exception to an instance of geopy.exc.GeocoderServiceError."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "message ( str ) -- Standard exception message."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "status_code ( int ) -- HTTP status code."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "headers ( dict ) -- HTTP response readers."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "A mapping object with lowercased or case-insensitive keys."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "class geopy.adapters.BaseAdapter ( *, proxies, ssl_context )"
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Base class for an Adapter."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "There are two types of adapters:"
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "BaseSyncAdapter -- synchronous adapter, BaseAsyncAdapter -- asynchronous ( asyncio ) adapter."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Concrete adapter implementations must extend one of the two base adapters above."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "See geopy.geocoders.options.default _ adapter_factory for details on how to specify an adapter to be used by geocoders."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "See geopy.geocoders.options.default _ proxies ( note that Adapters always receive a dict: the string proxy is transformed to dict in the base geopy.geocoders.base.Geocoder class. )"
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Same as get_text except that the response is expected to be a valid JSON."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "The value returned is the parsed JSON."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "geopy.exc.GeocoderParseError must be raised if the response can not be parsed."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "timeout ( float ) -- See geopy.geocoders.options.default _ timeout."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "headers ( dict ) -- A dict with custom HTTP request headers."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Make a GET request and return the response as string."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "This method should not raise any exceptions other than these:"
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "geopy.adapters.AdapterHTTPError should be raised if the response was successfully retrieved but the status code was non-successful."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "geopy.exc.GeocoderTimedOut should be raised when the request times out."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "geopy.exc.GeocoderUnavailable should be raised when the target host is unreachable."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "geopy.exc.GeocoderServiceError is the least specific error in the exceptions hierarchy and should be raised in any other cases."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "class geopy.adapters.BaseSyncAdapter ( *, proxies, ssl_context )"
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Bases: geopy.adapters.BaseAdapter Base class for synchronous adapters."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "class geopy.adapters.BaseAsyncAdapter ( *, proxies, ssl_context )"
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Bases: geopy.adapters.BaseAdapter Base class for asynchronous adapters."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "geopy will log geocoding URLs with a logger name geopy at level DEBUG, and for some geocoders, these URLs will include authentication information."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "HTTP bodies of responses with unsuccessful status codes are logged with INFO level."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Default logging level is NOTSET, which delegates the messages processing to the root logger."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "See docs for logging.Logger.setLevel ( ) for more information."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "geopy attempts to follow semantic versioning, however some breaking changes are still being made in minor releases, such as:"
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Backwards-incompatible changes of the undocumented API."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "This shouldn't affect anyone, unless they extend geocoder classes or use undocumented features or monkey-patch anything."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "If you believe that something is missing in geopy, please consider opening an issue or providing a patch/PR instead of hacking around geopy."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Geocoding services sometimes introduce new APIs and deprecate the previous ones."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "We try to upgrade without breaking the geocoder's API interface, but the geopy.location.Location.raw value might change in a backwards-incompatible way."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Behavior for invalid input and peculiar edge cases might be altered."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "For example, geopy.point.Point instances previously did coordinate values normalization, though it's not documented, and it was completely wrong for the latitudes outside the -LSB- -90 ; 90 -RSB- range."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "So instead of using an incorrectly normalized value for latitude, a ValueError exception is now thrown ( # 294 )."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Features and usages being phased out are covered with deprecation warnings when possible."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Make sure to run your python with the - Wd switch to see if your code emits the warnings."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "To make the upgrade less painful, please read the changelog before upgrading."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Changelog for 0.9 x series."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "\u00a9 Copyright 2006-2018, GeoPy Contributors."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Built with Sphinx using a theme provided by Read the Docs."
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Ad by EthicalAds \u00b7 Monetize your site"
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Read the Docs v: stable"
    },
    {
        "task": "Student's picnic place",
        "description": "Given a string representing rendezvous address and a list of suggested picnic addresses you must write an algorithm using the geopy module to find the picnic address with the closest distance to the rendezvous address.",
        "source": "Welcome to GeoPy\u2019s documentation! \u2014 GeoPy 2.2.0 documentation",
        "text": "Hosted by Read the Docs \u00b7 Privacy Policy"
    }
]