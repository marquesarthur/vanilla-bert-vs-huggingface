{
    "task": "How to set a minimum crop window ?",
    "description": "The crop window can be resized to a very small circle. How can it be set to a fixed width and height ?\n",
    "type": "GIT",
    "link": "https://github.com/edmodo/cropper/issues/49",
    "question_id": "49",
    "resources": {
        "api": [
            {
                "link": "https://docs.oracle.com/javase/8/javafx/layout-tutorial/size_align.htm",
                "type": "java",
                "content": [
                    "This topic describes techniques for controlling the size and alignment of nodes when placed in a JavaFX layout pane.",
                    "A main advantage of using the built-in JavaFX layout panes is that the size and alignment of nodes is handled by the pane.",
                    "As the pane is resized, the nodes are resized according to their preferred size range preferences.",
                    "Note that not all node classes are resizable.",
                    "UI controls and layout panes are resizable, but shapes, Text objects, and Group objects are not resizable and are treated as rigid objects in a layout.",
                    "If you want more control over the size of controls in your UI, you can set their preferred size range directly.",
                    "The layout pane then uses your settings to determine the size of the control.",
                    "To manage the position of the controls, you can use the alignment properties for the layout panes.",
                    "This topic provides simple examples for sizing and aligning nodes in a pane.",
                    "The LayoutSizingAligning.java file contains the source code for the samples described in this topic.",
                    "The LayoutSizingAligning.zip file contains the NetBeans IDE project for the sample.",
                    "Layouts query the preferred size of their nodes by invoking the prefWidth ( height ) and prefHeight ( width ) methods.",
                    "By default, UI controls compute default values for their preferred size that is based on the content of the control.",
                    "For example, the computed size of a Button object is determined by the length of the text and the size of the font used for the label, plus the size of any image.",
                    "Typically, the computed size is just big enough for the control and the label to be fully visible.",
                    "UI controls also provide default minimum and maximum sizes that are based on the typical usage of the control.",
                    "For example, the maximum size of a Button object defaults to its preferred size because you don't usually want buttons to grow arbitrarily large.",
                    "However, the maximum size of a ScrollPane object is unbounded because typically you do want them to grow to fill their spaces.",
                    "You can use the default size constraints of nodes, or you can set them to provide the look that you want.",
                    "For example, Figure 2-1 shows the default size of several buttons and a list view in a border pane.",
                    "Suppose that the look that you want is the screen shown in Figure 2-2, which shows the UI controls sized according to desired constraints.",
                    "Applications often need to directly set the minimum, preferred, and maximum size constraints on controls.",
                    "The following sections provide tips for overriding the computed sizes to get the look that you want.",
                    "You can go through the trouble of determining the height and width of each button and then setting the preferred size of each button to the greatest height and width of the buttons in the set.",
                    "An easier option is to let the layout panes do the work.",
                    "The layout pane that you want to use is determined by the effect that you want to achieve.",
                    "The scene in Figure 2-1 uses a VBox layout pane for the buttons on the right and uses the computed sizes for the buttons.",
                    "The buttons already have the same height, so only the width needs to be changed.",
                    "The scene in Figure 2-2 uses a VBox pane to take advantage of the default behavior that makes the width of the VBox pane the same as the preferred width of its widest element.",
                    "To enable all of the buttons to be resized to the width of the VBox pane, the maximum width of each button is set to the Double.MAX _ VALUE constant, which enables a control to grow without limit.",
                    "An alternative to using the maximum value constant is to set the maximum width to a specific value, such as 80.0.",
                    "Example 2-1 shows how to make a column of buttons the same width using a VBox pane.",
                    "Example 2-1 Set a Column of Buttons to the Same Width",
                    "In the Layout Sizing and Aligning sample, the elements of the UI are laid out using a border pane.",
                    "The column of buttons is put in the right region of the border pane to limit the size of the buttons to the preferred width of the widest button.",
                    "The center region of a border pane expands to fill any space available so if you put the VBox pane in the center region, the VBox pane and the buttons also expand.",
                    "The scene in Figure 2-1 uses an HBox layout pane for the buttons on the bottom and uses the computed sizes for those buttons.",
                    "The buttons have different widths and heights.",
                    "The scene in Figure 2-2 uses a horizontal TilePane layout pane to take advantage of the default behavior that makes each cell ( tile ) the same size.",
                    "The size of each tile is the size needed to hold the preferred size of the largest node in the tile pane.",
                    "To enable the buttons to be resized to the size of the tile, set the maximum width and height to the Double.MAX _ VALUE constant.",
                    "Example 2-2 shows how make a row of buttons the same width and height using a tile pane.",
                    "Example 2-2 Set a Row of Buttons to the Same Size",
                    "Tiles are not resized as the window size changes so the buttons don't change size when set in a tile pane.",
                    "Note that if the width of the window is reduced, the buttons in the tile pane change position, but do not get smaller.",
                    "As a stage is resized, layout panes within the stage might have more or less space to allocate to the controls that they contain.",
                    "Each layout pane has its own rules for allocating space according to the minimum, preferred, and maximum size ranges of the controls.In general, controls that have a default maximum size of Double.MAX _ VALUE expand to fill their space while controls with constrained maximum sizes do not expand.",
                    "For example, a ListView object has an unbounded maximum.",
                    "If you want to limit the height to its preferred size, you can set the maximum size to the Control.USE _ PREF_SIZE constant, as shown in Example 2-3.",
                    "Example 2-3 Set Maximum Height to Preferred Height",
                    "By default, buttons grow only to their preferred size.",
                    "However, buttons shrink to where the label is shown as three dots ( ... ) if the minimum width is not overridden.",
                    "To prevent a button from becoming smaller than its preferred width, set its minimum width to its preferred width as shown in Example 2-4.",
                    "Example 2-4 Set Minimum Width to Preferred Width",
                    "The preferred size of a control is initially based on the computed size.",
                    "You can override the default preferred size by setting the preferred size constraint to the size of your choice.",
                    "The following statement overrides the preferred width of a list view:",
                    "If you do not want the size of a node to change, set the minimum, maximum, and preferred sizes to the same size.",
                    "To prevent only the width or height from changing, set the width or height constraints to the same value.",
                    "In Example 2-5, a list is created with all size constraints set to the same width and height values so that the size of the list doesn't change as the size of the window changes.",
                    "A button is created with all width constraints set to the same value.",
                    "Example 2-5 Set Size Constraints to Prevent Resizing",
                    "Each layout pane has a default way of aligning the nodes within the pane.",
                    "For example, in HBox and VBox layout panes, nodes are top-justified and left-justified.",
                    "In TilePane and FlowPane layout panes, nodes are centered.",
                    "The panes themselves by default are typically top-justified and left-justified.",
                    "You can manage the alignment of nodes and panes by using the setAlignment ( ) method for the panes.",
                    "Alignment constants are available in the following enum types in the javafx.geometry package:",
                    "HPos - Values for specifying horizontal alignment.",
                    "Pos - Values for specifying vertical and horizontal alignment.",
                    "The value to the left of the underscore specifies the vertical alignment, the value to the right of the underscore specifies the horizontal alignment.",
                    "For example, Pos.BOTTOM _ LEFT aligns a node at the bottom of the space vertically and at the left edge of the space horizontally.",
                    "VPos - Values for specifying vertical alignment.",
                    "Figure 2-3 is created by the code shown in Example 2-6.",
                    "Without any alignment constraints specified, the layout pane is placed in the top left corner.",
                    "Example 2-6 Create a UI with Default Alignment",
                    "Suppose the look that you want is the screen shown in Figure 2-4, which centers the layout pane in the screen and changes the default alignment of the controls.",
                    "The following sections provide tips for overriding the default positions.",
                    "To center the grid from Example 2-6 in the scene, use the following statement:",
                    "In the desired layout, the labels are right-justified and the fields are left-justified.",
                    "To achieve this in a grid, define each column using the ColumnConstraints class and set the horizontal alignment constraint.",
                    "Example 2-7 defines the columns for the grid from Example 2-6.",
                    "Example 2-7 Define the Columns in the Grid",
                    "An alternative for right-justifying controls in a column is to use a VBox layout pane.",
                    "Use the setAlignment ( ) method as shown in the following statements:",
                    "The buttons are laid out in an HBox layout pane that spans both columns in the grid.",
                    "The following statement centers the buttons in the grid from Example 2-6:",
                    "The setAlignment ( ) method for the HBox pane centers the HBox pane within its layout area and also centers the nodes within the HBox pane.",
                    "You might prefer to center the HBox pane within the row but bottom-justify the buttons within the HBox pane as shown in Figure 2-5.",
                    "Figure 2-5 Override Positions and Bottom-Justify the Buttons",
                    "For this arrangement, place the HBox pane in an inner grid with a single cell and place that grid in the third row of the outer grid.",
                    "Set the alignment constraint for the inner grid to center the grid and set the alignment constraint for the HBox pane to bottom-justify the contents as shown in Example 2-8.",
                    "Example 2-8 Center and Bottom-Justify the Buttons",
                    "To learn more about the layout panes in JavaFX, see the information for the javafx.scene.layout package in the API Documentation.",
                    ""
                ],
                "title": "2 Tips for Sizing and Aligning Nodes (Release 8)"
            }
        ],
        "git": [
            {
                "link": "https://github.com/ArthurHub/Android-Image-Cropper/issues/22",
                "content": [
                    "The ability to set a minimum maximum height/width",
                    "\u00b7 Issue # 22 \u00b7 ArthurHub/Android-Image-Cropper \u00b7 GitHub",
                    "How can i set min/max crop height ?",
                    "The text was updated successfully, but these errors were encountered:",
                    "currently you can't, will add it soon",
                    "update: started working on it but ther is an issue with some current code so I will probably finish it in a week or so.",
                    "I wait for it too !",
                    "\ud83d\udc83 good library man: )",
                    "Add min limit config on cropping window width/height in the UI ( cropMinCropWindowWidth, cropMinCropWindowHeight )",
                    "Add min/max config on cropping image result width/height ( cropMinCropResultWidthPX, cropMinCropResultHeightPX, cropMaxCropResultWidthPX, cropMaxCropResultHeightPX )",
                    "Note the cropping image result min/max is in pixels and can effect the usability of the cropping UI if set to low values for large images.",
                    "I wasn't sure on the best way to approach it so let me know what your use case is.",
                    ""
                ],
                "title": "The ability to set a minimum maximum height/width"
            }
        ],
        "qa": [
            {
                "uid": "27512966",
                "link": "https://stackoverflow.com/questions/27512966",
                "title": "Crop a fixed size image in Android",
                "answers": [
                    {
                        "uid": 27563685,
                        "score": 4,
                        "text": [
                            "There is a method you can use\u00c6",
                            "This part of code is what you\u00f8re interested in:",
                            "You should call crop method like this:"
                        ]
                    },
                    {
                        "uid": 27563918,
                        "score": 18,
                        "text": [
                            "I'd use one of these solutions:",
                            "Both seems to be appropriate to solve your problem and for sure cover more edge cases, devices and other Android stuff just to be more stable and reliable.",
                            "EDIT: I have introduced a few changes to android-crop and now you can use withFixedSize -LRB- int width, int height -RRB- to set fixed cropping area in pixels.",
                            "Looks like this:",
                            "Here it's a LINK",
                            "Check full code at my github LINK.",
                            "You can clone build and add it to your project afterwards.",
                            "Hope it will help you."
                        ]
                    }
                ],
                "tags": [
                    "android",
                    "crop"
                ]
            }
        ],
        "other": [
            {
                "link": "https://guides.codepath.com/android/Working-with-the-ImageView",
                "type": "misc",
                "content": [
                    "Jump to SectionTable of ContentsOverviewUsageSizing ImageView ControlsScale TypesSupporting Multiple DensitiesFinal Android ResizerMipmaps and DrawablesWorking with BitmapsScaling a BitmapDisplaying SVG ImagesTo send command to Printer to print image in the form of BitmapReferencesWorking with the ImageViewEdit PagePage HistoryOverview Typically, images are displayed using the built-in image view.",
                    "This view takes care of the loading and optimizing of the image, freeing you to focus on app-specific details like the layout and content.",
                    "In this guide, we will take a look at how to use an ImageView, how to manipulate bitmaps, learn about the different density folders and more.",
                    "Usage At the simplest level, an ImageView is simply a view you embed within an XML layout that is used to display an image ( or any drawable ) on the screen.",
                    "The ImageView looks like this in res/layout/activity _ main.xml:",
                    "The ImageView handles all the loading and scaling of the image for you.",
                    "Note the scaleType attribute which defines how the images will be scaled to fit in your layout.",
                    "In the example, using scaleType `` center'', the image will be displayed at its native resolution and centered in the view, regardless of how much space the view consumes.",
                    "Sizing ImageView Controls By default, contents of an ImageView control are of a certain size -- usually the size of the image dimensions.",
                    "They can also be bounded by their layout_width and layout_height attributes:",
                    "The scaleType above has been set to fitXY which sets the height and the width up or down to fit the maximum dimensions specified.",
                    "Fixing the width and height however means that the proportions of the width and height of the original image, known as the aspect ratio, will be altered.",
                    "We can take advantage of the adjustViewBounds parameter to preserve this aspect ratio.",
                    "However, we must either allow the height and/or width to be adjustable ( i.e. by using maxWidth and using wrap_content for the dimension ).",
                    "Otherwise, the dimensions can not be readjusted to meet the required aspect ratio.",
                    "By combining these properties together we can control the rough size of the image and still adjust the image according to the proper aspect ratio.",
                    "We can also size an ImageView at runtime within our Java source code by modifying the width or height inside getLayoutParams ( ) for the view:",
                    "In certain cases, the image needs to be scaled to fit the parent view's width and the height should be adjusted proportionally.",
                    "We can achieve this using an extended ResizableImageView class as described in the post.",
                    "Scale Types An ImageView can display an image differently based on the scaleType provided.",
                    "Above we discussed the fitXY type along with adjustViewBounds to match the aspect ratio of the drawable.",
                    "The following is a list of all the most common types:",
                    "center Displays the image centered in the view with no scaling.",
                    "centerCrop Scales the image such that both the x and y dimensions are greater than or equal to the view, while maintaining the image aspect ratio ; centers the image in the view.",
                    "centerInside Scales the image to fit inside the view, while maintaining the image aspect ratio.",
                    "If the image is already smaller than the view, then this is the same as center.",
                    "fitCenter Scales the image to fit inside the view, while maintaining the image aspect ratio.",
                    "At least one axis will exactly match the view, and the result is centered inside the view.",
                    "fitStart Same as fitCenter but aligned to the top left of the view.",
                    "fitEnd Same as fitCenter but aligned to the bottom right of the view.",
                    "fitXY Scales the x and y dimensions to exactly match the view size ; does not maintain the image aspect ratio.",
                    "matrix Scales the image using a supplied Matrix class.",
                    "The matrix can be supplied using the setImageMatrix method.",
                    "A Matrix class can be used to apply transformations such as rotations to an image.",
                    "Note: The fitXY scale type allows you to set the exact size of the image in your layout.",
                    "However, be mindful of potential distortions of the image due to scaling.",
                    "If you're creating a photo-viewing application, you will probably want to use the center or fitCenter scale types.",
                    "Refer to this ImageView ScaleType visual guide for additional reference.",
                    "Remember that if you wish to match the aspect ratio of the actual drawable, adjustViewBounds = true must be declared along with not defining an explicit width and/or height.",
                    "Supporting Multiple Densities Since Android has so many different screen sizes, resolutions and densities, there is a powerful system for selecting the correct image asset for the correct device.",
                    "There are specific drawable folders for each device density category including: ldpi ( low ), mdpi ( medium ), hdpi ( high ), and xhdpi ( extra high ).",
                    "Notice that every app has folders for image drawables such as drawable-mdpi which is for `` medium dots per inch''.",
                    "To create alternative bitmap drawables for different densities, you should follow the 3:4:6:8 scaling ratio between the four generalized densities.",
                    "Refer to the chart below:",
                    "Density DPI Example Device Scale Pixels",
                    "hdpi 240 Galaxy S II 1.5 x 1dp = 1.5 px",
                    "This means that if you generate a 100x100 for mdpi ( 1x baseline ), then you should generate the same resource in 150x150 for hdpi ( 1.5 x ), 200x200 image for xhdpi devices ( 2.0 x ), 300x300 image for xxhdpi ( 3.0 x ) and a 75x75 image for ldpi devices ( 0.75 x ).",
                    "See these density guidelines for additional details.",
                    "Final Android Resizer To resize images more easily, check out the Final Android Resizer by downloading and running this JAR.",
                    "This handy utility allows us to select a resources directory, choose an extra high density image and the tool will automatically generate the corresponding lower size images for us and place the subfolders inside the generated res-drawable directory within the actual res folder in your project as the example shows below in `` Project'' view ( left ) and the default `` Android'' view ( right ): Refer to the screens support reference for a more detailed look at supporting a wide range of devices.",
                    "Also check out the iconography guide for more details.",
                    "Mipmaps and Drawables Starting with Android 4.3, there is now an option to use the res/mipmap folder to store `` mipmap'' images.",
                    "Mipmaps are most commonly used for application icons such as the launcher icon.",
                    "To learn more about the benefits of mipmaps be sure to check out the mipmapping for drawables post.",
                    "Mipmap image resources can then be accessed using the @mipmap / ic_launcher notation in place of @drawable.",
                    "Placing icons in mipmap folders ( rather than drawable ) is considered a best practice because they can often be used at resolutions different from the device's current density.",
                    "For example, an xxxhdpi app icon might be used on the launcher for an xxhdpi device.",
                    "Review this post about preparing for the Nexus 6 which explains in more detail.",
                    "Working with Bitmaps We can change the bitmap displayed in an ImageView to a drawable resource with:",
                    "or to any arbitrary bitmap with:",
                    "Scaling a Bitmap If we need to resize a Bitmap, we can call the -LSB- createScaledBitmap -RSB- ( http://developer.android.com/reference/android/graphics/Bitmap.html#createScaledBitmap ( android.graphics.Bitmap, int, int, boolean ) -RSB- method to resize any bitmap to our desired width and height:",
                    "You often want to resize a bitmap but preserve the aspect ratio using a BitmapScaler utility class with code like this:",
                    "In other cases, you may want to determine the device height or width in order to resize the image accordingly.",
                    "Copy this DeviceDimensionsHelper.java utility class to DeviceDimensionsHelper.java in your project and use anywhere that you have a context to determine the screen dimensions:",
                    "Check out this source for more information on how to scale a bitmap based instead on relative device width and height.",
                    "Note: Doing any type of scaling of images results in the loss of EXIF metadata that includes info such as camera, rotation, date/time of the photo taken.",
                    "While there are workarounds to transfer this data after the image has been copied, there are current limitations.",
                    "If you need this info or wish to upload it to some site, you should send the original file and not the downsampled version.",
                    "Displaying SVG Images Android has now vector drawables support, which allows SVG files to be imported to a specific format.",
                    "SVG files can be automatically converted using Android Studio by going to File - > New - > Vector Asset.",
                    "Make sure to click Local file ( SVG, PSD ) to import the file.",
                    "To send command to Printer to print image in the form of Bitmap",
                    "Overview Typically, images are displayed using the built-in image view.",
                    ""
                ],
                "title": "Working with the ImageView | CodePath Android Cliffnotes"
            }
        ]
    },
    "parsed": true
}