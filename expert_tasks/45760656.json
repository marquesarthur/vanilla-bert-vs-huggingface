{
    "task": "How can I hide a fragment on start of my MainActivity( or the application)?",
    "description": "Well the title says it all, I have no idea how to hide it on startup.\nI tried searching but nothing happened in the way that I want it to happen.\nSo what I want to happen is that I want the BottomFragment to be hidden on start up.\nI want it to show up when I click this button in the TopFragment and the TopFragment is visible at start up.",
    "type": "SO",
    "link": "https://stackoverflow.com/questions/45760656",
    "question_id": "45760656",
    "resources": {
        "api": [
            {
                "link": "https://developer.android.com/training/basics/firstapp/starting-activity",
                "type": "android",
                "content": [
                    "When you complete the previous lesson, you have an app that shows an activity that consists of a single screen with a text field and a Send button.",
                    "In this lesson, you add some code to the MainActivity that starts a new activity to display a message when the user taps the Send button.",
                    "Follow these steps to add a method to the MainActivity class that's called when the Send button is tapped:",
                    "In the file app > java > com.example.myfirstapp > MainActivity, add the following sendMessage ( ) method stub:",
                    "You might see an error because Android Studio can not resolve the View class used as the method argument.",
                    "To clear the error, click the View declaration, place your cursor on it, and then press Alt + Enter, or Option + Enter on a Mac, to perform a Quick Fix.",
                    "If a menu appears, select Import class.",
                    "Now when the button is tapped, the system calls the sendMessage ( ) method.",
                    "Take note of the details in this method.",
                    "They're required for the system to recognize the method as compatible with the android: onClick attribute.",
                    "Specifically, the method has the following characteristics:",
                    "An Intent is an object that provides runtime binding between separate components, such as two activities.",
                    "The Intent represents an app's intent to do something.",
                    "You can use intents for a wide variety of tasks, but in this lesson, your intent starts another activity.",
                    "In MainActivity, add the EXTRA_MESSAGE constant and the sendMessage ( ) code, as shown:",
                    "Expect Android Studio to encounter Can not resolve symbol errors again.",
                    "To clear the errors, press Alt + Enter, or Option + Return on a Mac.",
                    "Your should end up with the following imports:",
                    "An error still remains for DisplayMessageActivity, but that's okay.",
                    "You fix it in the next section.",
                    "Here's what's going on in sendMessage ( ):",
                    "The Intent constructor takes two parameters, a Context and a Class.",
                    "The Context parameter is used first because the Activity class is a subclass of Context.",
                    "The Class parameter of the app component, to which the system delivers the Intent, is, in this case, the activity to start.",
                    "The putExtra ( ) method adds the value of EditText to the intent.",
                    "An Intent can carry data types as key-value pairs called extras.",
                    "Your key is a public constant EXTRA_MESSAGE because the next activity uses the key to retrieve the text value.",
                    "It's a good practice to define keys for intent extras with your app's package name as a prefix.",
                    "This ensures that the keys are unique, in case your app interacts with other apps.",
                    "To create the second activity, follow these steps:",
                    "Android Studio automatically does three things:",
                    "If you run the app and tap the button on the first activity, the second activity starts but is empty.",
                    "This is because the second activity uses the empty layout provided by the template.",
                    "The new activity includes a blank layout file.",
                    "Follow these steps to add a text view to where the message appears:",
                    "Optionally, you can make some adjustments to the text style if you expand textAppearance in the Common Attributes panel of the Attributes window, and change attributes such as textSize and textColor.",
                    "In this step, you modify the second activity to display the message that was passed by the first activity.",
                    "In DisplayMessageActivity, add the following code to the onCreate ( ) method:",
                    "Press Alt + Enter, or Option + Return on a Mac, to import these other needed classes:",
                    "Each screen in your app that's not the main entry point, which are all the screens that aren't the home screen, must provide navigation that directs the user to the logical parent screen in the app's hierarchy.",
                    "To do this, add an Up button in the app bar.",
                    "To add an Up button, you need to declare which activity is the logical parent in the AndroidManifest.xml file.",
                    "Open the file at app > manifests > AndroidManifest.xml, locate the <activity> tag for DisplayMessageActivity, and replace it with the following:",
                    "The Android system now automatically adds the Up button to the app bar.",
                    "Click Apply Changes in the toolbar to run the app.",
                    "When it opens, type a message in the text field and tap Send to see the message appear in the second activity.",
                    "That's it, you've built your first Android app !",
                    "To continue to learn the basics about Android app development, go back to Build your first app and follow the other links provided there.",
                    "In the file app > java > com.example.myfirstapp > MainActivity, add the following sendMessage ( ) method stub: Kotlin Java You might see an error because Android Studio can not resolve the View class used as the method argument.",
                    "Return to the activity_main.xml file to call the method from the button: Select the button in the Layout Editor.",
                    "In the Attributes window, locate the onClick property and select sendMessage -LSB- MainActivity -RSB- from its drop-down list.",
                    "Specifically, the method has the following characteristics: Public access.",
                    "A void or, in Kotlin, an implicit unit return value.",
                    "A View as the only parameter.",
                    "This is the View object you clicked at the end of Step 1.",
                    "Select the button in the Layout Editor.",
                    "Next, fill in this method to read the contents of the text field and deliver that text to another activity.",
                    "The startActivity ( ) method starts an instance of the DisplayMessageActivity that's specified by the Intent.",
                    "Next, you need to create that class.",
                    "In the Project window, right-click the app folder and select New > Activity > Empty Activity.",
                    "In the Configure Activity window, enter `` DisplayMessageActivity'' for Activity Name.",
                    "Leave all other properties set to their defaults and click Finish.",
                    "Creates the layout file activity_display_message.xml, which corresponds with the DisplayMessageActivity file.",
                    "Adds the required <activity> element in AndroidManifest.xml.",
                    "Open the file app > res > layout > activity_display_message.xml.",
                    "Click Enable Autoconnection to Parent in the toolbar.",
                    "In the Palette panel, click Text, drag a TextView into the layout, and drop it near the top-center of the layout so that it snaps to the vertical line that appears.",
                    "Autoconnect adds left and right constraints in order to place the view in the horizontal center.",
                    "Create one more constraint from the top of the text view to the top of the layout, so that it appears as shown in figure 1.",
                    "In DisplayMessageActivity, add the following code to the onCreate ( ) method: Kotlin Java",
                    "Press Alt + Enter, or Option + Return on a Mac, to import these other needed classes: Kotlin Java",
                    ""
                ],
                "title": "Start another activity \u00a0|\u00a0 Android Developers"
            }
        ],
        "git": [
            {
                "link": "https://github.com/yavski/fab-speed-dial/issues/53",
                "content": [
                    "How to hide activity's fab-speed-dial in child fragment ?",
                    "\u00b7 Issue # 53 \u00b7 yavski/fab-speed-dial \u00b7 GitHub",
                    "I have a Main Activity which contains a fab-speed-dial, and I am using NavigationDrawer swich fragments.",
                    "When I replace to another fragment, I want hide fab-speed-dial, I tried implements this in MainActivity:",
                    "and in fragment I called hideFabMain ( ) method:",
                    "However, I got a NULL pointer error:",
                    "So, I want get some help in my question, this really struggled me out, the great author can give me some advise ?",
                    "The text was updated successfully, but these errors were encountered:",
                    ""
                ],
                "title": "How to hide activity's fab-speed-dial in child fragment ?"
            }
        ],
        "qa": [
            {
                "uid": "14347588",
                "link": "https://stackoverflow.com/questions/14347588",
                "title": "Show hide fragment in android",
                "answers": [
                    {
                        "uid": 16490344,
                        "score": 166,
                        "text": [
                            "Don't mess with the visibility flags of the container - FragmentTransaction.hide / show does that internally for you.",
                            "So the correct way to do this is:",
                            "OR if you are using android.support.v4.app.Fragment"
                        ]
                    },
                    {
                        "uid": 21403406,
                        "score": 59,
                        "text": [
                            "In addittion, you can do in a Fragment -LRB- for example when getting server data failed -RRB-:"
                        ]
                    },
                    {
                        "uid": 31197906,
                        "score": 23,
                        "text": [
                            "Hi you do it by using this approach, all fragments will remain in the container once added initially and then we are simply revealing the desired fragment and hiding the others within the container.",
                            "Please see LINK for more info.",
                            "I hope I get to help anyone.",
                            "Even if it this is an old question."
                        ]
                    },
                    {
                        "uid": 47813396,
                        "score": 0,
                        "text": [
                            "This worked for me"
                        ]
                    },
                    {
                        "uid": 48652324,
                        "score": 8,
                        "text": [
                            "Try this:"
                        ]
                    },
                    {
                        "uid": 56068957,
                        "score": 0,
                        "text": [
                            "the answers here are correct and i liked @Jyo the Whiff idea of a show and hide fragment implementation except the way he has it currently would hide the fragment on the first run so i added a slight change in that i added the isAdded check and show the fragment if its not already"
                        ]
                    },
                    {
                        "uid": 56721328,
                        "score": 2,
                        "text": [
                            "From my code, comparing to above solution, the simplest way is to define a layout which contains the fragment, then you could hide or unhide the fragment by controlling the layout attribute which is align with the general way of view.",
                            "No additional code needed in this case and the additional deployment attributes of the fragment could be moved to the outer layout."
                        ]
                    },
                    {
                        "uid": 60215928,
                        "score": 2,
                        "text": [
                            "In onCreate, after setContentView, i hid two fragments and committed them to the fragment manager, but i didn't hide the first fragment that will serve as home.",
                            "Ref: LINK"
                        ]
                    },
                    {
                        "uid": 61326913,
                        "score": 3,
                        "text": [
                            "I may be way way too late but it could help someone in the future.",
                            "This answer is a modification to mangu23 LINK I only added a for loop to avoid repetition and to easily add more fragments without boilerplate code.",
                            "We first need a list of the fragments that should be displayed",
                            "Then we need to fill it with our fragments",
                            "And we need a way to know which fragment were selected from the list, so we need getFragmentIndex function",
                            "And finally, the displayFragment method will like this:",
                            "In this way, we can call displayFragment -LRB- homeFragment -RRB- for example.",
                            "This will automatically show the HomeFragment and hide any other fragment in the list.",
                            "This solution allows you to append more fragments to the fragmentList without having to repeat the if statements in the old displayFragment version.",
                            "I hope someone will find this useful."
                        ]
                    }
                ],
                "tags": [
                    "android",
                    "android-fragments",
                    "show-hide"
                ]
            }
        ],
        "other": [
            {
                "link": "https://guides.codepath.com/android/creating-and-using-fragments",
                "type": "misc",
                "content": [
                    "A Fragment typically defines a part of a user interface.",
                    "Fragments must be embedded in activities ; they can not run independently of activities.",
                    "Understanding Fragments Here are the important things to understand about fragments:",
                    "A Fragment is a combination of an XML layout file and a java class much like an Activity.",
                    "Using the support library, fragments are supported back to all relevant Android versions.",
                    "Fragments encapsulate views and logic so that it is easier to reuse within activities.",
                    "Fragments are standalone components that can contain views, events and logic.",
                    "Within a fragment-oriented architecture, activities become navigational containers that are primarily responsible for navigation to other activities, presenting fragments and passing data.",
                    "Importance of Fragments There are many use cases for fragments but the most common use cases include:",
                    "Reusing View and Logic Components - Fragments enable re-use of parts of your screen including views and event logic over and over in different ways across many disparate activities.",
                    "For example, using the same list across different data sources within an app.",
                    "Tablet Support - Often within apps, the tablet version of an activity has a substantially different layout from the phone version which is different from the TV version.",
                    "Fragments enable device-specific activities to reuse shared elements while also having differences.",
                    "Screen Orientation - Often within apps, the portrait version of an activity has a substantially different layout from the landscape version.",
                    "Fragments enable both orientations to reuse shared elements while also having differences.",
                    "Organizing your Code Within a fragment-heavy app, we need to remember to organize our code according to architectural best practices.",
                    "Inside of an app which uses fragments extensively, we need to keep in mind that the role of an activity shifts.",
                    "Activities are navigation controllers primarily responsible for:",
                    "Navigation to other activities through intents.",
                    "Presenting navigational components such as the navigation drawer or the viewpager.",
                    "Hiding and showing relevant fragments using the fragment manager.",
                    "Receiving data from intents and passing data between fragments.",
                    "Fragments are content controllers and contain most views, layouts, and event logic including:",
                    "Layouts and views displaying relevant app content.",
                    "Event handling logic associated with relevant views.",
                    "View state management logic such as visibility or error handling.",
                    "Triggering of network request through a client object.",
                    "Retrieval and storage of data from persistence through model objects.",
                    "To reiterate, in a fragment-based architecture, the activities are for navigation and the fragments are for views and logic.",
                    "Usage Defining a Fragment A fragment, like an activity, has an XML layout file and a Java class that represents the Fragment controller.",
                    "The XML layout file is just like any other layout file, and can be named fragment_foo.xml.",
                    "Think of them as a partial ( re-usable ) activity:",
                    "The Java controller for a fragment looks like:",
                    "Embedding a Fragment in an Activity There are two ways to add a fragment to an activity: dynamically using Java and statically using XML.",
                    "Before embedding a `` support'' fragment in an Activity make sure the Activity is changed to extend from FragmentActivity or AppCompatActivity which adds support for the fragment manager to all Android versions.",
                    "Any activity using fragments should make sure to extend from FragmentActivity or AppCompatActivity:",
                    "Statically To add the fragment statically, simply embed the fragment in the activity's xml layout file:",
                    "You will likely need to change the path for FooFragment based on your project setup.",
                    "You can not replace a fragment defined statically in the layout file via a FragmentTransaction.",
                    "You can only replace fragments that you added dynamically.",
                    "Dynamically The second way is by adding the fragment dynamically in Java using the FragmentManager.",
                    "The FragmentManager class and the FragmentTransaction class allow you to add, remove and replace fragments in the layout of your activity at runtime.",
                    "In this case, you want to add a `` placeholder'' container ( usually a FrameLayout ) to your activity where the fragment is inserted at runtime:",
                    "and then you can use the FragmentManager to create a FragmentTransaction which allows us to add fragments to the FrameLayout at runtime:",
                    "If the fragment should always be within the activity, use XML to statically add the fragment but in more complex cases be sure to use the Java-based approach.",
                    "Fragment Lifecycle Fragment has many methods which can be overridden to plug into the lifecycle ( similar to an Activity ):",
                    "onAttach ( ) is called when a fragment is connected to an activity.",
                    "onCreate ( ) is called to do initial creation of the fragment.",
                    "onCreateView ( ) is called by Android once the Fragment should inflate a view.",
                    "onViewCreated ( ) is called after onCreateView ( ) and ensures that the fragment's root view is non-null.",
                    "Any view setup should happen here.",
                    "E.g., view lookups, attaching listeners.",
                    "onActivityCreated ( ) is called when host activity has completed its onCreate ( ) method.",
                    "onStart ( ) is called once the fragment is ready to be displayed on screen.",
                    "onResume ( ) - Allocate `` expensive'' resources such as registering for location, sensor updates, etc..",
                    "onPause ( ) - Release `` expensive'' resources.",
                    "onDestroyView ( ) is called when fragment's view is being destroyed, but the fragment is still kept around.",
                    "onDestroy ( ) is called when fragment is no longer in use.",
                    "onDetach ( ) is called when fragment is no longer connected to the activity.",
                    "The lifecycle execution order is mapped out below:",
                    "The most common ones to override are onCreateView which is in almost every fragment to setup the inflated view, onCreate for any data initialization and onActivityCreated used for setting up things that can only take place once the Activity has been fully created.",
                    "Here's an example of how you might use the various fragment lifecycle events:",
                    "Refer to this detailed lifecycle chart to view the lifecycle of a fragment more visually.",
                    "Looking Up a Fragment Instance Often we need to lookup or find a fragment instance within an activity layout file.",
                    "There are a few methods for looking up an existing fragment instance:",
                    "ID - Lookup a fragment by calling findFragmentById on the FragmentManager",
                    "Tag - Lookup a fragment by calling findFragmentByTag on the FragmentManager",
                    "Pager - Lookup a fragment by calling getRegisteredFragment on a PagerAdapter ( not part of the Android APIs but there is a custom implementation here https://stackoverflow.com/a/30594487 )",
                    "Each method is outlined in more detail below.",
                    "Finding Fragment By ID If the fragment was statically embedded in the XML within an activity and given an android: id such as fragmentDemo then we can lookup this fragment by id by calling findFragmentById on the FragmentManager:",
                    "Finding Fragment By Tag If the fragment was dynamically added at runtime within an activity then we can lookup this fragment by tag by calling findFragmentByTag on the FragmentManager:",
                    "Finding Fragment Within Pager If the fragment was dynamically added at runtime within an activity into a ViewPager using a FragmentPagerAdapter then we can lookup the fragment by upgrading to a SmartFragmentStatePagerAdapter as described in the ViewPager guide.",
                    "Now with the adapter in place, we can also easily access any fragments within the ViewPager using getRegisteredFragment:",
                    "Note that the ViewPager loads the fragment instances lazily similar to the a ListView recycling items as they appear on screen.",
                    "If you attempt to access a fragment that is not on screen, the lookup will return null.",
                    "Communicating with Fragments Fragments should generally only communicate with their direct parent activity.",
                    "Fragments communicate through their parent activity allowing the activity to manage the inputs and outputs of data from that fragment coordinating with other fragments or activities.",
                    "Think of the Activity as the controller managing all interaction with each of the fragments contained within.",
                    "A few exceptions to this are dialog fragments presented from within another fragment or nested child fragments.",
                    "Both of these cases are situations where a fragment has nested child fragments and that are therefore allowed to communicate upward to their parent ( which is a fragment ).",
                    "The important thing to keep in mind is that fragments should not directly communicate with each other and should generally only communicate with their parent activity.",
                    "Fragments should be modular, standalone and reusable components.",
                    "The fragments allow their parent activity to respond to intents and callbacks in most cases.",
                    "There are three ways a fragment and an activity can communicate:",
                    "Bundle - Activity can construct a fragment and set arguments",
                    "Methods - Activity can call methods on a fragment instance",
                    "Listener - Fragment can fire listener events on an activity via an interface",
                    "In other words, communication should generally follow these principles:",
                    "Activities can initialize fragments with data during construction",
                    "Activities can pass data to fragments using methods on the fragment instance",
                    "Fragments can communicate up to their parent activity using an interface and listeners",
                    "Fragments should pass data to other fragments only routed through their parent activity Fragments can pass data to and from dialog fragments as outlined here",
                    "Fragments can contain nested child fragments as outlined here",
                    "Fragment with Arguments In certain cases, your fragment may want to accept certain arguments.",
                    "A common pattern is to create a static newInstance method for creating a Fragment with arguments.",
                    "This is because a Fragment must have only a constructor with no arguments.",
                    "Instead, we want to use the setArguments method such as:",
                    "This sets certain arguments into the Fragment for later access within onCreate.",
                    "You can access the arguments later by using:",
                    "Now we can load a fragment dynamically in an Activity with:",
                    "This pattern makes passing arguments to fragments for initialization fairly straightforward.",
                    "Fragment Methods If an activity needs to make a fragment perform an action after initialization, the easiest way is by having the activity invoke a method on the fragment instance.",
                    "In the fragment, add a method:",
                    "and then in the activity, get access to the fragment using the fragment manager and call the method:",
                    "and then the activity can communicate directly with the fragment by invoking this method.",
                    "Fragment Listener If a fragment needs to communicate events to the activity, the fragment should define an interface as an inner type and require that the activity must implement this interface:",
                    "and then in the activity we have to implement the OnItemSelectedListener listener:",
                    "in order to keep the fragment as re-usable as possible.",
                    "For more details about this pattern, check out our detailed Creating Custom Listeners guide.",
                    "Understanding the FragmentManager The FragmentManager is responsible for all runtime management of fragments including adding, removing, hiding, showing, or otherwise navigating between fragments.",
                    "As shown above, the fragment manager is also responsible for finding fragments within an activity.",
                    "Important available methods are outlined below:",
                    "addOnBackStackChangedListener Add a new listener for changes to the fragment back stack.",
                    "beginTransaction ( ) Creates a new transaction to change fragments at runtime.",
                    "findFragmentById ( int id ) Finds a fragment by id usually inflated from activity XML layout.",
                    "findFragmentByTag ( String tag ) Finds a fragment by tag usually for a runtime added fragment.",
                    "popBackStack ( ) Remove a fragment from the backstack.",
                    "executePendingTransactions ( ) Forces committed transactions to be applied.",
                    "See the official documentation for more information.",
                    "You can also review the FragmentTransaction to take a closer look at what modifications can be made at run-time through the manager.",
                    "ActionBar Menu Items and Fragments One common case is the need for fragment-specific menu items that only show up for that fragment.",
                    "This can be done by adding an onCreateOptionsMenu method to the fragment directly.",
                    "This works just like the one for the activity:",
                    "You then also need to notify the fragment that it's menu items should be loaded within the fragment's onCreate method:",
                    "Clicks can be handled using onClick property as usual or more typically in this case, using the onOptionsItemSelected method in the fragment:",
                    "Note that the fragment's method is called only when the Activity didn't consume the event first.",
                    "Be sure to check out a more detailed guide about fragments and action bar if you have more questions.",
                    "Navigating Between Fragments There are several methods for navigating between different fragments within a single Activity.",
                    "TabLayout - Tabs at the top",
                    "Fragment Navigation Drawer - Slide out navigation menu",
                    "ViewPager - Swiping between fragments",
                    "Check the guides linked above for detailed steps for each of these approaches.",
                    "Managing Fragment Backstack A record of all Fragment transactions is kept for each Activity by the FragmentManager.",
                    "When used properly, this allows the user to hit the device's back button to remove previously added Fragments ( not unlike how the back button removes an Activity ).",
                    "Simply call addToBackstack on each FragmentTransaction that should be recorded:",
                    "Programmatically, you can also pop from the back stack at any time through the manager:",
                    "With this approach, we can easily keep the history of which fragments have appeared dynamically on screen and allow the user to easily navigate to previous fragments.",
                    "Fragment Hiding vs Replace In many of the examples above, we call transaction.replace ( ... ) to load a dynamic fragment which first removes the existing fragment from the activity invoking onStop and onDestroy for that fragment before adding the new fragment to the container.",
                    "This can be good because this will release memory and make the UI snappier.",
                    "However, in many cases, we may want to keep both fragments around in the container and simply toggle their visibility.",
                    "This allows all fragments to maintain their state because they are never removed from the container.",
                    "To do this, we might modify this code:",
                    "to this approach instead leveraging add, show, and hide in the FragmentTransaction:",
                    "Using this approach, all three fragments will remain in the container once added initially and then we are simply revealing the desired fragment and hiding the others within the container.",
                    "Check out this stackoverflow for a discussion on deciding when to replace vs hide and show.",
                    "Nesting Fragments within Fragments Inevitably in certain cases you will want to embed a fragment within another fragment.",
                    "Since Android 4.2, you have the ability to embed a fragment within another fragment.",
                    "This nested fragment is known as a child fragment.",
                    "A common situation where you might want to nest fragments is when you are using a sliding drawer for top-level navigation and one of the fragments needs to display tabs.",
                    "Note that one limitation is that nested ( or child ) fragments must be dynamically added at runtime to their parent fragment and can not be statically added using the <fragment> tag.",
                    "To nest a fragment in another fragment, first we need a <FrameLayout> or alternatively a ViewPager to contain the dynamic child fragment in the res/layout/fragment_parent.xml layout:",
                    "Notice that there's a FrameLayout with the id of @ + id/child _ fragment_container in which the child fragment will be inserted.",
                    "Inflation of the ParentFragment view is within the onCreateView method, just as was outlined in earlier sections.",
                    "In addition, we would also define a ChildFragment that would have its own distinct layout file:",
                    "Now we can add the child fragment to the parent at runtime using the getChildFragmentManager method:",
                    "Note that you must always use getChildFragmentManager when interacting with nested fragments instead of using getSupportFragmentManager.",
                    "Read this stackoverflow post for an explanation of the difference between the two.",
                    "In the child fragment, we can use getParentFragment ( ) to get the reference to the parent fragment, similar to a fragment's getActivity ( ) method that gives reference to the parent Activity.",
                    "See the docs for more information.",
                    "Managing Configuration Changes When you are working with fragment as with activities, you need to make sure to handle configuration changes such as screen rotation or the activity being closed.",
                    "Be sure to review the configuration changes guide for more details on how to save and restore fragment state.",
                    "Overview A fragment is a reusable class implementing a portion of an activity.",
                    ""
                ],
                "title": "Creating and Using Fragments | CodePath Android Cliffnotes"
            }
        ]
    },
    "parsed": true
}