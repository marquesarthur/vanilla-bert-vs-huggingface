{
    "task": "Sound panning should work for stereo files (and if not, add it to the docs)",
    "description": "#### Issue details\n\nPan doesn't work on Stereo files. If this can't be supported for some reason, it should at least be mentioned in the documentation of `Sound`.\n#### Reproduction steps/code\n\nCode taken from #2560:\n\n``` java\nimport com.badlogic.gdx.ApplicationAdapter;\nimport com.badlogic.gdx.Gdx;\nimport com.badlogic.gdx.Input;\nimport com.badlogic.gdx.InputAdapter;\nimport com.badlogic.gdx.audio.Sound;\n\npublic class LibGdxScratchpad extends ApplicationAdapter {\n\n    private Sound sound;\n\n    @Override\n    public void create() {\n\n        sound = Gdx.audio.newSound(Gdx.files.internal(\"test.wav\"));\n\n        Gdx.input.setInputProcessor(new InputAdapter() {\n            @Override\n            public boolean keyDown(int keyCode) {\n                if (keyCode == Input.Keys.LEFT) {\n                    sound.play(1.0f, 1.0f, -1.0f);\n                } else if (keyCode == Input.Keys.RIGHT) {\n                    sound.play(1.0f, 1.0f, 1.0f);\n                }\n                return true;\n            }\n        });\n    }\n}\n```\n#### Version of LibGDX and/or relevant dependencies\n\n1.9.4-SNAPSHOT\n#### Please select the affected platforms\n\nTested on Ubuntu 16.04 (Linux), likely all\n",
    "type": "GIT",
    "link": "https://github.com/libgdx/libgdx/issues/4256",
    "question_id": "4256",
    "resources": {
        "api": [
            {
                "link": "https://developer.android.com/guide/topics/media-apps/volume-and-earphones",
                "type": "android",
                "content": [
                    "Users expect to be able to control the volume of an audio app.",
                    "Standard behavior includes the ability to use the volume controls ( either buttons or knobs on the device or sliders in the UI ), and to avoid suddenly playing out loud if a peripheral like headphones is disconnected while in use.",
                    "When a user presses a volume key in a game or music app the volume should change, even if the player is paused between songs or there's no music for the current game location.",
                    "Android uses separate audio streams for playing music, alarms, notifications, the incoming call ringer, system sounds, in-call volume, and DTMF tones.",
                    "This allows users to control the volume of each stream independently.",
                    "By default, pressing the volume control modifies the volume of the active audio stream.",
                    "If your app isn't currently playing anything, hitting the volume keys adjusts the music volume ( or the ringer volume before Android 9 ).",
                    "Unless your app is an alarm clock, you should play audio with usage AudioAttributes.USAGE _ MEDIA.",
                    "To ensure that volume controls adjust the correct stream, you should call setVolumeControlStream ( ) passing in the stream type matching your attributes that you can retrieve from AudioAttributes.getVolumeControlStream.",
                    "Make this call in your app's lifecycle, typically from the onResume ( ) method of the activity or fragment that controls your media.",
                    "This connects the volume controls to STREAM_MUSIC whenever the target activity or fragment is visible.",
                    "In rare cases, you can set the volume of an audio stream programmatically.",
                    "For example, when your app replaces an existing UI.",
                    "This is not recommended because the Android AudioManager mixes all audio streams of the same type together.",
                    "These methods change the volume of every app that uses the stream.",
                    "Some devices ( like Chromebooks ) have volume controls but do not allow apps to use the AudioManager methods described above to change the level of an audio stream.",
                    "These are called fixed-volume devices.",
                    "You can discover if your app is running on a fixed-volume device by calling isVolumeFixed ( ).",
                    "An audio app should provide the ability to balance its output volume with other apps that might be playing on the same stream.",
                    "On fixed-volume devices, the app should connect its own volume controls to the appropriate setVolume ( ) method in the table below:",
                    "Users have a number of alternatives when it comes to enjoying the audio from their Android devices.",
                    "Most devices have a built-in speaker, headphone jacks for wired headsets, and many also feature Bluetooth connectivity and support for A2DP audio.",
                    "When a headset is unplugged or a Bluetooth device disconnected, the audio stream automatically reroutes to the built-in speaker.",
                    "If you listen to music at a high volume, this can be a noisy surprise.",
                    "Users usually expect apps that include a music player with onscreen playback controls to pause playback in this case.",
                    "Other apps, like games that don't include controls, should keep playing.",
                    "The user can adjust the volume with the device's hardware controls.",
                    "When audio output switches back to the built-in speaker the system broadcasts an ACTION_AUDIO_BECOMING_NOISY intent.",
                    "You should create a BroadcastReceiver that listens for this intent whenever you're playing audio.",
                    "Your receiver should look like this:",
                    "Register the receiver when you begin playback, and unregister it when you stop.",
                    "If you design your app as we describe in this guide, these calls should appear in the onPlay ( ) and onStop ( ) media session callbacks.",
                    "setStreamVolume ( ) setStreamVolume ( )",
                    ""
                ],
                "title": "Handling changes in audio output \u00a0|\u00a0 Android Developers"
            }
        ],
        "git": [],
        "qa": [],
        "other": [
            {
                "link": "https://github.com/philfrei/AudioCue",
                "type": "misc",
                "content": [
                    "Mobile \u2192 Actions \u2192 Codespaces \u2192 Packages \u2192 Security \u2192 Code review \u2192 Project management \u2192 Integrations \u2192",
                    "GitHub Sponsors \u2192 Customer stories \u2192",
                    "Topics \u2192 Collections \u2192 Trending \u2192 Learning Lab \u2192 Open source guides \u2192",
                    "The ReadME Project \u2192 Events \u2192 Community forum \u2192 GitHub Education \u2192 GitHub Stars program \u2192",
                    "Compare plans \u2192 Contact Sales \u2192",
                    "No suggested jump to results",
                    "A more powerful, intuitive, and concurrency safe Clip, for Java audio needs.",
                    "Use Git or checkout with SVN using the web URL.",
                    "Work fast with our official CLI.",
                    "Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again.",
                    "Launching Xcode If nothing happens, download Xcode and try again.",
                    "Launching Visual Studio If nothing happens, download the GitHub extension for Visual Studio and try again.",
                    "Failed to load latest commit information.",
                    "Type Name Latest commit message Commit time",
                    "Easy to Use Powerful BSD License ( open source, free ) Now includes AudioMixer for consolidating AudioCues into a single output line.",
                    "Comparison of Clip Alternatives Demo Jars ( including source code ): Installation via Gradle Manual Installation Usage Usage: real time controls Usage: output configuration Usage: Outputting via AudioMixer Usage: Additional examples and test files DONATE Contact Info",
                    "AudioCue AudioCue is a Java resource for playing sound files, designed for use with game programming.",
                    "Java's Clip class ( javax.audio.sampled.Clip ) was not designed with the special needs of game audio in mind.",
                    "The class has a tricky, non-intuitive syntax and a limited feature set.",
                    "A Clip can not be played concurrently with itself, can only be played at its recorded pitch, and the Control class provided for real time changes such as panning and volume is system-dependent and limited to only allowing changes at buffer increments.",
                    "Very light: Download or copy/paste five class files from GitHub directly into your project.",
                    "Syntax is simpler than Java's Clip class.",
                    "API and demonstration programs provided.",
                    "Runs directly on Java's SourceDataLine.",
                    "Supports playback of PCM ( signed, stereo floats ) and WAV ( 16-bit, 44100 fps, stereo, little-endian ) Allows concurrent playback of cues.",
                    "Allows playback at varying speeds.",
                    "Supports real-time volume, panning and frequency changes.",
                    "Includes messaging system for coordination with graphics.",
                    "BSD License ( open source, free )",
                    "Now includes AudioMixer for consolidating AudioCues into a single output line.",
                    "NOTE: AudioCue may not be the best choice for your project if one of the following limitations apply:",
                    "AudioCue only supports one output format: 16-bit, 44100 fps, stereo, little-endian ( aka CD Quality ).",
                    "Compressed audio formats are not currently supported.",
                    "As a work-around, if you are able to use another library to decompress your audio to PCM data as normalized stereo floats ( data range -1 to 1, left then right ), AudioCue will accept that array as input.",
                    "This is not a 3D audio system.",
                    "Major elements like delay-based panning, distance attenuation, Doppler effects, are not implemented.",
                    "Modules required java.desktop javafx.media java.desktop java.desktop",
                    "Output format multiple supported multiple supported only 44100 fps, 16-bit stereo little endian only 44100 fps, 16-bit stereo little endian",
                    "Looping Yes Yes Yes Yes, with settable loop point",
                    "Pausing, Repositioning Yes Yes Yes Yes",
                    "Concurrent Playback No Yes Yes Yes",
                    "Settable Volume Yes Yes Yes Yes",
                    "Dynamic Volume Per buffer, if MASTER_GAIN or VOLUME supported No Yes, per frame No",
                    "Settable Panning Yes Yes Yes Yes",
                    "Dynamic Panning Per buffer, if PAN supported No Yes, per frame No",
                    "Settable Frequency No Yes Yes No",
                    "Dynamic Frequency Per buffer, if SAMPLE_RATE supported No Yes, per frame No",
                    "mp3 Requires additional libraries Yes No No",
                    "ogg vorbis Requires additional libraries Yes No Yes, if Jorbis/Tritonus libraries on class path",
                    "wav Yes Yes Yes Yes",
                    "Demo Jars ( including source code ): SlidersDemo allows you three concurrent playbacks of a.",
                    "Sliders provided alter pitch, volume and panning in real time.",
                    "A playback using Java Clip is provided for comparison purposes.",
                    "FrogPondDemo creates a soundscape of many frogs from a single croak I recorded at nearby El Cerrito Creek.",
                    "BattleFieldDemo creates a soundscape of fighting in a war zone, from a wav of a single gunshot ( slight cheat: the machine gun uses an Audacity edit of the same gunshot that trims the decay a bit ).",
                    "Installation via Gradle Gradle ( Maven, Sbt, Leiningen )",
                    "Add in your root build.gradle at the end of repositories:",
                    "Manual Installation AudioCue requires five files:",
                    "In addition, there are two optional file folders with demo content and resources used by the demo programs:",
                    "Manual installation involves copying and pasting the five files into your project.",
                    "Method 1 ) navigate to, then copy and paste the five files directly into your program.",
                    "Method 2 ) download audiocue.jar, which includes source code, the `` supportpack'' and `` res'' content, and import into your IDE.",
                    "-LSB- NOTE: I'm not clear if the.",
                    "jar file, which I generated from Eclipse on 11/10/2017, can be imported into other IDEs.",
                    "jar file executes a program that demonstrates the real time capabilities. -RSB-",
                    "Usage: real time controls An important feature of AudioCode is the the ability to drill down to individual playing instances of a cue and alter properties in real time.",
                    "To drill down to a specific instance, we can use one of two methods to capture an int handle that will identify the instance.",
                    "The first is to capture the return value of the play method, as follows:",
                    "Another way is to directly poll a handle from the pool of available instances, as follows:",
                    "An instance that is obtained in the second manner must be directly started, stopped, and released ( returned to the pool of available instances ).",
                    "An important distinction between an instance handle gotten from a play ( ) method and the obtainInstance ( ) method is that the default value of a boolean field recycleWhenDone differs.",
                    "An instance arising from play ( ) has this value set to true, and an instance arising from obtainInstance ( ) has this value set to false.",
                    "When an instance finishes playing, if the boolean recycleWhenDone is true, the instance is automatically returned to the pool of available instances and no longer available for updating.",
                    "If the value is false, properties of the instance can continue to be updated, and the instance can be repositioned and restarted.",
                    "Properties that can be altered for an instance include the following:",
                    "Usage: output configuration Output configuration occurs with the AudioCue's open ( ) method.",
                    "The default configuration will use Java AudioSystem's ( javax.sound.sampled.AudioSystem ) default Mixer and SourceDataLine, a 1024 frame buffer, and the highest available thread priority.",
                    "( A high thread priority should not affect performance of the rest of an application, as the audio thread should spend the vast majority of its time in a blocked state. )",
                    "The buffer size can be set to optimize the balance between latency and dropouts.",
                    "For example, a longer cue, used to play many concurrent instances might require a larger buffer in order to minimize dropouts.",
                    "You can override the output line defaults via using an alternate form of the open ( ) method.",
                    "Each AudioCue can have its own optimized configuration, and will be output on its own SourceDataLine line, similar to the way that each Java Clip consumes an output line.",
                    "Usage: Outputting via AudioMixer Alternatively, the output of an AudioCue can be directed to an AudioMixer, which is part of this package.",
                    "All inputs to an AudioMixer are merged and sent out on a single SourceDataLine.",
                    "This can be especially helpful for systems that have a limited number of output lines.",
                    "The AudioMixer can also be configured for javax.sound.sampled.Mixer, buffer size ( the default is 8192 frames ), and thread priority.",
                    "Any AudioCue routed through an AudioMixer will automatically be use the AudioMixer's configuration properties.",
                    "AudioCues can be added or removed from the AudioMixer while the AudioMixer is playing.",
                    "Pending track additions and removals are handled at the start of each iteration of the buffer.",
                    "In the following example, we create and start an AudioMixer, add an AudioCue track, play the cue, then shut it all down.",
                    "Usage: Additional examples and test files Additional examples and test files can be found in the supportpack package.",
                    "The SlidersTest demonstrates real time controls, via GUI sliders.",
                    "The BattleField and FrogPond show techniques for building rich soundscapes from a minimum of resources, by taking advantage of the volume, pitch, and pan parameters to make a single cue provide the illusion of many individual entities.",
                    "The AudioCueListener, which broadcasts events such as starting, looping or stopping, is also demonstrated.",
                    "These demo programs can be downloaded and run via the following jar files:",
                    "SlidersTest.jar showing real-time controls, alongside a Clip for comparison FrogPond.jar built from a single frog.wav file Battlefield.jar built from two gunshot wavs",
                    "DONATE It would be great to hear ( by email or by donation ) if AudioCue has been helpful.",
                    "Positive feedback is very motivating, and much appreciated !",
                    "I'm happy to list links to games or game-makers using AudioCue.",
                    "Contact Info Programmer/Sound-Designer/Composer: Phil Freihofner URL: http://adonax.com Email: phil AT adonax.com Recommended forum: https://jvm-gaming.org/c/java-sound-amp-openal/12 If using StackOverflow for a question about this code, chances are highest that I will eventually see it if you include the tag `` javasound''.",
                    ""
                ],
                "title": "GitHub - philfrei/AudioCue: A more powerful, intuitive, and concurrency safe Clip, for Java audio needs."
            }
        ]
    },
    "parsed": true
}