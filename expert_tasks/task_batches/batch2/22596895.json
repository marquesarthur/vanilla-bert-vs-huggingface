{
    "task": "Android App Retrieve Data from Server but in a Secure way",
    "description": "Obviously I am no android or java expert.\nWhat I want to do in my Android app is, load data from a server.\nI already got working this part and sourcecode is attached.\nBut I want to do it in a way which is secure.\nAs a first step, instead of http://thisismyurl.com/a.php?action=get I want to do it with username/password like this: http://username:password@thisismyurl.com/a.php?action=get How would I do it ?\nShould I just add the username and password part to the url ?\nLets say I've accomplished that this will not be of any of use, because someone can just open the apk and decompile the sourcecode and get the url and the username/password.\nso is there a truly secure way of doing that ?\nI hope I am getting understood here.",
    "type": "SO",
    "link": "https://stackoverflow.com/questions/22596895",
    "question_id": "22596895",
    "resources": {
        "api": [
            {
                "link": "https://developer.android.com/training/sharing/receive",
                "type": "android",
                "content": [
                    "Just as an app can send data to other apps, it can also receive data from other apps as well.",
                    "Think about how users interact with your application and what data types you want to receive from other applications.",
                    "For example, a social networking application might be interested in receiving text content, like an interesting web URL, from another app.",
                    "Users will often send data to your app through the Android Sharesheet or the intent resolver.",
                    "All received data has a MIME type set by the providing app.",
                    "There are three ways your app can receive data sent by another app:",
                    "Sharing Shortcuts and ChooserTarget objects are Direct Share deep links into a specific Activity within your app.",
                    "They often represent a person, and the Android Sharesheet shows them.",
                    "For example, a messaging application can provide a Sharing Shortcut for a person that deep links directly into a conversation with that person.",
                    "Your app should be able to receive the widest possible range of MIME types.",
                    "For example, a messaging app used to send text, images and video should support receiving text / *, image / * and video / *.",
                    "Here are a few common MIME types when sending simple data in Android.",
                    "Please refer to the IANA official registry of MIME media types.",
                    "You can receive a MIME type of * / *, but this is highly discouraged unless you are fully capable of handling any type of incoming content.",
                    "When a user taps on a share target associated with a specific activity they should be able to confirm and edit the shared content before using it.",
                    "This is especially important for text data.",
                    "Tapping on any Direct Share target should take the user to an interface where an action can be directly performed on the target's subject.",
                    "Avoid showing users a disambiguation or placing them in an interface that is not related to the tapped target.",
                    "Specifically, do not take the user to a contact disambugation interface where they must confirm or reselect the contact to share with, since they've already done that by tapping the target in the Android Sharesheet.",
                    "For example, in a messaging app, tapping a Direct Share target should take the user to a conversation view with the person they selected.",
                    "The keyboard should be visible and the message should be prefilled with the shared data.",
                    "Intent filters inform the system what intents an application component is willing to accept.",
                    "Similar to how you constructed an intent with action ACTION_SEND in the Sending Simple Data to Other Apps lesson, you create intent filters in order to be able to receive intents with this action.",
                    "You define an intent filter in your manifest, using the <intent-filter> element.",
                    "For example, if your application handles receiving text content, a single image of any type, or multiple images of any type, your manifest would look like:",
                    "When another application tries to share any of these things by constructing an intent and passing it to startActivity ( ), your application will be listed as an option in the Android Sharesheet or intent resolver.",
                    "If the user selects your application, the corresponding activity (.",
                    "ui.MyActivity in the example above ) will be started.",
                    "It is then up to you to handle the content appropriately within your code and UI.",
                    "Note: For more information on intent filters and intent resolution please read Intents and Intent Filters",
                    "To handle the content delivered by an Intent, call getIntent ( ) to get the Intent object.",
                    "Once you have the object, you can examine its contents to determine what to do next.",
                    "Keep in mind that if this activity can be started from other parts of the system, such as the launcher, then you will need to take this into consideration when examining the intent.",
                    "Take extra care to check the incoming data, you never know what some other application may send you.",
                    "For example, the wrong MIME type might be set, or the image being sent might be extremely large.",
                    "Also, remember to process binary data in a separate thread rather than the main ( `` UI'' ) thread.",
                    "Updating the UI after receiving the data can be as simple as populating an EditText, or it can be more complicated like applying an interesting photo filter to an image.",
                    "It's up to your app what happens next.",
                    "Your app is represented by its icon and label in the Android Sharesheet and intent resolver.",
                    "These are both defined in the manifest.",
                    "You can set activity or intent filter labels to provide more context.",
                    "As of Android 10 ( API level 29 ), the Android Sharesheet will only use icons set in the manifest on your application tag.",
                    "Icons set on intent-filter and activity tags will be ignored.",
                    "Note: The best share targets do not need a label and icon in the associated activity or intent filter.",
                    "The receiving app's name and icon alone should be enough for users to understand what will happen when sharing.",
                    "Direct Share was introducted in Android 6.0 ( API level 23 ) allowing apps to provide ChooserTarget objects through a ChooserTargetService.",
                    "Results were retrieved reactively on demand, leading to a slow loading time for targets.",
                    "In Android 10 ( API level 29 ), the ChooserTargetService Direct Share APIs were replaced with the new Sharing Shortcuts API.",
                    "Instead of retrieving results reactively on demand, the Sharing Shortcuts API lets apps publish direct share targets in advance.",
                    "The ChooserTargetService Direct Share mechanism will continue to work, but targets provided this way will be ranked lower than any target that uses the Sharing Shortcuts API.",
                    "In Android 11 ( API level 30 ), the ChooserTargetService service has been deprecated and we strongly encourage developers to migrate to the Sharing Shortcuts API.",
                    "ShortcutManagerCompat is an AndroidX API that provides Sharing Shortcuts that is backwards compatible with the old ChooserTargetService DirectShare API.",
                    "This is the preferred way to publish both Sharing Shortcuts and ChooserTargets.",
                    "You can only use dynamic shortcuts to publish Direct Share targets.",
                    "Follow these steps to publish direct share targets using the new API:",
                    "ShortcutInfo.Builder includes new and enhanced methods that provide additional info about the share target:",
                    "Specifies whether or not a shortcut is valid when it has been unpublished or made invisible by the app ( as a dynamic or pinned shortcut ).",
                    "If a shortcut is long lived, it can be cached by various system services even after if has been unpublished as a dynamic shortcut.",
                    "Making a shortcut long lived can improve its ranking.",
                    "See Get the best ranking for details.",
                    "Associates one or more Person objects with the shortcut.",
                    "This can be used to better understand user behavior across different apps, and to help potential prediction services in the framework provide better suggestions in a ShareSheet.",
                    "Adding Person info to a shortcut is optional, but strongly recommended if the share target can be associated with a person.",
                    "Note that some share targets, such as cloud, can not be associated with a person.",
                    "Including a specific Person object with a unique key in a sharing target and related notifications can improve its ranking.",
                    "For a typical messaging app, a separate shortcut should be published for each contact, and the Person field should contain the contact's info.",
                    "If the target can be associated with multiple people ( like a group chat ), add multiple Person objects to a single share target.",
                    "When publishing a shortcut to an individual person please include their full name in setLongLabel ( ) and any short name, such as a nickname or a first name, in setShortLabel ( )",
                    "For an example of publishing Sharing Shortcuts see the Sharing Shortcuts sample code.",
                    "The Android Sharesheet shows a fixed number of Direct Share targets.",
                    "These suggestions are sorted by rank.",
                    "You can potentially improve the ranking of your shortcuts by doing the following:",
                    "For a further increase in ranking, we strongly recommend social apps to do all of the above and:",
                    "For the maximum increase in ranking, social apps can do all of the above and:",
                    "Here is an example shortcut with all potential ranking improvements.",
                    "To make a Sharing Shortcut, you'll need to add an image via setIcon ( ).",
                    "Sharing Shortcuts can appear across system surfaces and might be reshaped.",
                    "Additionally, some devices running Android versions 7, 8, or 9 ( API levels 25, 26, 27, and 28 ) might display bitmap\u2011only icons without a background, which dramatically decreases contrast.",
                    "To ensure your shortcut looks as intended, provide an adaptive bitmap by using IconCompat.createWithAdaptiveBitmap ( ).",
                    "Adaptive bitmaps should follow the same guidelines and dimensions set for adaptive icons.",
                    "The most common way to accomplish this is to scale the intended square bitmap to 72x72dp and center that within a 108x108dp transparent canvas.",
                    "If your icon includes a transparent regions you need to include a background color, otherwise transparent regions will appear black.",
                    "Do not provide imagery masked to a specific shape.",
                    "For example, prior to Android 10 ( API level 29 ), it was common to provide user avatars for Direct Share ChooserTargets that were masked to a circle.",
                    "The Android Sharesheet and other system surfaces in Android 10 now shape and theme shortcut imagery.",
                    "The preferred method to provide Sharing Shortcuts, via ShortcutManagerCompat, will automatically shape backcompat Direct Share ChooserTargets to circles for you.",
                    "Share targets must be declared in the app's resource file, similar to static shortcuts definitions.",
                    "Add share target definitions inside the <shortcuts> root element in the resource file, along with other static shortcut definitions.",
                    "Each <share-targets> element contains information about the shared data type, matching categories, and the target class that will handle the share intent.",
                    "The XML code looks something like this:",
                    "The data element in a share target is similar to the data specification in an intent filter.",
                    "Each share target can have multiple categories, which are only used to match an app's published shortcuts with its share target definitions.",
                    "Categories can have any arbitrary app-defined values.",
                    "In case the user selects the Sharing Shortcut in the Android Sharesheet that matches with the example target-share above, the app will get the following share intent:",
                    "If the user opens the share target from the launcher shortcuts, the app will get the intent that was created when adding the sharing shortcut to the ShortcutManagerCompat.",
                    "Since it's a different intent, Intent.EXTRA _ SHORTCUT_ID won't be available, and you will have to pass the ID manually if you need it.",
                    "To be able to work with the AndroidX compatibility library, the app's manifest must contain the meta-data chooser-target-service and intent-filters set.",
                    "See the current ChooserTargetService Direct Share API.",
                    "This service is already declared in the compatibility library, so the user does not need to declare the service in the app's manifest.",
                    "However, the link from the share activity to the service must be taken into account as a chooser target provider.",
                    "In the following example, the implementation of ChooserTargetService is androidx.core.content.pm.ChooserTargetServiceCompat, which is already defined in AndroidX:",
                    "What are the main differences between the current Sharing Shortcuts API and the old ChooserTargetService Direct Share API ?",
                    "The Sharing Shortcuts API uses a push model, versus the pull model used in the old Direct Share API.",
                    "This makes the process of retrieving direct share targets much faster when preparing the ShareSheet.",
                    "From the app developer's point of view, when using the new API, the app needs to provide the list of direct share targets ahead of time, and potentially update the list of shortcuts every time the internal state of the app changes ( for example, if a new contact is added in a messaging app ).",
                    "What happens if I don't migrate to use the Sharing Shortcuts APIs ?",
                    "On Android 10 ( API level 29 ) and higher, the Android Sharesheet will put higher priority on share targets which are provided via ShortcutManager using the Sharing Shortcuts API.",
                    "So your published share targets may get buried under other apps' share targets and potentially never appear when sharing.",
                    "Can I use both ChooserTargetService and Sharing Shortcuts DirectShare APIs in my app for backwards compatibility ?",
                    "Instead, use the provided support library APIs ShortcutManagerCompat.",
                    "Mixing the two sets of APIs may result in unwanted/unexpected behavior when retrieving the share targets.",
                    "How are published shortcuts for share targets different from launcher shortcuts ( the typical usage of shortcuts when long pressing on app icons in launcher ) ?",
                    "Any shortcuts published for a `` share target'' purpose, is also a launcher shortcut, and will be shown in the menu when long pressing your app's icon.",
                    "The maximum shortcut count limit per activity also applies to the total number of shortcuts an app is publishing ( share targets and legacy launcher shortcuts combined ).",
                    "What is the guidance on the number of sharing shortcuts one should publish.",
                    "An Activity with a matching intent-filter tag in the manifest",
                    "One or more ChooserTarget objects returned by your ChooserTargetService",
                    "Sharing Shortcuts published by your app.",
                    "Sharing Shortcuts are only available if your app is running Android 10 ( API level 29 ).",
                    "text / *, senders will often send text/plain, text/rtf, text/html, text/json",
                    "image / *, senders will often send image/jpg, image/png, image/gif",
                    "video / *, senders will often send video/mp4, video/3gp",
                    "receivers should register for supported file extensions, senders will often send application/pdf",
                    "Declare share-target elements in an app's XML resource file.",
                    "For details, see Declare a share target below.",
                    "Publish dynamic shortcuts with matching categories to the declared share-targets.",
                    "Shortcuts can be added, accessed, updated, and removed using the ShortcutManager or ShortcutManagerCompat in AndroidX.",
                    "Using the compatibility library in AndroidX is the preferred method since it provides backwards compatibility on older Android versions.",
                    "Ensure all shortcutIds are unique and never reused for different targets.",
                    "Ensure the shortcut is long-lived by calling setLongLived ( true ).",
                    "Provide a rank that can be used to compare shortcuts from your app in the absence of training data.",
                    "A lower rank means the shortcut is more important.",
                    "Supply relevant Person objects with a set key in your shortcut, see setPerson ( ), setPersons ( ) and setKey ( )",
                    "Link your shortcut to relevant notifications from the same person or people, see setShortcutId ( ).",
                    "The shortcutId may be for any shortcut previously published with setLongLived ( true ).",
                    "In provided Person objects, supply a valid URI to an associated contact on the device, see setUri ( )",
                    ""
                ],
                "title": "Receiving simple data from other apps \u00a0|\u00a0 Android Developers"
            },
            {
                "link": "https://developer.android.com/training/articles/security-ssl",
                "type": "android",
                "content": [
                    "The Secure Sockets Layer ( SSL ) -- now technically known as Transport Layer Security ( TLS ) -- is a common building block for encrypted communications between clients and servers.",
                    "It's possible that an application might use SSL incorrectly such that malicious entities may be able to intercept an app's data over the network.",
                    "To help you ensure that this does not happen to your app, this article highlights the common pitfalls when using secure network protocols and addresses some larger concerns about using Public-Key Infrastructure ( PKI ).",
                    "You should also read Android Security Overview as well as Permissions Overview.",
                    "In a typical SSL usage scenario, a server is configured with a certificate containing a public key as well as a matching private key.",
                    "As part of the handshake between an SSL client and server, the server proves it has the private key by signing its certificate with public-key cryptography.",
                    "However, anyone can generate their own certificate and private key, so a simple handshake doesn't prove anything about the server other than that the server knows the private key that matches the public key of the certificate.",
                    "One way to solve this problem is to have the client have a set of one or more certificates it trusts.",
                    "If the certificate is not in the set, the server is not to be trusted.",
                    "There are several downsides to this simple approach.",
                    "Servers should be able to upgrade to stronger keys over time ( `` key rotation'' ), which replaces the public key in the certificate with a new one.",
                    "Unfortunately, now the client app has to be updated due to what is essentially a server configuration change.",
                    "This is especially problematic if the server is not under the app developer's control, for example if it is a third party web service.",
                    "This approach also has issues if the app has to talk to arbitrary servers such as a web browser or email app.",
                    "In order to address these downsides, servers are typically configured with certificates from well known issuers called Certificate Authorities ( CAs ).",
                    "The host platform generally contains a list of well known CAs that it trusts.",
                    "As of Android 4.2 ( Jelly Bean ), Android currently contains over 100 CAs that are updated in each release.",
                    "Similar to a server, a CA has a certificate and a private key.",
                    "When issuing a certificate for a server, the CA signs the server certificate using its private key.",
                    "The client can then verify that the server has a certificate issued by a CA known to the platform.",
                    "However, while solving some problems, using CAs introduces another.",
                    "Because the CA issues certificates for many servers, you still need some way to make sure you are talking to the server you want.",
                    "To address this, the certificate issued by the CA identifies the server either with a specific name such as gmail.com or a wildcarded set of hosts such as *.google.com.",
                    "The following example will make these concepts a little more concrete.",
                    "In the snippet below from a command line, the openssl tool's s_client command looks at Wikipedia's server certificate information.",
                    "It specifies port 443 because that is the default for HTTPS.",
                    "The command sends the output of openssl s_client to openssl x509, which formats information about certificates according to the X. 509 standard.",
                    "Specifically, the command asks for the subject, which contains the server name information, and the issuer, which identifies the CA.",
                    "You can see that the certificate was issued for servers matching *.wikipedia.org by the RapidSSL CA.",
                    "Assuming you have a web server with a certificate issued by a well known CA, you can make a secure request with code as simple this:",
                    "Yes, it really can be that simple.",
                    "If you want to tailor the HTTP request, you can cast to an HttpURLConnection.",
                    "The Android documentation for HttpURLConnection has further examples about how to deal with request and response headers, posting content, managing cookies, using proxies, caching responses, and so on.",
                    "But in terms of the details for verifying certificates and hostnames, the Android framework takes care of it for you through these APIs.",
                    "This is where you want to be if at all possible.",
                    "That said, below are some other considerations.",
                    "Suppose instead of receiving the content from getInputStream ( ), it throws an exception:",
                    "This can happen for several reasons, including:",
                    "The following sections discuss how to address these problems while keeping your connection to the server secure.",
                    "In this case, the SSLHandshakeException occurs because you have a CA that isn't trusted by the system.",
                    "It could be because you have a certificate from a new CA that isn't yet trusted by Android or your app is running on an older version without the CA.",
                    "More often a CA is unknown because it isn't a public CA, but a private one issued by an organization such as a government, corporation, or education institution for their own use.",
                    "Fortunately, you can teach HttpsURLConnection to trust a specific set of CAs.",
                    "The procedure can be a little convoluted, so below is an example that takes a specific CA from an InputStream, uses it to create a KeyStore, which is then used to create and initialize a TrustManager.",
                    "A TrustManager is what the system uses to validate certificates from the server and -- by creating one from a KeyStore with one or more CAs -- those will be the only CAs trusted by that TrustManager.",
                    "Given the new TrustManager, the example initializes a new SSLContext which provides an SSLSocketFactory you can use to override the default SSLSocketFactory from HttpsURLConnection.",
                    "This way the connection will use your CAs for certificate validation.",
                    "Here is the example in full using an organizational CA from the University of Washington:",
                    "With a custom TrustManager that knows about your CAs, the system is able to validate that your server certificate come from a trusted issuer.",
                    "Caution: Many web sites describe a poor alternative solution which is to install a TrustManager that does nothing.",
                    "If you do this you might as well not be encrypting your communication, because anyone can attack your users at a public Wi-Fi hotspot by using DNS tricks to send your users' traffic through a proxy of their own that pretends to be your server.",
                    "The attacker can then record passwords and other personal data.",
                    "This works because the attacker can generate a certificate and -- without a TrustManager that actually validates that the certificate comes from a trusted source -- your app could be talking to anyone.",
                    "So don't do this, not even temporarily.",
                    "You can always make your app trust the issuer of the server's certificate, so just do it.",
                    "The second case of SSLHandshakeException is due to a self-signed certificate, which means the server is behaving as its own CA.",
                    "This is similar to an unknown certificate authority, so you can use the same approach from the previous section.",
                    "You can create your own TrustManager, this time trusting the server certificate directly.",
                    "This has all of the downsides discussed earlier of tying your app directly to a certificate, but can be done securely.",
                    "However, you should be careful to make sure your self-signed certificate has a reasonably strong key.",
                    "As of 2012, a 2048-bit RSA signature with an exponent of 65537 expiring yearly is acceptable.",
                    "When rotating keys, you should check for recommendations from an authority ( such as NIST ) about what is acceptable.",
                    "The third case of SSLHandshakeException occurs due to a missing intermediate CA.",
                    "Most public CAs don't sign server certificates directly.",
                    "Instead, they use their main CA certificate, referred to as the root CA, to sign intermediate CAs.",
                    "They do this so the root CA can be stored offline to reduce risk of compromise.",
                    "However, operating systems like Android typically trust only root CAs directly, which leaves a short gap of trust between the server certificate -- signed by the intermediate CA -- and the certificate verifier, which knows the root CA.",
                    "To solve this, the server doesn't send the client only it's certificate during the SSL handshake, but a chain of certificates from the server CA through any intermediates necessary to reach a trusted root CA.",
                    "To see what this looks like in practice, here's the mail.google.com certificate chain as viewed by the openssl s_client command:",
                    "This shows that the server sends a certificate for mail.google.com issued by the Thawte SGC CA, which is an intermediate CA, and a second certificate for the Thawte SGC CA issued by a Verisign CA, which is the primary CA that's trusted by Android.",
                    "However, it is not uncommon to configure a server to not include the necessary intermediate CA.",
                    "For example, here is a server that can cause an error in Android browsers and exceptions in Android apps:",
                    "What is interesting to note here is that visiting this server in most desktop browsers does not cause an error like a completely unknown CA or self-signed server certificate would cause.",
                    "This is because most desktop browsers cache trusted intermediate CAs over time.",
                    "Once a browser has visited and learned about an intermediate CA from one site, it won't need to have the intermediate CA included in the certificate chain the next time.",
                    "Some sites do this intentionally for secondary web servers used to serve resources.",
                    "For example, they might have their main HTML page served by a server with a full certificate chain, but have servers for resources such as images, CSS, or JavaScript not include the CA, presumably to save bandwidth.",
                    "Unfortunately, sometimes these servers might be providing a web service you are trying to call from your Android app, which is not as forgiving.",
                    "There are two approaches to solve this issue:",
                    "As mentioned at the beginning of this article, there are two key parts to verifying an SSL connection.",
                    "The first is to verify the certificate is from a trusted source, which was the focus of the previous section.",
                    "The focus of this section is the second part: making sure the server you are talking to presents the right certificate.",
                    "When it doesn't, you'll typically see an error like this:",
                    "One reason this can happen is due to a server configuration error.",
                    "The server is configured with a certificate that does not have a subject or subject alternative name fields that match the server you are trying to reach.",
                    "It is possible to have one certificate be used with many different servers.",
                    "For example, looking at the google.com certificate with openssl s_client - connect google.com: 443 | openssl x509 - text you can see that a subject that supports *.google.com but also subject alternative names for *.youtube.com, *.android.com, and others.",
                    "The error occurs only when the server name you are connecting to isn't listed by the certificate as acceptable.",
                    "Unfortunately this can happen for another reason as well: virtual hosting.",
                    "When sharing a server for more than one hostname with HTTP, the web server can tell from the HTTP/1 .1 request which target hostname the client is looking for.",
                    "Unfortunately this is complicated with HTTPS, because the server has to know which certificate to return before it sees the HTTP request.",
                    "To address this problem, newer versions of SSL, specifically TLSv .1.0 and later, support Server Name Indication ( SNI ), which allows the SSL client to specify the intended hostname to the server so the proper certificate can be returned.",
                    "Fortunately, HttpsURLConnection supports SNI since Android 2.3.",
                    "One workaround if you need to support Android 2.2 ( and older ) is to set up an alternative virtual host on a unique port so that it's unambiguous which server certificate to return.",
                    "The more drastic alternative is to replace HostnameVerifier with one that uses not the hostname of your virtual host, but the one returned by the server by default.",
                    "Caution: Replacing HostnameVerifier can be very dangerous if the other virtual host is not under your control, because an on-path attacker could direct traffic to another server without your knowledge.",
                    "If you are still sure you want to override hostname verification, here is an example that replaces the verifier for a single URLConnection with one that still verifies that the hostname is at least on expected by the app:",
                    "But remember, if you find yourself replacing hostname verification, especially due to virtual hosting, it's still very dangerous if the other virtual host is not under your control and you should find an alternative hosting arrangement that avoids this issue.",
                    "So far, the examples have focused on HTTPS using HttpsURLConnection.",
                    "Sometimes apps need to use SSL separate from HTTP.",
                    "For example, an email app might use SSL variants of SMTP, POP3, or IMAP.",
                    "In those cases, the app would want to use SSLSocket directly, much the same way that HttpsURLConnection does internally.",
                    "The techniques described so far to deal with certificate verification issues also apply to SSLSocket.",
                    "In fact, when using a custom TrustManager, what is passed to HttpsURLConnection is an SSLSocketFactory.",
                    "So if you need to use a custom TrustManager with an SSLSocket, follow the same steps and use that SSLSocketFactory to create your SSLSocket.",
                    "Caution: SSLSocket does not perform hostname verification.",
                    "It is up to your app to do its own hostname verification, preferably by calling getDefaultHostnameVerifier ( ) with the expected hostname.",
                    "Further beware that HostnameVerifier.verify ( ) doesn't throw an exception on error but instead returns a boolean result that you must explicitly check.",
                    "Here is an example showing how you can do this.",
                    "It shows that when connecting to gmail.com port 443 without SNI support, you'll receive a certificate for mail.google.com.",
                    "This is expected in this case, so check to make sure that the certificate is indeed for mail.google.com:",
                    "SSL relies heavily on CAs to issue certificates to only the properly verified owners of servers and domains.",
                    "In rare cases, CAs are either tricked or, in the case of Comodo or DigiNotar, breached, resulting in the certificates for a hostname to be issued to someone other than the owner of the server or domain.",
                    "In order to mitigate this risk, Android has the ability to add certain certificates or even whole CAs to a denylist.",
                    "While this list was historically built into the operating system, starting in Android 4.2 this list can be remotely updated to deal with future compromises.",
                    "An app can further protect itself from fraudulently issued certificates by a technique known as pinning.",
                    "This is basically using the example provided in the unknown CA case above to restrict an app's trusted CAs to a small set known to be used by the app's servers.",
                    "This prevents the compromise of one of the other 100 + CAs in the system from resulting in a breach of the apps secure channel.",
                    "This article has focused on the user of SSL to secure communications with servers.",
                    "SSL also supports the notion of client certificates that allow the server to validate the identity of a client.",
                    "While beyond the scope of this article, the techniques involved are similar to specifying a custom TrustManager.",
                    "Nogotofail is a tool gives you an easy way to confirm that your apps are safe against known TLS/SSL vulnerabilities and misconfigurations.",
                    "It's an automated, powerful, and scalable tool for testing network security issues on any device whose network traffic could be made to go through it.",
                    "Nogotofail is useful for three main use cases:",
                    "Nogotofail works for Android, iOS, Linux, Windows, Chrome OS, OSX, in fact any device you use to connect to the Internet.",
                    "There's an easy-to-use client to configure the settings and get notifications on Android and Linux, as well as the attack engine itself which can be deployed as a router, VPN server, or proxy.",
                    "You can access the tool at the Nogotofail open source project.",
                    "The CA that issued the server certificate was unknown",
                    "The server certificate wasn't signed by a CA, but was self signed",
                    "The server configuration is missing an intermediate CA",
                    "Configure the server to include the intermediate CA in the server chain.",
                    "Most CAs provide documentation on how to do this for all common web servers.",
                    "This is the only approach if you need the site to work with default Android browsers at least through Android 4.2.",
                    "Or, treat the intermediate CA like any other unknown CA, and create a TrustManager to trust it directly, as done in the previous two sections.",
                    "Verifying fixes and watching for regressions.",
                    "Understanding what applications and devices are generating what traffic.",
                    ""
                ],
                "title": "Security with HTTPS and SSL \u00a0|\u00a0 Android Developers"
            }
        ],
        "git": [
            {
                "link": "https://github.com/facebook/react-native/issues/12903",
                "content": [
                    "fetch is not working for https in android platform \u00b7 Issue # 12903 \u00b7 facebook/react-native \u00b7 GitHub",
                    "fetch is not working for https in android platform",
                    "I've create a self-signed http & self-sign certificate https server in one app by using express.js",
                    "Fetch is working fine when I send the request to http port.",
                    "But it is fail when I send the same request to https port.",
                    "I understand it might be due to self-sign certificate, but is there any way to ignore error due to self-sign certificate in android ?",
                    "/ / the rest of the code is the same.",
                    "Dev tools: Android SDK 23",
                    "The text was updated successfully, but these errors were encountered:",
                    "I'm facing the same problem.",
                    "Is there a solution to this ?",
                    "Also I'm facing this problem",
                    "I have the same issue on iOS.",
                    "I can't allow self-signed certificates for some reason.",
                    "This will not break the source code of React Native, also verify you certificates as you want.",
                    "facing the same problem, need help !",
                    "This issue has been automatically marked as stale because it has not had recent activity.",
                    "It will be closed if no further activity occurs.",
                    "Maybe the issue has been fixed in a recent release, or perhaps it is not affecting a lot of people.",
                    "If you think this issue should definitely remain open, please let us know why.",
                    "Thank you for your contributions.",
                    "Also I'm facing this problem.",
                    "please help me to solve this issue",
                    "Before -LSB- 1 -RSB- this was possible by customizing the okhttp client on android.",
                    "It's a need this fetch API allow self-signed requests.",
                    "As a workaround, I'm using this package react-native-fetch-blob to make self-signed requests.",
                    "Still facing this issue in latest RN Version ==",
                    "Same issue here, Generating a debug APK or using react-native run-android I able to fetch the HTTPS URL, but unfortunately with release APK it always timeout ( trying to get some logcat logs to help with this issue ), I think it as something relates to SSL Exception by Android platform.",
                    "Hi, I have this problem",
                    "only in one specify WI-FI connection, but in the same network with my computer I am able to access the HTPPS URl and having GET, POST, all working via browser/postman.",
                    "I don't know what can be.",
                    "In my case, it was a backend problem with certificates that cause Android not getting any responses.",
                    "I have same problem with android sdk < 21",
                    "My API endpoints is under cloudflare and all requests failed with network request failed error message when i send any request to https://myCloudflireDomain",
                    "Same request works as expected on iOS and Android sdk > 21.",
                    "This should be considered as bug in this fetch in reason of my API endpoint can be opened in default android browser on device with android 4.4.2 for example.",
                    "Here is what i can observe so far:",
                    "But !",
                    "Both domains will work in default browser.",
                    "Why it is possible to open https://myCloudflireDomain in android browser, but fetch rase an exception ?",
                    "PS: SSL cert is definitely valid",
                    "https://github.com/MadGeorge Are you able to solve this issue.",
                    "I face the same problem as you.",
                    "Does anyone have solution for this problem.",
                    "Please help me, thank you !",
                    "A work around that I use for this issue, is to use react-native-fetch-blob.",
                    "Because there's an option in RNFetchBlob to ignore security.certification.",
                    "We have to set trusty in the config part.",
                    "Below is the complete sample:",
                    "But above code will also give this error:",
                    "java.security.cert.CertPathValidatorException: Trust anchor for certification path not found.",
                    "The 2nd work around as per link:",
                    "I turned off Cloudflare option to force domain to https this is only solution I found.",
                    "I am facing some problem.",
                    "My https API was working.",
                    "but after implementing a self signed certificate for https at the server, https APIs are failing withNetwork request failed.",
                    "After switching to 0.57 + the problem is gone",
                    "I am facing the same issue.",
                    "my https server working fine with postman using a self-signed certificate.",
                    "But unable to get any response from the server when using the react-native android app.",
                    "I added the following code to the onCreate method of MainActivity and everything worked as it should.",
                    "Sometimes I get broken JSON in the response anyway, so I added the rn-fetch-blob library with isTrusted: true option to the solution",
                    "Dobrynia, Thanks for the suggestion, while I am trying this code, I am getting compilation errors, do I have to install any package for google libraries in react native, please suggest",
                    "C: UsersHemuDownloadsPrototype-masterPrototype-masterewClientandroidappsrcmainjavacomewclientMainActivity.",
                    "java: 9: error: package com.google.android.gms.common does not exist",
                    "java: 10: error: package com.google.android.gms.common does not exist",
                    "java: 11: error: package com.google.android.gms.security does not exist",
                    "protected void onCreate ( @nullable Bundle savedInstanceState ) -LCB-",
                    "-RCB- catch ( GooglePlayServicesRepairableException e ) -LCB-",
                    "-RCB- catch ( GooglePlayServicesNotAvailableException e ) -LCB-",
                    "FAILURE: Build failed with an exception.",
                    "Execution failed for task': app: compileDebugJavaWithJavac'.",
                    "Compilation failed ; see the compiler error output for details.",
                    "Run with -- stacktrace option to get the stack trace.",
                    "Run with -- info or -- debug option to get more log output.",
                    "Run with -- scan to get full insights.",
                    "Get more help at https://help.gradle.org",
                    "Could not install the app on the device, read the error above for details.",
                    "Make sure you have an Android emulator running or a device connected and have",
                    "set up your Android development environment:",
                    "same error, I use Cloudflare, my version of RN is 0.57.7 \ud83d\ude22",
                    "@dobrynia don't compile, any fix ?",
                    "@HEMANT8712 and @lahed, is there the",
                    "implementation ` com.google.android.gms: play-services-base: 16.0.1' line in your android/app/build.",
                    "gradle file, section dependencies ?",
                    "@dobrynia don't work for me.",
                    "My solution: I configure Cloudflare to use http and https on my api, and everything",
                    "When android version is < 20 I used http else https",
                    "RN Issue Triage Group 1",
                    "Hello there \ud83d\udc4b this issue has been reported for an old version of React Native.",
                    "Ideally we'd like everyone to be using 0.59 ( see the awesome changes it brought ) but we know updating can be a pain.",
                    "During 0.59 update, some changes were made to the android JSC, so it might have fixed this.",
                    "But please, if it's actually still an issue with 0.59 please comment below and we can reopen it.",
                    "Even better, please send us a pull request with a fix \ud83d\ude0a",
                    "Still an issue on react 0.59 for me.",
                    "My configuration is almost same as",
                    "I have Cloudflare configured to force my domain to https.",
                    "This works fine on Androids above 5.0 and iOS too, but fails on older Android devices.",
                    "I'm facing the same issue",
                    "I am facing same issue",
                    "same issue RN version 0.61.4",
                    "2020 and the same problem with axios: (",
                    "I solved my problem with axios by passing data anyway.",
                    "locked as resolved and limited conversation to collaborators",
                    "to subscribe to this conversation on GitHub.",
                    ""
                ],
                "title": "fetch is not working for https in android platform \u00b7 Issue # 12903 \u00b7 facebook/react-native \u00b7 GitHub"
            }           
        ],
        "qa": [
            {
                "uid": "8184492",
                "link": "https://stackoverflow.com/questions/8184492",
                "title": "Best way to secure Android app sensitive Data?",
                "answers": [
                    {
                        "uid": 8184558,
                        "score": 0,
                        "text": [
                            "If you want to pretty much ensure the user can not see the data other than by looking at your app then encryption is really the only way.",
                            "Even the `` protected'' storage is accessible to the user if a device is rooted.",
                            "Even encryption is not totally secure as you need to decrypt the data at some point in order to display it.",
                            "You will dissuade the casual browser but not the determined hacker."
                        ]
                    },
                    {
                        "uid": 8184665,
                        "score": 0,
                        "text": [
                            "Use SSL on HTTPS to transfer data instead of HTTP you need to setup the certificates on the webserver not very sure how it works.",
                            ".",
                            "If you are really concerned about the data then further encrypt it with a unique algorithm before sending and decrypt it when it reaches the app.",
                            "I guess that's all about it.",
                            ".",
                            "Unless you need something really strong then develop your own protocol based on TCP and/or use another port.",
                            ".",
                            "maybe that'll help",
                            "LINK http://developer.android.com/reference/javax/net/ssl/package-summary.html LINK",
                            "As for storing data in the app what you can encrypt the data before storing or you can use another format other than SQLite for better security as you can view sqlite databases using the browser pretty easily.",
                            "Unless the phone is rooted there should not be a way to extract the data from it."
                        ]
                    },
                    {
                        "uid": 8184699,
                        "score": 105,
                        "text": [
                            "That depends very much on your audience.",
                            "Normally, the Android OS prohibits apps from accessing each other's files -LRB- i.e. databases, preference files, regular files stored in the app's private directory -RRB- through proven Linux file permissions.",
                            "However, on rooted devices an application can obtain root access and read everything.",
                            "A few things to think about:",
                            "To conclude, if your information is not super-duper sensitive -LRB- e.g. credit card information -RRB-, I'd suggest just sticking with the default security provided by Android -LRB- i.e. save everything in plain text, knowing other apps can't access it -RRB-.",
                            "Otherwise, encryption is the way to go.",
                            "It's not 100 % secure -LRB- a hacker could de-compile your app and figure out how to decrypt the data -RRB-, but it's a major pain to crack and will stop most hackers.",
                            "Especially if you obfuscate your code with something like LINK.",
                            "You have a few options here.",
                            "First of all, always use HTTPS.",
                            "After enabling HTTPS, here are two extra security measures I would propose:",
                            "The second method is more useful if you are also doing plain HTTP requests, where everyone can see the parameters being sent.",
                            "Also, it's much harder to figure out from decompiled code.",
                            "Especially if you spread the key calculation logic across multiple classes.",
                            "However, note that nothing makes it impossible to crack your app.",
                            "You can obfuscate as much as you want, if a hacker is really determined to get to your data, he will be able to so by decompiling your application and spending many sleepless nights passing through your code and figuring out how the requests are formed.",
                            "The only real way of securing your data is by asking your user for a password, besides doing all the work I wrote about above.",
                            "You can't get a password that only exists in someone's -LRB- the user -RRB- head from decompiled code :-RRB-."
                        ]
                    },
                    {
                        "uid": 15841247,
                        "score": 14,
                        "text": [
                            "-LRB- Came here thanks to a Google search -RRB-",
                            "I've been researching this a lot lately and this page has come up a lot thanks to Google and Bing searches.",
                            "The widely-accepted procedure for storing data on the device securely has been to use a strong encryption algorithm like AES.",
                            "The harder question is `` AES requires a secure key.",
                            "What do you do with the key ?''",
                            "Google recently announced a cloud-based storage solution for apps, so you could consider storing the key there if the situation allows.",
                            "Otherwise, its seems that getting the key outside the device, like on a server, is better.",
                            "If you can make the user punch in a PIN, that would actually work the best.",
                            "You can do password derivation in order to store the password, and you can redo the derivation to verify the password",
                            "Without the `` user punching in a PIN'' part, I haven't found a lot of good answers to that question.",
                            "However, DO NOT HARD-CODE THE KEY IF YOU MUST STORE ONE WITH THE APP.",
                            "At the minimum, generate a key using a secure password generator and/or a derivation function like PBKDF2 -LRB- Password-based derivation function 2 -RRB-.",
                            "If I read the posts correctly, Google did say that one approach is to generate a key once the app starts the first time, store the key via the MODE_PRIVATE flag to a lot of file I/O operations, and use that as the key.",
                            "You can also derive other keys based on that master key, and the NIST actually suggests something along that lines.",
                            "Whether or not to trust the master-key method, I'll leave to you.",
                            "This key would get exposed on a rooted device.",
                            "I'll also admit that I'm still researching the issue"
                        ]
                    },
                    {
                        "uid": 46329646,
                        "score": 1,
                        "text": [
                            "Every application on Android runs in a secure sandbox environment, so other processes on the system can not access your code or private data without proper handshake.",
                            "But still there are many vulnerabilities are possible by poor design of the apps.",
                            "This link from Android developers site advice you some of the good tips for security - LINK"
                        ]
                    }
                ],
                "tags": [
                    "android",
                    "security"
                ]
            }
        ],
        "other": [
            {
                "link": "https://medium.com/mindorks/how-to-pass-large-data-between-server-and-client-android-securely-345fed551651",
                "type": "misc",
                "content": [
                    "Sign inAndroidLearn Advanced Android By DoingRoadmapLearn Advanced AndroidHow to pass large data between server and client ( android ) securely?Using RSA and AES ( Hybrid ) encryption techniqueMayank Mohan UpadhyayFollowJun 14, 2017 \u00b7 5 min readHello guys, Most of the times, we pass sensitive data from our Android app to our server.",
                    "Such sensitive data could be a personal message one user is sending to another, could be an information about the user, could be user's SMS, so on and so forth.",
                    "While we should always explicitly inform users before transferring such sensitive data, but we should also make sure we transfer this data as securely as possible.It shouldn't surprize you that companies have faced huge financial losses due to poor security, and it has lead to shut down of companies as well.",
                    "Another surprize is that implementing this isn't complicated at all !",
                    "With little knowledge you can create a rock solid security for the client -- server communication.ABC of EncryptionConsider you have a sensitive information say user's email ID.",
                    "You want to securely transfer it to your server.",
                    "How will you do it ?",
                    "one way could be to encrypt it using a passcode.",
                    "Client will use this passcode to encrypt user's email ID and send to the server.",
                    "Server will, in turn, use the same passcode to decrypt the data received from the client.",
                    "If during the transmission of the data someone gets access to the transmitting data, he / she wouldn't be able to make sense of it as it is encrypted.",
                    "Also, since the intruder doesn't have access to the passcode, he / she wouldn't be able to decrypt the data.This kind of encryption technique is called symmetric encryption.",
                    "It is fast and can encrypt large texts of data.",
                    "The drawback includes safe distribution of the key.",
                    "Also, you need to ship the key in your app -- which is a highly unrecommended practice.",
                    "The most popular Symmetric Algorithms are DES, Triple-DES, AES, Blowfish, RC2, RC4 ( ARCFOUR ), RC5, RC6.Hmm, this is an issue.",
                    "You can't ship the passcode in your app.",
                    "If the intruder gets access to your passcode then he / she can easily get all the sensitive data that will be transmitted from your app.What to do now ?",
                    "What if there was an encryption technique where the algorithm would generate a key pair for you comprising of 2 keys.",
                    "1 public key and 1 private key.",
                    "Public key is visible publicly and anyone can use that key to encrypt sensitive data.",
                    "But now the decryption of that data can only be done by private key which only you have access to.",
                    "That means you can safely ship public key in your app and keep the private key on server.",
                    "This is just wonderful!This kind of encryption technique is called asymmetric encryption.",
                    "It is comparatively very slow and can encrypt only very small texts of data at a time ( 128 bytes to be exact ! )",
                    "The most popular Asymmetric Algorithms ( aka Public Key Algorithms ) are RSA, Diffie-Hellman, ElGamal, DSS.So now it is clear that you can't use symmetric encryption because you can't ship the passcode in your app.",
                    "Also, it is impractical to use asymmetric encryption because 99 % of the times the data that you'd want to transfer would be of more than 128 bytes in size !",
                    "What to do?Hybrid solution to the rescue!Consider this: Using an asymmetric encryption ( say RSA ), the server generates a key pair consisting of a public key and a private key.Server saves these keys in a secure location.We take public key and ship it in our app ( client ).",
                    "When we want to transfer some sensitive data to server ( at runtime ), we generate a passcode ( aka secret key ) using a symmetric encryption ( say AES ).",
                    "Using this secret key we encrypt our large texts of data quickly.Now we use the public key to encrypt our secret key.We send this encrypted data and encrypted secret key combination to server ( using any commonly used way to send combination of data, like JSON ) Server receives this combination, extracts encrypted data and encrypted secret key from it.Server uses private key to decrypt the encrypted secret key.Server uses decrypted secret key ( or simply called secret key ) to decrypt the encrypted data.",
                    "Hence it gets the large texts of data which was sent by the client securely.This technique is called Hybrid Cryptography.Show me the code!First of all server needs to generates a key pair using RSA.",
                    "This will be done via the following class: ( Note that this code needs to be run only 1 time as you'll use the same key pair going forward ) 2.",
                    "On client side, to generate secret key at runtime, encrypt sensitive string using secret key, and encrypt secret key using public key, this class will help you: 3.",
                    "Upon receiving the encrypted text and encrypted secret key on server side, the server will decrypt the encrypted secret key using private key.",
                    "Afterwards, the server will retrieve the original text transmitted by the client by decrypting the encrypted text using secret key ( decrypted ).",
                    "The following class will help you in the same: ConclusionFriends, as you saw it is a piece of cake to implement this solution.",
                    "This will not only save your app from intruders, but will also increase trust of your app users.",
                    "Remember: It is not a feature that you're providing to your app users, it is a responsibility you're fulfilling that you owe to all of them.Bonus hintAs you can see we have used Base64 class methods in the above code snippets, sometimes due to difference in implementation the default import can import slightly different files ( android has a modified version ).",
                    "You can find the correct file here which you can import on your server side code so that client and server work in harmony: ) Check out all the top articles at blog.mindorks.comMindOrksOur community publishes stories worth reading on Android ... Follow658 22 SecurityAndroidEncryptionServersRsa658 claps658 claps22 responsesWritten byMayank Mohan UpadhyayFollowgoogle certified mobile engineer \u2022 an artist who engineers softwareFollowMindOrksFollowOur community publishes stories worth reading on Android DevelopmentFollowWritten byMayank Mohan UpadhyayFollowgoogle certified mobile engineer \u2022 an artist who engineers softwareMindOrksFollowOur community publishes stories worth reading on Android DevelopmentMore From MediumIn 40 years, email is still the weakest link in security ... so how can we stop email snooping?Prof Bill Buchanan OBE in ASecuritySite: When Bob Met AliceTryHackMe - Linux PrivEsctheRandomizer100 Words On ....",
                    "Christmas CybersecurityDigitally VicariousBiometrics: Who Has Your Data?Varju Luceno in The StartupBlind XPath Injections: The Path Less TravelledZhang ZeyuWhy Facebook wants to integrate its messaging appsC Y SOne of the greatest advancements in Cybersecurity: The Sponge Function ( Keccak and SHAKE ) Prof Bill Buchanan OBE in ASecuritySite: When Bob Met AliceOWASP: SENSITIVE DATA EXPOSURE AttacksIsha Kudkar in ShallVhackLearn more.Medium is an open platform where 170 million readers come to find insightful and dynamic thinking.",
                    "Here, expert and undiscovered voices alike dive into the heart of any topic and bring new ideas to the surface.",
                    "Learn moreMake Medium yours.Follow the writers, publications, and topics that matter to you, and you'll see them on your homepage and in your inbox.",
                    "ExploreShare your thinking.If you have a story to tell, knowledge to share, or a perspective to offer -- welcome home.",
                    "It's easy and free to post your thinking on any topic.",
                    "Write on MediumAboutHelpLegalGet the Medium app",
                    "Sign inAndroidLearn Advanced Android By DoingRoadmapLearn Advanced Android",
                    "AndroidLearn Advanced Android By DoingRoadmapLearn Advanced Android",
                    "How to pass large data between server and client ( android ) securely?Using RSA and AES ( Hybrid ) encryption techniqueMayank Mohan UpadhyayFollowJun 14, 2017 \u00b7 5 min readHello guys, Most of the times, we pass sensitive data from our Android app to our server.",
                    "You can find the correct file here which you can import on your server side code so that client and server work in harmony: ) Check out all the top articles at blog.mindorks.com",
                    "How to pass large data between server and client ( android ) securely ?",
                    "Using RSA and AES ( Hybrid ) encryption techniqueMayank Mohan UpadhyayFollowJun 14, 2017 \u00b7 5 min read",
                    "Mayank Mohan UpadhyayFollowJun 14, 2017 \u00b7 5 min read",
                    "MindOrksOur community publishes stories worth reading on Android ... Follow658 22",
                    "MindOrksOur community publishes stories worth reading on Android ... Follow",
                    "Our community publishes stories worth reading on Android ...",
                    "SecurityAndroidEncryptionServersRsa658 claps658 claps22 responsesWritten byMayank Mohan UpadhyayFollowgoogle certified mobile engineer \u2022 an artist who engineers softwareFollowMindOrksFollowOur community publishes stories worth reading on Android DevelopmentFollowWritten byMayank Mohan UpadhyayFollowgoogle certified mobile engineer \u2022 an artist who engineers softwareMindOrksFollowOur community publishes stories worth reading on Android DevelopmentMore From MediumIn 40 years, email is still the weakest link in security ... so how can we stop email snooping?Prof Bill Buchanan OBE in ASecuritySite: When Bob Met AliceTryHackMe - Linux PrivEsctheRandomizer100 Words On ....",
                    "Christmas CybersecurityDigitally VicariousBiometrics: Who Has Your Data?Varju Luceno in The StartupBlind XPath Injections: The Path Less TravelledZhang ZeyuWhy Facebook wants to integrate its messaging appsC Y SOne of the greatest advancements in Cybersecurity: The Sponge Function ( Keccak and SHAKE ) Prof Bill Buchanan OBE in ASecuritySite: When Bob Met AliceOWASP: SENSITIVE DATA EXPOSURE AttacksIsha Kudkar in ShallVhack",
                    ""
                ],
                "title": "How to pass large data between server and client (android) securely? | by Mayank Mohan Upadhyay | MindOrks | Medium"
            },
            {
                "link": "https://medium.com/@rezabigdeli6/how-to-send-a-semi-secure-request-to-a-server-in-android-359b11b4e873",
                "type": "misc",
                "content": [
                    "Get startedOpen in appReza Bigdeli263 FollowersAboutFollowSign inGet startedFollow263 FollowersAboutGet startedOpen in appHow to Send a Semi Secure Request to a Server in AndroidReza BigdeliJan 14, 2016 \u00b7 5 min readDisclaimer: This article is written a couple of years ago.",
                    "There should be a lot of better ways to tackle this issue.",
                    "Yet, I don't think reading this article would be of no value.Imagine that you have a server for your Android application.",
                    "What the server does is registering the users of the application and creates accounts for them.",
                    "But the problem here is, as usual, security.",
                    "What if a hacker sniff your requests from the application and just creates the same structured requests and sends them to your server to fill its database with fake users.",
                    "Of course there are some solutions for this type of attack, for example CAPTCHAS, but again the problem is CAPTCHAS will ruin the UX of your application.",
                    "I mean who wants to write a bunch of nonsense when signing up in Instagram application ?",
                    "So is there a way to somehow stop a hacker from attacking our server without needing us to destroy our valuable UX ?",
                    "Well I believe I have a solution.The solution has some steps to follow and in each step a problem will arise and we will try to solve them along the way to get to what we want which is a secure valid request to the server.Step One: Just Respond to Application RequestsIf we make the server to only respond to the requests sent from the application we can be a little bit more sure that requests are sent from a real person who is using our application, not a bot or a program of a hacker.",
                    "But how does the server know a request is sent from the application ?",
                    "Well we can put some kind of encryption into our requests, for example using RSA we can have a private key, put it into the application, and encrypt the requests.",
                    "So this way the hacker who is sniffing our requests wouldn't know what we are doing and what information are we sending so they can't go ahead and make fake requests.But the new problem here is that decompiling an Android application isn't that hard, actually it's pretty easy.",
                    "There are tons of decompiling applications on the web that will decompile our APK to the java code that we have written.",
                    "Of course there are some obfuscating approaches, like ProGuard that you should use, but they wouldn't stop a determined hacker to find our private key in our code.",
                    "So even with obfuscating, after decompilation our code will look like this: As you can see finding the key isn't that hard.",
                    "So what do we do?Step two: Use Native CodeIn android you can write some or all of your code in c/c + + languages using NDK.",
                    "The important thing is you have to know when to use it.",
                    "I am not going to explain when to use native code but in our situation we are going to benefit from it.",
                    "Decompiling c/c + + code is possible and there some tools to do it but a c/c + + decompiled code is a complete nonsense.",
                    "Understanding and debugging a c/c + + decompiled code is super complex and time consuming.",
                    "And again of course a hacker can go all the way down to the machine code but at least we can make it as hard and as boring and as time consuming as possible.",
                    "So our step two is to put our private key into the native code.",
                    "So after doing so our code would look like this: But wait a minute !",
                    "Even if the hacker can't find our key they can go ahead and manipulate or Java code or take the whole of our c/c + + library and method and call it in their own program with their code.",
                    "If they create a for loop and generate random emails and passwords they can use our c/c + + library against us and create a ton of fake valid requests.",
                    "Their code can be like this: So how do we stop this from happening !?",
                    "Step three: Use Other FactorsWe know that they can use our library just like we are using it.",
                    "But the advantage of using native code is that we can be, to some extend, sure that: First: They don't have access to our private key so if they want to create requests they have to use our library.Second: They can't see or manipulate our native code and logic.So we can use and check a lot of factors and bring in a lot of checking in our native code.",
                    "For example to counteract the for loop we can send the encrypted data back to the java code with a little of delay.",
                    "This will take the power of machine from it and make it more like a normal person who is trying to register many times.",
                    "And at the same time, delaying for half a second wouldn't be as annoying as CAPTCHAS for someone who is trying to register.",
                    "Or we can send something unique along with the email and password to the server so it can find repetitive requests and simply ignore them.",
                    "That unique thing can be lots of things like the processId that is the identifier of the process's UID.",
                    "This is the kernel UID that the process is running under, which is the identity of its app-specific sandbox.",
                    "The processId wont change when its package is installed on the device so every time that you get your processId it is the same, but it can be different in another device.",
                    "You can get your processId in native code using getuid ( ), when including unistd.h and sys/types.h so if the server gets a lot of requests with the same unique factor, here processId, in a short amount of time it can simply ignore them.",
                    "Also you can check the package name in your native code and a lot of other things.",
                    "The important key is the hacker doesn't really know what you are doing in there.Secured?No, not really.",
                    "That is why I put the `` semi'' word in the title.",
                    "We did a lot of things and used a lot of methods to make the things hard for the hacker but as I said a determined hacker can do anything.",
                    "But making things hard for them can dissuade them from doing their job or at least gives you some time to change your approach or find a better way in your next release.Reza BigdeliAndroid developer https://www.linkedin.com/in/rezabigdeli/Follow224 3 224 224 3 Android App DevelopmentNative AppEncryptionMore from Reza BigdeliFollowAndroid developer https://www.linkedin.com/in/rezabigdeli/More From MediumText Recognition in Android Using Firebase VisionPayam Asefi in The Startup5 Reasons to go Serverless With Azure.Ajiri Gunn in The StartupDesigning the Android Application Architecture: Ravi SahaniSliding Up And Down: View AnimationMudit SenManaging Application Sizearun kumarCompose O'ClockMarton Braun in Google Developers ExpertsBitrise -- Run Android instrumented tests on different modules within the same projectAlessandro Mautone in The StartupAndroid: Partition tablesDmFrProAboutHelpLegalGet the Medium app",
                    "How to Send a Semi Secure Request to a Server in AndroidReza BigdeliJan 14, 2016 \u00b7 5 min readDisclaimer: This article is written a couple of years ago.",
                    "But making things hard for them can dissuade them from doing their job or at least gives you some time to change your approach or find a better way in your next release.",
                    "Well I believe I have a solution.",
                    "How to Send a Semi Secure Request to a Server in AndroidReza BigdeliJan 14, 2016 \u00b7 5 min read",
                    "Reza BigdeliJan 14, 2016 \u00b7 5 min read",
                    "The solution has some steps to follow and in each step a problem will arise and we will try to solve them along the way to get to what we want which is a secure valid request to the server.Step One: Just Respond to Application RequestsIf we make the server to only respond to the requests sent from the application we can be a little bit more sure that requests are sent from a real person who is using our application, not a bot or a program of a hacker.",
                    "224 224 3 Android App DevelopmentNative AppEncryptionMore from Reza BigdeliFollowAndroid developer https://www.linkedin.com/in/rezabigdeli/More From MediumText Recognition in Android Using Firebase VisionPayam Asefi in The Startup5 Reasons to go Serverless With Azure.Ajiri Gunn in The StartupDesigning the Android Application Architecture: Ravi SahaniSliding Up And Down: View AnimationMudit SenManaging Application Sizearun kumarCompose O'ClockMarton Braun in Google Developers ExpertsBitrise -- Run Android instrumented tests on different modules within the same projectAlessandro Mautone in The StartupAndroid: Partition tablesDmFrPro",
                    ""
                ],
                "title": "How to Send a Semi Secure Request to a Server in Android | by Reza Bigdeli | Medium"
            }
        ]
    },
    "parsed": true
}