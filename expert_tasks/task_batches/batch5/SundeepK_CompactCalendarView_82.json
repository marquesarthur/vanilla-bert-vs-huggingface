{
    "task": "Doesn't scroll properly inside ViewPager",
    "description": "I'm trying to use CompactCalendarView on the fragment inside ViewPager.\nCompactCalendarView control doesn't scroll properly - ViewPager scrolls instead of calendar.\n",
    "type": "GIT",
    "link": "https://github.com/SundeepK/CompactCalendarView/issues/82",
    "question_id": "82",
    "resources": {
        "api": [
            {
                "link": "https://developer.android.com/training/gestures/scroll",
                "type": "android",
                "content": [
                    "In Android, scrolling is typically achieved by using the ScrollView class.",
                    "Any standard layout that might extend beyond the bounds of its container should be nested in a ScrollView to provide a scrollable view that's managed by the framework.",
                    "Implementing a custom scroller should only be necessary for special scenarios.",
                    "This lesson describes such a scenario: displaying a scrolling effect in response to touch gestures using scrollers.",
                    "You can use scrollers ( Scroller or OverScroller ) to collect the data you need to produce a scrolling animation in response to a touch event.",
                    "They are similar, but OverScroller includes methods for indicating to users that they've reached the content edges after a pan or fling gesture.",
                    "The InteractiveChart sample uses the EdgeEffect class ( actually the EdgeEffectCompat class ) to display a `` glow'' effect when users reach the content edges.",
                    "Note: We recommend that you use OverScroller rather than Scroller for scrolling animations.",
                    "OverScroller provides the best backward compatibility with older devices.",
                    "Also note that you generally only need to use scrollers when implementing scrolling yourself.",
                    "ScrollView and HorizontalScrollView do all of this for you if you nest your layout within them.",
                    "A scroller is used to animate scrolling over time, using platform-standard scrolling physics ( friction, velocity, etc. ).",
                    "The scroller itself doesn't actually draw anything.",
                    "Scrollers track scroll offsets for you over time, but they don't automatically apply those positions to your view.",
                    "It's your responsibility to get and apply new coordinates at a rate that will make the scrolling animation look smooth.",
                    "Refer to the following related resources:",
                    "`` Scrolling'' is a word that can take on different meanings in Android, depending on the context.",
                    "Scrolling is the general process of moving the viewport ( that is, the ` window' of content you're looking at ).",
                    "When scrolling is in both the x and y axes, it's called panning.",
                    "The sample application provided with this class, InteractiveChart, illustrates two different types of scrolling, dragging and flinging:",
                    "It's common to use scroller objects in conjunction with a fling gesture, but they can be used in pretty much any context where you want the UI to display scrolling in response to a touch event.",
                    "For example, you could override onTouchEvent ( ) to process touch events directly, and produce a scrolling effect or a `` snapping to page'' animation in response to those touch events.",
                    "This section describes how to use a scroller.",
                    "The snippet shown below comes from the InteractiveChart sample provided with this class.",
                    "It uses a GestureDetector, and overrides the GestureDetector.SimpleOnGestureListener method onFling ( ).",
                    "It uses OverScroller to track the fling gesture.",
                    "If the user reaches the content edges after the fling gesture, the app displays a `` glow'' effect.",
                    "Note: The InteractiveChart sample app displays a chart that you can zoom, pan, scroll, and so on.",
                    "In the following snippet, mContentRect represents the rectangle coordinates within the view that the chart will be drawn into.",
                    "At any given time, a subset of the total chart domain and range are drawn into this rectangular area.",
                    "mCurrentViewport represents the portion of the chart that is currently visible in the screen.",
                    "Because pixel offsets are generally treated as integers, mContentRect is of the type Rect.",
                    "Because the graph domain and range are decimal/float values, mCurrentViewport is of the type RectF.",
                    "The first part of the snippet shows the implementation of onFling ( ):",
                    "When onFling ( ) calls postInvalidateOnAnimation ( ), it triggers computeScroll ( ) to update the values for x and y.",
                    "This is typically be done when a view child is animating a scroll using a scroller object, as in this example.",
                    "Most views pass the scroller object's x and y position directly to scrollTo ( ).",
                    "The following implementation of computeScroll ( ) takes a different approach -- it calls computeScrollOffset ( ) to get the current location of x and y.",
                    "When the criteria for displaying an overscroll `` glow'' edge effect are met ( the display is zoomed in, x or y is out of bounds, and the app isn't already showing an overscroll ), the code sets up the overscroll glow effect and calls postInvalidateOnAnimation ( ) to trigger an invalidate on the view:",
                    "Here is the section of the code that performs the actual zoom:",
                    "This is the computeScrollSurfaceSize ( ) method that's called in the above snippet.",
                    "It computes the current scrollable surface size, in pixels.",
                    "For example, if the entire chart area is visible, this is simply the current size of mContentRect.",
                    "If the chart is zoomed in 200 % in both directions, the returned size will be twice as large horizontally and vertically.",
                    "For another example of scroller usage, see the source code for the ViewPager class.",
                    "It scrolls in response to flings, and uses scrolling to implement the `` snapping to page'' animation.",
                    "Dragging is the type of scrolling that occurs when a user drags her finger across the touch screen.",
                    "Simple dragging is often implemented by overriding onScroll ( ) in GestureDetector.OnGestureListener.",
                    "For more discussion of dragging, see Dragging and Scaling.",
                    "Flinging is the type of scrolling that occurs when a user drags and lifts her finger quickly.",
                    "After the user lifts her finger, you generally want to keep scrolling ( moving the viewport ), but decelerate until the viewport stops moving.",
                    "Flinging can be implemented by overriding onFling ( ) in GestureDetector.OnGestureListener, and by using a scroller object.",
                    "This is the use case that is the topic of this lesson.",
                    ""
                ],
                "title": "Animate a scroll gesture \u00a0|\u00a0 Android Developers"
            }
        ],
        "git": [
            {
                "link": "https://github.com/callstack/react-native-pager-view/issues/132",
                "content": [
                    "ViewPager nested in ScrollView can not scroll vertically \u00b7 Issue # 132 \u00b7 callstack/react-native-pager - view \u00b7 GitHub",
                    "ViewPager nested in ScrollView can not scroll vertically",
                    "when a ViewPager is the children of a ScrollView,",
                    "ScrollView's height is always screen height and can not scroll vertical any more",
                    "Describe what you expected to happen:",
                    "the ScrollView's height is larger then screen hight, so you can scroll vertical",
                    "the height of ViewPager is 1000 that i set.",
                    "The text was updated successfully, but these errors were encountered:",
                    "horizontal ViewPager's max height is screen height ?",
                    "Obviously, the width/height depends on the wrapper.",
                    "In practice, you may need to control nested scroll ( through scrollEnabled ) manually.",
                    "same issue can't scroll vertical inside ViewPager with scrollEnabled = true",
                    "I also have experienced same issue with @ 0x01001 ( # 132 ( comment ) ), my flat list won't scroll even I make the flatlist height static.",
                    "and it happen only android, in IOS everything works fine.",
                    "did any find a solution to this issue ?",
                    "managed in from the native side ?",
                    "I checked both cases and work fine.",
                    "this is the demo https://github.com/avent08/RNViewPagerBug",
                    "Thank you very much for repository.",
                    "I had a chance to easily reproduce it.",
                    "This issue exist on Android but it will be fixed by https://github.com/react-native-community/react-native-viewpager/pull/139/files",
                    "If you want to check out new version, please use below command:",
                    "thank you very much @troZee.",
                    "cant wait until it fully released.",
                    "will try those code on my repository.",
                    "If FlatList is inside ViewPager, the FlatList's scrolling is not working, any ideas how to fix it ?",
                    "Any temporary fix for this issue at least !",
                    ": (",
                    "Using this is not changing anything.",
                    ".",
                    "I am trying to use viewpager in horizontal orientation inside vertical carousel, it works in iOS perfectly whereas on android viewpager can't be scrolled",
                    "3.3.0 is working fine but upgrading to 4.x breaks it.",
                    "did you find any solutions to fix that ?",
                    "I've upgraded to the latest version 4.x and it's working again.",
                    "@Relax594 can you please point out what version you are using and show a basic snippet of the code ?",
                    "I'm still facing the same issue as stated on the issue",
                    "when a ViewPager is the children of a ScrollView, ScrollView's height is always screen height and can not scroll vertical any more",
                    "Your issue is strict related to wrong styling, when you have two children of ScrollView and the first item has height = 200 and the second one flex: 1 then it will always adjust itself to the screen height.",
                    "Beside that any other issues which may be related with it should be fixed in 5.x version",
                    ""
                ],
                "title": "ViewPager nested in ScrollView can not scroll vertically \u00b7 Issue # 132 \u00b7 callstack/react-native-pager - view \u00b7 GitHub"
            }
        ],
        "qa": [
            {
                "uid": "39588322",
                "link": "https://stackoverflow.com/questions/39588322",
                "title": "ViewPager inside ScrollView not working",
                "answers": [
                    {
                        "uid": 39589372,
                        "score": 0,
                        "text": [
                            "So let me do it for you: the correct hierarchy as suggested by google blogspot it is working fine for me: Check this out",
                            "let me know if it helps"
                        ]
                    },
                    {
                        "uid": 39589402,
                        "score": 28,
                        "text": [
                            "Try adding this piece of code before loading your viewPager",
                            "Let me know if it helped fix the issue."
                        ]
                    },
                    {
                        "uid": 44381243,
                        "score": 13,
                        "text": [
                            "Use android: fillViewport = `` true'' in ScrollView"
                        ]
                    },
                    {
                        "uid": 52072489,
                        "score": 0,
                        "text": [
                            "No need to use ScrollView and NestedScroolview Just use SliderLayout it will work perfectly.",
                            "add below dependency inside build.gradle -LRB- app level -RRB-",
                            "layout",
                            "Activity code:"
                        ]
                    },
                    {
                        "uid": 55030827,
                        "score": 9,
                        "text": [
                            "The accepted answer resulted in my fragments now being visible.",
                            "However, it left me with the problem that my NestedScrollView would no longer scroll !",
                            "To overcome this, I have created a custom ViewPager -LRB- based on LINK -RRB- that calculates it's height in the required manner.",
                            "Here is full code for my CustomViewPager:",
                            "In your layout xml, you'd then just replace android.support.v4.view.ViewPager with org.example.CustomViewPager.",
                            "-LRB- I also removed the new android: fillViewport = `` true'' attribute from my NestedScrollView element as it seems this is now no longer needed. -RRB-"
                        ]
                    },
                    {
                        "uid": 55036841,
                        "score": 0,
                        "text": [
                            "Use nestedScrollview and set the property of nestedscrollenabled as true and I think you will do it."
                        ]
                    }
                ],
                "tags": [
                    "android",
                    "android-fragments",
                    "android-viewpager"
                ]
            }
        ],
        "other": [
            {
                "link": "https://guides.codepath.com/android/viewpager-with-fragmentpageradapter",
                "type": "misc",
                "content": [
                    "Jump to SectionTable of ContentsOverviewUsageLayout ViewPagerDefine FragmentsSetup FragmentPagerAdapterApply the AdapterSelecting or Getting the PageSetup OnPageChangeListenerTabbed Interface with PagerDynamic ViewPager FragmentsSetup SmartFragmentStatePagerAdapterAccess Fragment InstancesReplacing Fragments Inside ViewPagerSet Offscreen Page LimitViewPager with Visible Adjacent PagesAnimating the Scroll with PageTransformerUsing a Third-Party LibraryDeveloping Custom TransformsDisabling Swipe EventsLaunching an Activity with Tab SelectedCustom Pages without FragmentsCustom ViewPager IndicatorsReferencesViewPager with FragmentPagerAdapterEdit PagePage HistoryOverview Layout that allows the user to swipe left and right through `` pages'' of content which are usually different fragments.",
                    "This is a common navigation mode to use instead of ActionBar Tabs with Fragments.",
                    "Usage Layout ViewPager A ViewPager is a layout which can be added to any layout XML file inside a root layout:",
                    "If you want an `` indicator'' that displays the pages available at the top as shown in the screenshot above, you need to include a nested indicator view called a PagerTabStrip:",
                    "which will automatically display the page indicator for your pager.",
                    "You might want to check out the popular ViewPagerIndicator for an improved page indicator.",
                    "Define Fragments Next, let's suppose we have defined two fragments FirstFragment and SecondFragment both of which contain a label in the layout and have implementations such as:",
                    "Setup FragmentPagerAdapter Now we need to define the adapter that will properly determine how many pages exist and which fragment to display for each page of the adapter by creating a FragmentPagerAdapter:",
                    "For more complex cases with many pages, check out the more dynamic approach with SmartFragmentStatePagerAdapter explained later.",
                    "Apply the Adapter Finally, let's associate the ViewPager with a new instance of our adapter:",
                    "And now we have a basic functioning ViewPager with any number of fragments as pages which can be swiped between.",
                    "Selecting or Getting the Page We can access the selected page within the ViewPager at any time with the getCurrentItem method which returns the current page:",
                    "The current page can also be changed programmatically with the",
                    "With this getter and setter, we can easily access or modify the selected page at runtime.",
                    "Setup OnPageChangeListener If the Activity needs to be able listen for changes to the page selected or other events surrounding the ViewPager, then we just need to hook into the ViewPager.OnPageChangeListener on the ViewPager to handle the events:",
                    "Tabbed Interface with Pager We can use the ViewPager to display a tabbed indicator in order to create tabs to display our fragments.",
                    "At Google I/O 2015, Google announced a new TabLayout class that makes creating this tabbed interface fairly easy to do.",
                    "See Google Play Style Tabs using TabLayout for a walkthrough.",
                    "An alternative approach to achieve this is to use the third-party PagerSlidingTabStrip library.",
                    "In this way, we can use the same pager system described above and augment the pager with a tabbed navigation indicator.",
                    "Dynamic ViewPager Fragments In certain cases, we may require a dynamic ViewPager where we want to get access to fragment instances or with pages being added or removed at runtime.",
                    "If your ViewPager is more dynamic with many pages and fragments, we will want to use an implementation of the alternate FragmentStatePagerAdapter instead.",
                    "Below shows us how to use this and also intelligently cache the fragments for easy lookup.",
                    "Setup SmartFragmentStatePagerAdapter First, copy in the SmartFragmentStatePagerAdapter.java which provides the intelligent caching of registered fragments within our ViewPager.",
                    "It does so by overriding the instantiateItem ( ) method and caching any created fragments internally.",
                    "This solves the common problem of needing to access the current item within the ViewPager.",
                    "Now, we want to extend from SmartFragmentStatePagerAdapter copied above when declaring our adapter so we can take advantage of the better memory management of the state pager:",
                    "Access Fragment Instances Now with this adapter in place, we can also easily access any fragments within the ViewPager with:",
                    "and we can easily access the `` current'' pager item with:",
                    "This pattern should save your app quite a deal of memory and allow for much easier management of fragments within your pager for the right situation.",
                    "Replacing Fragments Inside ViewPager In certain cases, we want to dynamically replace the Fragment shown for a given page within a ViewPager.",
                    "For example, perhaps the page in the ViewPager currently displays a list of items and we want to have a detail view show up when an item is selected.",
                    "There are two approaches for this: create a fragment container as a page or switch fragments from within the adapter.",
                    "The first approach is to have the page display a fragment container that switches between multiple child content fragments as outlined in this tutorial on the subject.",
                    "You can view the working sample code here as well.",
                    "The second approach is to switch the fragment that displays inside the FragmentPagerAdapter by overriding the getItem ( ... ) method as well as getItemPosition ( Object object ) which is invoked every time you call viewPager.getAdapter ( ).",
                    "You would then invoke notifyDataSetChanged on the pager adapter to trigger a reload of the pager at any time.",
                    "For more details, check out this StackOverflow thread as well as this post.",
                    "Set Offscreen Page Limit Alternatively, you can use the method setOffscreenPageLimit ( int limit ) provided by ViewPager to set how many page instances you want the system to keep in memory on either side of your current page.",
                    "As a result, more memory will be consumed.",
                    "So be careful when tweaking this setting if your pages have complex layouts.",
                    "For example, to let the system keep 3 page instances on both sides of the current page:",
                    "This can be useful in order to preload more fragments for a smoother viewing experience trading off with memory usage.",
                    "ViewPager with Visible Adjacent Pages If you are interested in a ViewPager with visible adjacent pages that are partially visible:",
                    "We can do that with by tuning a few properties of our pager.",
                    "First, here's how the ViewPager might be defined in the XML Layout:",
                    "Next, we need to tune these properties of the pager in the containing fragment or activity:",
                    "Finally we need to adjust the width inside the adapter:",
                    "For more details, you can follow these guides:",
                    "ViewPager with Protruding Children ViewPager with Page Boundaries",
                    "Animating the Scroll with PageTransformer We can customize how the pages animate as they are being swiped between using the PageTransformer.",
                    "Using a Third-Party Library The easiest way to leverage transformers is to use this ViewPagerTransforms library:",
                    "Loading the library into app/build.",
                    "and then using the desired effect:",
                    "Developing Custom Transforms However, custom usage is pretty straightforward, just attach a PageTransformer to the ViewPager:",
                    "The first argument is set to true if the supplied PageTransformer requires page views to be drawn from last to first instead of first to last.",
                    "The second argument is the transformer which requires defining the transformPage method to define the sliding page behavior.",
                    "The transformPage method accepts two parameters: page which is the particular page to be modified and position which indicates where a given page is located relative to the center of the screen.",
                    "The page which fills the screen is at position 0.",
                    "The page immediately to the right is at position 1.",
                    "If the user scrolls halfway between pages one and two, page one has a position of -0.5 and page two has a position of 0.5.",
                    "For more details, check out the official guide or this guide.",
                    "You can also review this cool rotating page transformer effect for another example.",
                    "Disabling Swipe Events If we want to disable swipe in a particular direction, check out this custom ViewPager that swipes in only one direction using a custom class extending ViewPager that intercepts the swipe touch events.",
                    "In certain situations your app might even want to have a ViewPager that allows switching pages using an indicator but that doesn't intercept swipe events at all.",
                    "This is usually because we want to have the swipe events perform another action rather than change the page.",
                    "The first step is to define a custom ViewPager subclass called LockableViewPager.",
                    "The class inherits from ViewPager and includes a new method called setSwipeable to control if swipe events are enabled or not.",
                    "Copy this class into your project.",
                    "Make sure to change your layout file accordingly:",
                    "Now, just call setSwipeable ( false ) to disable swiping to change the page.",
                    "Launching an Activity with Tab Selected Often when launching a tabbed activity, there needs to be a way to select a particular tab to be displayed once the activity loads.",
                    "For example, an activity has three tabs with one tab being a list of created posts.",
                    "After a user creates a post on a separate activity, the user needs to be returned to the main activity with the `` new posts'' tab displayed.",
                    "This can be done through the use of intent extras and the ViewPager #setCurrentItem method.",
                    "First, when launching the tabbed activity, we need to pass in the selected tab as an extra:",
                    "If the activity needs to return a result, we can also return this as an activity result.",
                    "Next, we can read this information from the intent within the tabbed activity:",
                    "With that, any activity can launch the tabbed activity with the ability to configure the selected tab.",
                    "Custom Pages without Fragments While a ViewPager is often coupled with a Fragment for each page using the FragmentPagerAdapter, there are cases where the pages are better off as plain views.",
                    "A good example is an image gallery, where the user can swipe between different pictures.",
                    "To achieve this, we can extend from PagerAdapter:",
                    "This is most commonly used for image slideshows or galleries.",
                    "See this image gallery tutorial or this viewpager without fragments guide for more detailed steps.",
                    "Custom ViewPager Indicators An `` indicator'' is the UI element that displays the possible pages and the current page such as `` tabs''.",
                    "There are a number of other custom indicators for the pager that can be helpful in various contexts.",
                    "A few of the most interesting ones are listed below:",
                    "Spring indicator with animated elastic selection.",
                    "Indicator that visually springs between pages as dragged.",
                    "Simple circle `` dots'' indicator for pages.",
                    "Indicator that displays the typical `` dots'' associated to pages.",
                    "Custom `` Ink'' dots indicator for pages.",
                    "Indicator that displays dots for items and uses `` ink'' to visualize the current page.",
                    "Overview Layout that allows the user to swipe left and right through `` pages'' of content which are usually different fragments.",
                    ""
                ],
                "title": "ViewPager with FragmentPagerAdapter | CodePath Android Cliffnotes"
            }
        ]
    },
    "parsed": true
}