{
    "task": "Generating an error when using Provider for scoped instances",
    "description": "There are two general reasons to use `Provider`:\n- Because you need to get several instances of a binding\n- To solve a dependency cycle.\n\nIf we put dependency cycles aside, no one should ever inject a provider of a scoped binding. However, shit happens, and I'm looking at a codebase filed with Providers of a singleton binding, because someone messed up and it's been copy pasted from there.\n\nWhat would you think how having Dagger generate a compile error if trying to inject a provider of a scoped instance?\n\nDependency cycles for singletons could be solved by using Lazy.\n",
    "type": "GIT",
    "link": "https://github.com/google/dagger/issues/335",
    "question_id": "335",
    "resources": {
        "api": [
            {
                "link": "https://developer.android.com/guide/topics/providers/content-provider-creating",
                "type": "android",
                "content": [
                    "A content provider manages access to a central repository of data.",
                    "You implement a provider as one or more classes in an Android application, along with elements in the manifest file.",
                    "One of your classes implements a subclass ContentProvider, which is the interface between your provider and other applications.",
                    "Although content providers are meant to make data available to other applications, you may of course have activities in your application that allow the user to query and modify the data managed by your provider.",
                    "The rest of this topic is a basic list of steps for building a content provider and a list of APIs to use.",
                    "Before you start building a provider, consider the following:",
                    "You don't need a provider to use databases or other types of persistent storage if the use is entirely within your own application and you don't need any of the features listed above.",
                    "Instead, you can use one of the storage systems described on the Saving App Data page.",
                    "Next, follow these steps to build your provider:",
                    "A content provider is the interface to data saved in a structured format.",
                    "Before you create the interface, you must decide how to store the data.",
                    "You can store the data in any form you like, and then design the interface to read and write the data as necessary.",
                    "These are some of the data storage technologies that are available in Android:",
                    "Remember that you don't have to use a database to implement your repository.",
                    "A provider appears externally as a set of tables, similar to a relational database, but this is not a requirement for the provider's internal implementation.",
                    "Note: If you make a change to your repository that isn't backwards-compatible, you need to mark the repository with a new version number.",
                    "You also need to increase the version number for your app that implements the new content provider.",
                    "Making this change prevents system downgrades from causing the system to crash when it attempts to reinstall an app that has an incompatible content provider.",
                    "Here are some tips for designing your provider's data structure:",
                    "You can also use a BLOB to implement a schema-independent table.",
                    "In this type of table, you define a primary key column, a MIME type column, and one or more generic columns as BLOB.",
                    "The meaning of the data in the BLOB columns is indicated by the value in the MIME type column.",
                    "This allows you to store different row types in the same table.",
                    "The Contacts Provider's `` data'' table ContactsContract.Data is an example of a schema-independent table.",
                    "A content URI is a URI that identifies data in a provider.",
                    "Content URIs include the symbolic name of the entire provider ( its authority ) and a name that points to a table or file ( a path ).",
                    "The optional id part points to an individual row in a table.",
                    "Every data access method of ContentProvider has a content URI as an argument ; this allows you to determine the table, row, or file to access.",
                    "The basics of content URIs are described in the topic Content provider basics.",
                    "A provider usually has a single authority, which serves as its Android-internal name.",
                    "To avoid conflicts with other providers, you should use Internet domain ownership ( in reverse ) as the basis of your provider authority.",
                    "Because this recommendation is also true for Android package names, you can define your provider authority as an extension of the name of the package containing the provider.",
                    "For example, if your Android package name is com.example.",
                    "<appname>, you should give your provider the authority com.example.",
                    "Developers usually create content URIs from the authority by appending paths that point to individual tables.",
                    "For example, if you have two tables table1 and table2, you combine the authority from the previous example to yield the content URIs com.example.",
                    "Paths aren't limited to a single segment, and there doesn't have to be a table for each level of the path.",
                    "By convention, providers offer access to a single row in a table by accepting a content URI with an ID value for the row at the end of the URI.",
                    "Also by convention, providers match the ID value to the table's _ ID column, and perform the requested access against the row that matches.",
                    "This convention facilitates a common design pattern for apps accessing a provider.",
                    "The app does a query against the provider and displays the resulting Cursor in a ListView using a CursorAdapter.",
                    "The definition of CursorAdapter requires one of the columns in the Cursor to be _ ID",
                    "The user then picks one of the displayed rows from the UI in order to look at or modify the data.",
                    "The app gets the corresponding row from the Cursor backing the ListView, gets the _ ID value for this row, appends it to the content URI, and sends the access request to the provider.",
                    "The provider can then do the query or modification against the exact row the user picked.",
                    "To help you choose which action to take for an incoming content URI, the provider API includes the convenience class UriMatcher, which maps content URI `` patterns'' to integer values.",
                    "You can use the integer values in a switch statement that chooses the desired action for the content URI or URIs that match a particular pattern.",
                    "A content URI pattern matches content URIs using wildcard characters:",
                    "As an example of designing and coding content URI handling, consider a provider with the authority com.example.app.provider that recognizes the following content URIs pointing to tables:",
                    "The provider also recognizes these content URIs if they have a row ID appended to them, as for example content: / / com.example.app.provider / table3/1 for the row identified by 1 in table3.",
                    "The following content URI patterns would be possible:",
                    "The following code snippet shows how the methods in UriMatcher work.",
                    "This code handles URIs for an entire table differently from URIs for a single row, by using the content URI pattern content: / / <authority> / <path> for tables, and content: / / <authority> / <path> / <id> for single rows.",
                    "The method addURI ( ) maps an authority and path to an integer value.",
                    "The method match ( ) returns the integer value for a URI.",
                    "A switch statement chooses between querying the entire table, and querying for a single record:",
                    "Another class, ContentUris, provides convenience methods for working with the id part of content URIs.",
                    "The classes Uri and Uri.Builder include convenience methods for parsing existing Uri objects and building new ones.",
                    "The ContentProvider instance manages access to a structured set of data by handling requests from other applications.",
                    "All forms of access eventually call ContentResolver, which then calls a concrete method of ContentProvider to get access.",
                    "The abstract class ContentProvider defines six abstract methods that you must implement as part of your own concrete subclass.",
                    "All of these methods except onCreate ( ) are called by a client application that is attempting to access your content provider:",
                    "Notice that these methods have the same signature as the identically-named ContentResolver methods.",
                    "Your implementation of these methods should account for the following:",
                    "The ContentProvider.query ( ) method must return a Cursor object, or if it fails, throw an Exception.",
                    "If you are using an SQLite database as your data storage, you can simply return the Cursor returned by one of the query ( ) methods of the SQLiteDatabase class.",
                    "If the query does not match any rows, you should return a Cursor instance whose getCount ( ) method returns 0.",
                    "You should return null only if an internal error occurred during the query process.",
                    "If you aren't using an SQLite database as your data storage, use one of the concrete subclasses of Cursor.",
                    "For example, the MatrixCursor class implements a cursor in which each row is an array of Object.",
                    "With this class, use addRow ( ) to add a new row.",
                    "Remember that the Android system must be able to communicate the Exception across process boundaries.",
                    "Android can do this for the following exceptions that may be useful in handling query errors:",
                    "The insert ( ) method adds a new row to the appropriate table, using the values in the ContentValues argument.",
                    "If a column name is not in the ContentValues argument, you may want to provide a default value for it either in your provider code or in your database schema.",
                    "This method should return the content URI for the new row.",
                    "To construct this, append the new row's _ ID ( or other primary key ) value to the table's content URI, using withAppendedId ( ).",
                    "The delete ( ) method does not have to physically delete rows from your data storage.",
                    "If you are using a sync adapter with your provider, you should consider marking a deleted row with a `` delete'' flag rather than removing the row entirely.",
                    "The sync adapter can check for deleted rows and remove them from the server before deleting them from the provider.",
                    "The update ( ) method takes the same ContentValues argument used by insert ( ), and the same selection and selectionArgs arguments used by delete ( ) and ContentProvider.query ( ).",
                    "This may allow you to re-use code between these methods.",
                    "The Android system calls onCreate ( ) when it starts up the provider.",
                    "You should perform only fast-running initialization tasks in this method, and defer database creation and data loading until the provider actually receives a request for the data.",
                    "If you do lengthy tasks in onCreate ( ), you will slow down your provider's startup.",
                    "In turn, this will slow down the response from the provider to other applications.",
                    "The following two snippets demonstrate the interaction between ContentProvider.onCreate ( ) and Room.databaseBuilder ( ).",
                    "This snippet shows the implementation of ContentProvider.onCreate ( ) where the database object is built and handles to the data access objects are created:",
                    "The ContentProvider class has two methods for returning MIME types:",
                    "The getType ( ) method returns a String in MIME format that describes the type of data returned by the content URI argument.",
                    "The Uri argument can be a pattern rather than a specific URI ; in this case, you should return the type of data associated with content URIs that match the pattern.",
                    "For common types of data such as as text, HTML, or JPEG, getType ( ) should return the standard MIME type for that data.",
                    "A full list of these standard types is available on the IANA MIME Media Types website.",
                    "For content URIs that point to a row or rows of table data, getType ( ) should return a MIME type in Android's vendor-specific MIME format:",
                    "You supply the <name> and <type>.",
                    "The <name> value should be globally unique, and the <type> value should be unique to the corresponding URI pattern.",
                    "A good choice for <name> is your company's name or some part of your application's Android package name.",
                    "A good choice for the <type> is a string that identifies the table associated with the URI.",
                    "For example, if a provider's authority is com.example.app.provider, and it exposes a table named table1, the MIME type for multiple rows in table1 is:",
                    "For a single row of table1, the MIME type is:",
                    "If your provider offers files, implement getStreamTypes ( ).",
                    "The method returns a String array of MIME types for the files your provider can return for a given content URI.",
                    "You should filter the MIME types you offer by the MIME type filter argument, so that you return only those MIME types that the client wants to handle.",
                    "For example, consider a provider that offers photo images as files in.",
                    "If an application calls ContentResolver.getStreamTypes ( ) with the filter string image / * ( something that is an `` image'' ), then the ContentProvider.getStreamTypes ( ) method should return the array:",
                    "If the app is only interested in.",
                    "jpg files, then it can call ContentResolver.getStreamTypes ( ) with the filter string * / jpeg, and ContentProvider.getStreamTypes ( ) should return:",
                    "If your provider doesn't offer any of the MIME types requested in the filter string, getStreamTypes ( ) should return null.",
                    "A contract class is a public final class that contains constant definitions for the URIs, column names, MIME types, and other meta-data that pertain to the provider.",
                    "The class establishes a contract between the provider and other applications by ensuring that the provider can be correctly accessed even if there are changes to the actual values of URIs, column names, and so forth.",
                    "A contract class also helps developers because it usually has mnemonic names for its constants, so developers are less likely to use incorrect values for column names or URIs.",
                    "Since it's a class, it can contain Javadoc documentation.",
                    "Integrated development environments such as Android Studio can auto-complete constant names from the contract class and display Javadoc for the constants.",
                    "Developers can't access the contract class's class file from your application, but they can statically compile it into their application from a.",
                    "The ContactsContract class and its nested classes are examples of contract classes.",
                    "Permissions and access for all aspects of the Android system are described in detail in the topic Security and permissions.",
                    "The topic Data storage also described the security and permissions in effect for various types of storage.",
                    "In brief, the important points are:",
                    "If you want to use content provider permissions to control access to your data, then you should store your data in internal files, SQLite databases, or the `` cloud'' ( for example, on a remote server ), and you should keep files and databases private to your application.",
                    "All applications can read from or write to your provider, even if the underlying data is private, because by default your provider does not have permissions set.",
                    "To change this, set permissions for your provider in your manifest file, using attributes or child elements of the <provider> element.",
                    "You can set permissions that apply to the entire provider, or to certain tables, or even to certain records, or all three.",
                    "You define permissions for your provider with one or more <permission> elements in your manifest file.",
                    "To make the permission unique to your provider, use Java-style scoping for the android: name attribute.",
                    "For example, name the read permission com.example.app.provider.permission.READ _ PROVIDER.",
                    "The following list describes the scope of provider permissions, starting with the permissions that apply to the entire provider and then becoming more fine-grained.",
                    "More fine-grained permissions take precedence over ones with larger scope:",
                    "Consider the permissions you need to implement an email provider and app, when you want to allow an outside image viewer application to display photo attachments from your provider.",
                    "To give the image viewer the necessary access without requiring permissions, set up temporary permissions for content URIs for photos.",
                    "Design your email app so that when the user wants to display a photo, the app sends an intent containing the photo's content URI and permission flags to the image viewer.",
                    "The image viewer can then query your email provider to retrieve the photo, even though the viewer doesn't have the normal read permission for your provider.",
                    "To turn on temporary permissions, either set the android: grantUriPermissions attribute of the <provider> element, or add one or more <grant-uri-permission> child elements to your <provider> element.",
                    "If you use temporary permissions, you have to call Context.revokeUriPermission ( ) whenever you remove support for a content URI from your provider, and the content URI is associated with a temporary permission.",
                    "The attribute's value determines how much of your provider is made accessible.",
                    "If the attribute is set to true, then the system will grant temporary permission to your entire provider, overriding any other permissions that are required by your provider-level or path-level permissions.",
                    "If this flag is set to false, then you must add <grant-uri-permission> child elements to your <provider> element.",
                    "Each child element specifies the content URI or URIs for which temporary access is granted.",
                    "To delegate temporary access to an application, an intent must contain the FLAG_GRANT_READ_URI_PERMISSION or the FLAG_GRANT_WRITE_URI_PERMISSION flags, or both.",
                    "These are set with the setFlags ( ) method.",
                    "If the android: grantUriPermissions attribute is not present, it's assumed to be false.",
                    "Like Activity and Service components, a subclass of ContentProvider must be defined in the manifest file for its application, using the <provider> element.",
                    "The Android system gets the following information from the element:",
                    "Permissions and their corresponding attributes are described in more detail in the section Implementing Content provider permissions.",
                    "The attributes are fully documented in the dev guide topic for the <provider> element.",
                    "Applications can access a content provider indirectly with an Intent.",
                    "The application does not call any of the methods of ContentResolver or ContentProvider.",
                    "Instead, it sends an intent that starts an activity, which is often part of the provider's own application.",
                    "The destination activity is in charge of retrieving and displaying the data in its UI.",
                    "Depending on the action in the intent, the destination activity may also prompt the user to make modifications to the provider's data.",
                    "An intent may also contain `` extras'' data that the destination activity displays in the UI ; the user then has the option of changing this data before using it to modify the data in the provider.",
                    "You may want to use intent access to help ensure data integrity.",
                    "Your provider may depend on having data inserted, updated, and deleted according to strictly defined business logic.",
                    "If this is the case, allowing other applications to directly modify your data may lead to invalid data.",
                    "If you want developers to use intent access, be sure to document it thoroughly.",
                    "Explain to them why intent access using your own application's UI is better than trying to modify the data with their code.",
                    "Handling an incoming intent that wishes to modify your provider's data is no different from handling other intents.",
                    "You can learn more about using intents by reading the topic Intents and Intent Filters.",
                    "For sample code related to this page, refer to the Note Pad sample application.",
                    "For additional related information, refer to Calendar Provider.",
                    "Decide if you need a content provider.",
                    "You need to build a content provider if you want to provide one or more of the following features: You want to offer complex data or files to other applications.",
                    "You want to allow users to copy complex data from your app into other apps.",
                    "You want to provide custom search suggestions using the search framework.",
                    "You want to expose your application data to widgets.",
                    "You want to implement the AbstractThreadedSyncAdapter, CursorAdapter, or CursorLoader classes.",
                    "You want to offer complex data or files to other applications.",
                    "If you haven't done so already, read the topic Content provider basics to learn more about providers and how they work.",
                    "Design the raw storage for your data.",
                    "A content provider offers data in two ways: File data Data that normally goes into files, such as photos, audio, or videos.",
                    "Store the files in your application's private space.",
                    "In response to a request for a file from another application, your provider can offer a handle to the file.",
                    "`` Structured'' data Data that normally goes into a database, array, or similar structure.",
                    "Store the data in a form that's compatible with tables of rows and columns.",
                    "A row represents an entity, such as a person or an item in inventory.",
                    "A column represents some data for the entity, such a person's name or an item's price.",
                    "A common way to store this type of data is in an SQLite database, but you can use any type of persistent storage.",
                    "To learn more about the storage types available in the Android system, see the section Designing data storage.",
                    "Define a concrete implementation of the ContentProvider class and its required methods.",
                    "This class is the interface between your data and the rest of the Android system.",
                    "For more information about this class, see the section Implementing the ContentProvider class.",
                    "Define the provider's authority string, its content URIs, and column names.",
                    "If you want the provider's application to handle intents, also define intent actions, extras data, and flags.",
                    "Also define the permissions that you will require for applications that want to access your data.",
                    "You should consider defining all of these values as constants in a separate contract class ; later, you can expose this class to other developers.",
                    "For more information about content URIs, see the section Designing Content URIs.",
                    "For more information about intents, see the section Intents and Data Access.",
                    "Add other optional pieces, such as sample data or an implementation of AbstractThreadedSyncAdapter that can synchronize data between the provider and cloud-based data.",
                    "If you are working with structured data then consider either a relational database such as SQLite, or a non relational key-value datastore such as LevelDB.",
                    "If you are working with unstructured data such as audio, image, or video media then consider storing the data as files.",
                    "You can mix and match several different types of storage, and expose them using a single content provider if necessary.",
                    "The Android system can interact with the Room persistence library, which provides access to the SQLite database API that Android's own providers use to store table-oriented data.",
                    "To create a database using this library, instantiate a subclass of RoomDatabase, as described in the Room persistence library guide.",
                    "For storing file data, Android has a variety of file-oriented APIs.",
                    "To learn more about file storage, read the topic Data Storage.",
                    "If you're designing a provider that offers media-related data such as music or videos, you can have a provider that combines table data and files.",
                    "In rare cases, you might benefit from implementing more than one content provider for a single application.",
                    "For example, you might want to share some data with a widget using one content provider, and expose a different set of data for sharing with other applications.",
                    "For working with network-based data, use classes in java.net and android.net.",
                    "You can also synchronize network-based data to a local data store such as a database, and then offer the data as tables or files.",
                    "The Basic Sync Adapter sample application demonstrates this type of synchronization.",
                    "Table data should always have a `` primary key'' column that the provider maintains as a unique numeric value for each row.",
                    "You can use this value to link the row to related rows in other tables ( using it as a `` foreign key'' ).",
                    "Although you can use any name for this column, using BaseColumns.",
                    "_ ID is the best choice, because linking the results of a provider query to a ListView requires one of the retrieved columns to have the name _ ID.",
                    "If you want to provide bitmap images or other very large pieces of file-oriented data, store the data in a file and then provide it indirectly rather than storing it directly in a table.",
                    "If you do this, you need to tell users of your provider that they need to use a ContentResolver file method to access the data.",
                    "Use the Binary Large OBject ( BLOB ) data type to store data that varies in size or has a varying structure.",
                    "For example, you can use a BLOB column to store a protocol buffer or JSON structure.",
                    "*: Matches a string of any valid characters of any length.",
                    "#: Matches a string of numeric characters of any length.",
                    "content: / / com.example.app.provider / table1: A table called table1.",
                    "content: / / com.example.app.provider / table2/dataset1: A table called dataset1.",
                    "content: / / com.example.app.provider / table2/dataset2: A table called dataset2.",
                    "content: / / com.example.app.provider / table3: A table called table3.",
                    "All of these methods except onCreate ( ) can be called by multiple threads at once, so they must be thread-safe.",
                    "To learn more about multiple threads, see the topic Processes and Threads.",
                    "Avoid doing lengthy operations in onCreate ( ).",
                    "Defer initialization tasks until they are actually needed.",
                    "The section Implementing the onCreate ( ) method discusses this in more detail.",
                    "Although you must implement these methods, your code does not have to do anything except return the expected data type.",
                    "For example, you may want to prevent other applications from inserting data into some tables.",
                    "To do this, you can ignore the call to insert ( ) and return 0.",
                    "IllegalArgumentException ( You may choose to throw this if your provider receives an invalid content URI )",
                    "Subtype part: If the URI pattern is for a single row: android.cursor.item / If the URI pattern is for more than one row: android.cursor.dir /",
                    "If the URI pattern is for a single row: android.cursor.item /",
                    "If the URI pattern is for more than one row: android.cursor.dir /",
                    "<type> You supply the <name> and <type>.",
                    "By default, data files stored on the device's internal storage are private to your application and provider.",
                    "SQLiteDatabase databases you create are private to your application and provider.",
                    "By default, data files that you save to external storage are public and world-readable.",
                    "You can't use a content provider to restrict access to files in external storage, because other applications can use other API calls to read and write them.",
                    "The method calls for opening or creating files or SQLite databases on your device's internal storage can potentially give both read and write access to all other applications.",
                    "If you use an internal file or database as your provider's repository, and you give it `` world-readable'' or `` world-writeable'' access, the permissions you set for your provider in its manifest won't protect your data.",
                    "The default access for files and databases in internal storage is `` private'', and for your provider's repository you shouldn't change this.",
                    "android: grantUriPermissions: Temporary permission flag.",
                    "android: permission: Single provider-wide read/write permission.",
                    "android: readPermission: Provider-wide read permission.",
                    "android: writePermission: Provider-wide write permission.",
                    "android: enabled: Flag allowing the system to start the provider.",
                    "android: exported: Flag allowing other applications to use this provider.",
                    "android: initOrder: The order in which this provider should be started, relative to other providers in the same process.",
                    "android: multiProcess: Flag allowing the system to start the provider in the same process as the calling client.",
                    "android: process: The name of the process in which the provider should run.",
                    "android: syncable: Flag indicating that the provider's data is to be sync ` ed with data on a server.",
                    "android: icon: A drawable resource containing an icon for the provider.",
                    "The icon appears next to the provider's label in the list of apps in Settings > Apps > All.",
                    "android: label: An informational label describing the provider or its data, or both.",
                    "The label appears in the list of apps in Settings > Apps > All.",
                    ""
                ],
                "title": "Creating a content provider \u00a0|\u00a0 Android Developers"
            }
        ],
        "git": [
            {
                "link": "https://github.com/google/dagger/issues/671",
                "content": [
                    "Scoped generic class fails to build \u00b7 Issue # 671 \u00b7 google/dagger \u00b7 GitHub",
                    "Scoped generic class fails to build",
                    "The following fails to build:",
                    "However, when adding another @Inject element or removing scoping it succeeds:",
                    "The problem in the first case is that Dagger is overeager to use a single static factory instance for generating instances of scoped generic classes.",
                    "The text was updated successfully, but these errors were encountered:",
                    "@Reusable generic class fails to build",
                    "I guess all that's really missing in the generated code is a typecast to Provider to achieve erasure bliss.",
                    "Didn't spot it right away.",
                    "The issue does not occur with - source 1.8.",
                    "It does with - source 1.7.",
                    "Use a raw framework class to avoid Java 7's poor type inference when ...",
                    ""
                ],
                "title": "Scoped generic class fails to build \u00b7 Issue # 671 \u00b7 google/dagger \u00b7 GitHub"
            }
        ],
        "qa": [
            {
                "uid": "29923376",
                "link": "https://stackoverflow.com/questions/29923376",
                "title": "Dagger2 Custom Scopes : How do custom-scopes (@ActivityScope) actually work?",
                "answers": [
                    {
                        "uid": 29943741,
                        "score": 39,
                        "text": [
                            "Actually there is no magic.",
                            "Custom scope annotations are just annotations.",
                            "They can have any name.",
                            "First function of scopes is a way to tell Dagger compiler which scopes are allowed within scoped component.",
                            "That's why using @ActivityScope dependency in non-@ActivityScope component will fire a compilation error.",
                            "In fact components can declare many scopes -LRB- e.g. @ActivityScope and @UiScope -RRB- and Dagger will treat both of them as single scope - it's called scope aliasing.",
                            "For example, it's useful in multi module projects - when one Gradle module defines one scope with its Dagger modules and another Gradle module defines another scope, while both of them can be used as single aliased scope in some third Gradle module that defines Dagger component.",
                            "Second function is to limit number of instances allowed within scoped component.",
                            "There are several types of scopes supported:",
                            "Unscoped - when no annotation declared.",
                            "Unscoped dependency will have simple Provider generated without any caching and any instance of that dependency created in component will be new for every new injection -LRB- as in constructor, or in module provision method, or just as a field -RRB-.",
                            "Custom scope e.g. @ActivityScope annotation defined with @javax.",
                            "inject.Scope annotation - Dependencies declared with that scope with have caching Provider with double-check lock generated and only single instance will be created for it within component declared with the same scope and its creation will be thread safe.",
                            "Note that for every instance of component itself new instance of that dependency will be created.",
                            "Reusable scope - declared with @dagger.",
                            "Reusable annotation - Dependencies declared with that scope may be shared between different components through common parent component and will have caching Provider with single-check lock generated.",
                            "It is useful when dependency does not necessarily need to have single instance but may be shared for increased performance -LRB- less allocations -RRB- in single component or between components.",
                            "For more info on how scopes work refer to LINK and Dagger's generated code.",
                            "How to define the actual scope is your prerogative.",
                            "Define the livecycle of your scope component, when it's created and when it destroyed - this is your scope.",
                            "E.g. @ActivityScope is tied to Activity livecycle and defined like that:",
                            "So there is no magic.",
                            "Define your scopes by the semantics of using them.",
                            "You may also find useful LINK and LINK.",
                            "EDIT 14.10.2018 Expanded on scopes functions and types to eliminate ambiguity in previous answer."
                        ]
                    },
                    {
                        "uid": 33418219,
                        "score": 19,
                        "text": [
                            "It is worth noting that apparently Dagger2 creates a single instance per scoped provider in a module per component.",
                            "So in order to get a scoped provider in a module, you need to specify the scope for your module's provider method.",
                            "EDIT START: though generally, you don't need to instantiate your own implementations inside your modules, so you can actually just do this:",
                            "EDIT END",
                            "Afterwards, refer to Kirill's answer ; essentially a `` scope'' by itself only determines that it is a different scope from the other one.",
                            "Using component dependencies -LRB- or subcomponents -RRB- creates a subscope.",
                            "A component can depend on only one other scoped component."
                        ]
                    }
                ],
                "tags": [
                    "android",
                    "android-activity",
                    "scope",
                    "dagger-2"
                ]
            }
        ],
        "other": [
            {
                "link": "https://andrewlock.net/the-dangers-and-gotchas-of-using-scoped-services-when-configuring-options-in-asp-net-core",
                "type": "misc",
                "content": [
                    "Sponsored by MailBee.NET Objects -- send, receive and process email in.",
                    "October 23, 2018 in ASP.NET Core ASP.NET Core 2.0 ASP.NET Core 2.1 Configuration Dependency Injection ~ 10 min read.",
                    "The dangers and gotchas of using scoped services in IConfigureOptions",
                    "The configuration system in ASP.NET Core allows you to load key-value pairs from a wide variety of sources such as JSON files, Environment Variables, or Azure KeyVault.",
                    "The recommended way to consume those key-value pairs is to use strongly-typed classes using the Options pattern.",
                    "In this post I look at some of the problems you can run into with strong-typed settings.",
                    "In particular, I show how you can run into lifetime issues and captive dependencies if your configuration depends on other services, via the IConfigureOptions < > mechanism.",
                    "I start by providing a brief overview of strongly-typed configuration in ASP.NET Core and the difference between IOptions < > and IOptionsSnapshot < >.",
                    "I then describe how you can inject services when building your strongly-typed settings using IConfigureOptions < >.",
                    "Finally, I look at what happens if you try to use Scoped services with IConfigureOptions < >, the problems you can run into, and how to work around them.",
                    "tl ; dr ; If you need to use Scoped services inside IConfigureOptions < >, create a new scope using IServiceProvider.CreateScope ( ) and resolve the service directly.",
                    "Be aware that the service lives in its own scope, separate from the main scope associated with the request.",
                    "Strongly-typed settings in ASP.NET Core The most common approach to using strongly-typed settings in ASP.NET Core is to bind you key-value pair configuration values to a POCO object T in the ConfigureServices ( ) method of Startup.",
                    "Alternatively, you can provide a configuration Action <T> for your settings class T.",
                    "When an instance of your settings class T is requested, ASP.NET Core will apply each of the configuration steps in turn:",
                    "To access the configured MySettings object in your classes, you inject an instance of IOptions <MySettings> or IOptionsSnapshot <MySettings> into the constructor of the class that depends on them.",
                    "The configured settings object itself is available on the Value property:",
                    "It's important to note that order matters when configuring options.",
                    "When you inject an IOptions <MySettings> or IOptionsSnapshot <MySettings> in your app, each configuration method runs sequentially.",
                    "So for the ConfigureServices ( ) method shown previously, the MySettings object would first be bound to the MyConfig configuration section, and then the Action < > would be executed, overwriting the value of MyValue.",
                    "The difference between IOptions < > and IOptionsSnapshot < > In the previous example I showed an example of injecting an IOptions <T> instance into a controller.",
                    "The other way of accessing your settings is to inject an IOptionsSnapshot <T>.",
                    "As well as providing access to the configured strongly-typed options <T>, this interface provides several additional features compared to IOptions <T>:",
                    "Changes to the underlying IConfiguration object are honoured.",
                    "Has a Scoped lifecycle ( IOption < > s have a Singleton lifecycle ).",
                    "Named options I discussed named options in my previous post.",
                    "Named options allow you to register multiple instances of a strongly-typed settings class ( e.g. MySettings ), each with a different string name, for example:",
                    "You can then use IOptionsSnapshot <T> to retrieve these named options using the Get ( ) method:",
                    "Reloading strongly typed configuration with IOptionsSnapshot One of the most common uses of IOptionSnapshot < > is to enable automatic configuration reloading, without having to restart the application.",
                    "Some configuration providers, most notably the file-providers that load settings from JSON files etc, will automatically update the underlying key-value pairs that make up and IConfiguration object when the configuration file changes.",
                    "The MySettingssettings object associated with an IOptions <MySettings> instance won't change when you update the underlying configuration file.",
                    "The values are fixed the first time you access the IOptions <T>.",
                    "IOptionsSnapshot <T> re-runs the configuration steps for your strongly-typed settings objects once per request when the instance is requested.",
                    "So if a configuration file changes ( and hence the underlying IConfiguration changes ), the properties of the IOptionsSnapshot.Value instance will reflect those changes on the next request.",
                    "I discussed reloading of configuration values in more detail in a previous post.",
                    "Related to this, the IOptionsSnapshot <T> has a Scoped lifecycle, so for a single request you will use the same IOptionsSnapshot <T> instance throughout your application.",
                    "That means the strongly-typed configuration objects ( e.g. MySettings ) are constant within a given request, but may vary between requests.",
                    "Note: As the strongly-typed settings are re-built with every request, and the binding relies on reflection under the hood, you should bear performance in mind.",
                    "There is currently an open issue on GitHub to investigate performance.",
                    "I'll come back to the different lifecycles for IOptions < > and IOptionsSnapshot < > later, as well as the implications.",
                    "First, I'll describe another common question around strongly-typed settings - how can you use additional services to configure them ?",
                    "Using services during options configuration Configuring strongly-typed options with the Configure < > ( ) extension method is very common.",
                    "However, sometimes you need additional services to configure your strongly-typed settings.",
                    "For example, imagine that configuring your MySettings class requires loading values from the database using EF Core, or performing some complex operation that is encapsulated in a CalculatorService.",
                    "You can't access services you've registered in ConfigureServices ( ) from inside ConfigureServices ( ) itself, so you can't use the Configure < > ( ) method directly:",
                    "Instead of calling Configure <MySettings>, you can create a simple class to handle the configuration for you.",
                    "This class should implement IConfigureOptions <MySettings> and can use dependency injection to inject dependencies that you registered in ConfigureServices:",
                    "All that remains is to register the IConfigureOptions < > instance ( and its dependencies ) in Startup.ConfigureServices ( ):",
                    "When you inject an instance of IOptions <MySettings> into your controller, the MySettings instance will be configured based on the configuration section `` MyConfig'', followed by the configuration applied in ConfigureMySettingsOptions using the CalculatorService.",
                    "Using IConfigureOptions <T> makes it trivial to use other services and dependencies when configuring strongly-typed options.",
                    "Where things get tricky is if you need to use scoped dependencies, like an EF Core DbContext.",
                    "A slight detour: scoped dependencies in the ASP.NET Core DI container In order to understand the issue of using scoped dependencies in IConfigureOptions < > we need to take a short detour to look at how the DI container resolves instances of services.",
                    "For now I'm only going to think about Singleton and Scoped services, and will leave out Transient services.",
                    "Every ASP.NET Core application has a `` root'' IServiceProvider.",
                    "This is used to resolve Singleton services.",
                    "In addition to the root IServiceProvider it's also possible to create a new scope.",
                    "A scope ( implemented as IServiceScope ) has its own IServiceProvider.",
                    "You can resolve Scoped services from the scoped IServiceProvider ; when the scope is disposed, all disposable services created by the container will also be disposed.",
                    "In ASP.NET Core, a new scope is created for each request.",
                    "That means all the Scoped services for a given request are resolved from the same container, so the same instance of a Scoped service is used everywhere for a given request.",
                    "At the end of the request, the scope is disposed, along with all the resolved services.",
                    "Each request gets a new scope, so the Scoped services are isolated from one another.",
                    "In addition to the automatic scopes created each request, it's possible to create a new scope manually, using IServiceProvider.CreateScope ( ).",
                    "You can use this to safely resolve Scoped services outside the context of a request, for example after you've configured your application, but before you call IWebHost.Run ( ).",
                    "This can be useful when you need to do things like run EF Core migrations, for example.",
                    "But why would you need to create a scope outside the context of a request ?",
                    "Couldn't you just resolve the necessary dependencies directly from the root IServiceProvider ?",
                    "While that's technically possible, doing so is essentially a memory leak, as the Scoped services are not disposed, and effectively become Singletons !",
                    "This is sometimes called a `` captive dependency''.",
                    "By default, the ASP.NET Core framework checks for this error when running in the Development environment, and throws an InvalidOperationException at runtime.",
                    "In Production the guard rails are off, and you'll likely just get buggy behaviour.",
                    "Which brings us to the problem at hand - using Scoped services with IConfigureOptions <T> when you are configuring strongly-typed settings.",
                    "Scoped dependencies and IConfigureOptions: Here be dragons Lets consider a relatively common scenario: I want to load some of the configuration for my strongly-typed MySettings object from a database using EF Core.",
                    "As we're using EF Core, we'll need to use the DbContext, which is a Scoped service.",
                    "To simplify things slightly further for this demo, we'll imagine that the logic for loading from the database is encapsulated in a service, ValueService:",
                    "We'll imagine that the GetValue ( ) method fetches some configuration from the database, and we want to set that value on a MySettings object.",
                    "In our app, we might be using IOptions < > or IOptionsSnapshot < >, we're not sure yet.",
                    "As we need to use the ValueService to configure the strongly-typed settings MySettings, we know we'll need to use an IConfigureOptions < > implementation, which we'll call ConfigureMySettingsOptions.",
                    "Initially, we have two questions:",
                    "What lifecycle should we use to register the ConfigureMySettingsOptions instance ?",
                    "How should we resolve the Scoped ValueService inside the ConfigureMySettingsOptions instance ?",
                    "I'll explore the various possibilities in the following sections, showing basic implementations, and the implications of choosing each one.",
                    "For demonstration purposes, I'll create a simple Controller that returns the value set for IOptions <MySettings>:",
                    "Registering IConfigureOptions < > as Scoped, and injecting Scoped services The first option, and probably the easiest option on the face of it, is to inject the Scoped ValueService directly into the ConfigureMySettingsOptions instance:",
                    "Warning Don't use this code !",
                    "It causes a captive dependency / InvalidOperationException !",
                    "As we're injecting a Scoped service into ConfigureMySettingsOptions we must register ConfigureMySettingsOptions as a Scoped service - we can't register it as a Singleton service as we'd have a captive dependency issue:",
                    "Unfortunately, if we call our test ValuesController, we still get an InvalidOperationException, despite our best efforts:",
                    "The problem is that IOptions < > instances are registered as Singletons and take all of the registered IConfigureOptions < > instances as dependencies.",
                    "As we've registered our IConfigureOptions < > as a Scoped service, we have a captive dependency problem, so in the Development environment, ASP.NET Core throws an Exception to warn us.",
                    "Back to the drawing board.",
                    "Registering IConfigureOptions < > as Scoped, injecting Scoped services, and using IOptionsSnapshot < > One workaround to the captive dependency issue is to avoid using the Singleton IOptions <T> altogether.",
                    "As I discussed earlier, IOptionsSnapshot <T> is registered as a Scoped service, rather than a Singleton.",
                    "If we change our ValuesController to use IOptionsSnapshot < > instead:",
                    "then running the application doesn't cause a captive dependency, and we can hit the API multiple times:",
                    "One point to note is that the value of MySettings.MyValue changes with every request.",
                    "That's because we're re-building the MySettings object each request, and fetching a new Scoped instance of ValueService with each request.",
                    "Depending on your app, the approach of injecting Scoped services directly into IConfigureOptions < > and using IOptionsSnapshot < > might be ok.",
                    "Especially if you were going to use IOptionsSnapshot < > anyway to track configuration changes.",
                    "Personally, I don't think that's a great idea - it would just take someone who's unfamiliar with the restriction to use IOptions < >, and they'll get unexpected InvalidOperaionExceptions, or worse, captive dependencies in a Production environment !",
                    "This solution is even more unattractive if you don't actually need the change-tracking features ofIOptionsSnapshot ( and associated performance impact ).",
                    "In that case, you'll want to look behind door number 3 ... 3.",
                    "Creating a new scope in IConfigureOptions The alternative to directly injecting a ValueService into ConfigureMySettingsOptions is to manually create a new scope, and to resolve the ValueService instance directly from the IServiceProvider:",
                    "Inject the `` root'' IServiceProvider into the constructor of your IConfigureOptions < > class, and call CreateScope ( ) inside the Configure ( ) method.",
                    "This allows you to resolve the Scoped service, even though ConfigureMySettingsOptions is registered as a Singleton ( or Transient ):",
                    "Now you can inject IOptions <MySettings> into your ValuesController without fear of captive dependencies.",
                    "On the first request to ValuesController, ConfigureMySettings.Configure ( ) is invoked which creates a new scope, resolves the scoped service, sets the value of MyScopedValue, and then disposes the scope ( thanks to the using statement ).",
                    "On subsequent requests, the same MySettings object is returned, so it always has the same value:",
                    "In contrast, if you inject IOptionsSnapshot <MySettings> into ValuesController, MySettings is re-bound every request, and ConfigureMySettings.Configure ( ) is invoked on every request.",
                    "That gives you a new value every time:",
                    "Generally speaking, this gives you the best of both worlds - you can use both IOptions < > and IOptionsSnapshot < > as appropriate, and you don't have any captive dependency issues.",
                    "There's just one caveat to watch out for ... Watch your scopes You registered ValueService as a Scoped service, so ASP.NET Core uses the same instance of ValueService to satisfy all requests for a ValueService within a given scope.",
                    "In almost all cases, that means all instances of a Scoped service for a given request are the same.",
                    "However ... Our solution to the captive dependency problem was to create a new scope.",
                    "Even when we're building a Scoped object, e.g. an instance of IOptionsSnapshot < >, we always create a new Scope inside ConfigureMySettingsOptions.",
                    "Consequently, you will have two different instances of ValueService for a given request:",
                    "The ValueService instance associated with the scope we created in ConfigureMySettingsOptions.",
                    "The ValueService instance associated with the request's scope.",
                    "One way to visualise the issue is to inject ValueService directly into the controller, and compare its GetValue ( ) with the value set on MySettings.MyValue:",
                    "For each request, the value of _ service.GetValue ( ) is different to MySettings.MyValue, because the ValueService used to set MySettings.MyValue was a different instance that the one used in the rest of the request:",
                    "So is this something to worry about ?",
                    "Generally, I don't think so.",
                    "Strongly-typed settings are typically that, just settings and configuration.",
                    "I think it would be unusual to be in a situation where being in a different scope matters, but its worth bearing in mind.",
                    "One possible scenario I could imagine is where you're using a DbContext in your IConfigureOptions < > instance.",
                    "Given you're creating the DbContext out of the usual request scope, the DbContext wouldn't be subject to any session management services for handling SaveChanges ( ), or committing and rolling back transactions for example.",
                    "But then, writing to the database in the IConfigureOptions.Configure ( ) method seems like a bad idea anyway, so you're probably trying to force a square peg into a round hole at that point !",
                    "Summary In this post I provided an overview of how to use strongly-typed settings with ASP.NET Core.",
                    "In particular, I highlighted how IOptions < > is registered as Singleton service, while IOptionsSnapshot < > is registered as a Scoped service.",
                    "It's important to bear that difference in mind when using IConfigureOptions < > with Scoped services to configure your strongly-typed settings.",
                    "If you need to use Scoped services when implementing IConfigureOptions < >, you should inject an IServiceProvider into your class, and manually create a new scope to resolve the services.",
                    "Don't inject the services directly into your IConfigureOptions < > instance as you will end up with a captive dependency.",
                    "When using this approach you should be aware that the scope created in IConfigureOptions < > is distinct from the scope associated with the request.",
                    "Consequently, any services you resolve from it will be different instances to those resolved in the rest of your application",
                    "Previous Using multiple instances of strongly-typed settings with named options in.",
                    "Next Configuring named options using IConfigureNamedOptions and ConfigureAll",
                    "Please enable JavaScript to view the comments powered by Disqus.",
                    "Loading comments powered by Disqus, please wait ...",
                    "`` Sign'' by eltpics licesnsed under CC BY-NC 2.0",
                    "My new book ASP.NET Core in Action, Second Edition is available now !",
                    "NET 5.0, and is available as an eBook or paperback.",
                    "You even get a free copy of the first edition of ASP.NET Core in Action !",
                    "Stay up to the date with the latest posts !",
                    "Check your details and try again.",
                    "Check your email for confirmation.",
                    ""
                ],
                "title": "The dangers and gotchas of using scoped services in IConfigureOptions"
            }
        ]
    },
    "parsed": true
}