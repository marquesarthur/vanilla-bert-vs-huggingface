{
    "task": "how can i get the value of text view in recyclerview item?",
    "description": "This is my adapter for RecyclerView.\nHow can I get the value of deckName in another activity ?\nI want get this value and compare it with a string here:\nbut this code doesn't really work.",
    "type": "SO",
    "link": "https://stackoverflow.com/questions/42058050",
    "question_id": "42058050",
    "resources": {
        "api": [
            {
                "link": "https://developer.android.com/codelabs/basic-android-kotlin-training-recyclerview-scrollable-list",
                "type": "android",
                "content": [
                    "If you think about the apps you commonly use on your phone, almost every single app has at least one list.",
                    "The call history screen, the contacts app, and your favorite social media app all display a list of data.",
                    "As shown in the screenshot below, some of these apps display a simple list of words or phrases, where others display more complex items such as cards that include text and images.",
                    "No matter what the content is, displaying a list of data is one of the most common UI tasks in Android.",
                    "To help you build apps with lists, Android provides the RecyclerView.",
                    "RecyclerView is designed to be very efficient, even with large lists, by reusing, or recycling, the views that have scrolled off the screen.",
                    "When a list item is scrolled off the screen, RecyclerView reuses that view for the next list item about to be displayed.",
                    "That means, the item is filled with new content that scrolls onto the screen.",
                    "This RecyclerView behavior saves a lot of processing time and helps lists scroll more smoothly.",
                    "In the sequence shown below, you can see that one view has been filled with data, ABC.",
                    "After that view scrolls off the screen, RecyclerView reuses the view for new data, XYZ.",
                    "In this codelab, you will build the Affirmations app.",
                    "Affirmations is a simple app that displays ten positive affirmations as text in a scrolling list.",
                    "Then, in the follow-up codelab, you will take it a step further, add an inspiring image to each affirmation, and polish the app UI.",
                    "Before creating a new project, make sure that you are on Android Studio 4.1 or higher.",
                    "The next step in creating the Affirmations app is to add resources.",
                    "You will add the following to your project.",
                    "Note: In most production Android projects, you would retrieve the affirmations data from a database or from a server.",
                    "Networking and databases are beyond the scope of this codelab, so you will use a list of affirmations strings defined inside the app.",
                    "The strings.xml file should look like this when you're done.",
                    "Now that you have added string resources, you can reference them in your code as R.string.affirmation1 or R.string.affirmation2.",
                    "Organizing your code logically helps you and other developers understand, maintain, and extend it.",
                    "In the same way that you can organize paperwork into files and folders, you can organize your code into files and packages.",
                    "There are two ways in which you can make use of packages.",
                    "In the Affirmations app, in addition to importing Android and Kotlin classes, you will also organize your app into several packages.",
                    "Even when you don't have a lot of classes for your app, it is a good practice to use packages to group classes by functionality.",
                    "A package name can be anything, as long as it is globally unique ; no other published package anywhere can have the same name.",
                    "Because there are a very large number of packages, and coming up with random unique names is hard, programmers use conventions to make it easier to create and understand package names.",
                    "Here are some examples of predefined package names and their contents:",
                    "Note: While the names of packages ( and their arrangement in the Android Project window of Android Studio as a hierarchy of folders ) appear as a hierarchy, there is no actual hierarchy in the executable code.",
                    "Just like the numbering system of a library categorizes and organizes books, they are still all on the same shelf, and you can take out any of them.",
                    "In this task, you'll create a class called Affirmation.",
                    "An object instance of Affirmation represents one affirmation and contains the resource ID of the string with the affirmation.",
                    "When you create an instance of Affirmation, you need to pass in the resource ID for the affirmation string.",
                    "The resource ID is an integer.",
                    "Data displayed in your app may come from different sources ( e.g. within your app project or from an external source that requires connecting to the internet to download data ).",
                    "As a result, data may not be in the exact format that you need.",
                    "The rest of the app should not concern itself with where the data originates from or in what format it is originally.",
                    "You can and should hide away this data preparation in a separate Datasource class that prepares the data for the app.",
                    "Since preparing data is a separate concern, put the Datasource class in a separate data package.",
                    "The loadAffirmations ( ) function needs to return a list of Affirmations.",
                    "You do this by creating a list and populating it with an Affirmation instance for each resource string.",
                    "To verify that you can create a list of affirmations, you can call loadAffirmations ( ) and display the size of the returned list of affirmations in the TextView that comes with your Empty Activity app template.",
                    "In this task, you will set up a RecyclerView to display the list of Affirmations.",
                    "There are a number of pieces involved in creating and using a RecyclerView.",
                    "You can think of them as a division of labor.",
                    "The diagram below shows an overview, and you will learn more about each piece as you implement it.",
                    "The Affirmations app consists of a single activity named MainActivity, and its layout file is called activity_main.xml.",
                    "First, you need to add the RecyclerView to the layout of the MainActivity.",
                    "The current layout uses ConstraintLayout.",
                    "ConstraintLayout is ideal and flexible when you want to position multiple child views in a layout.",
                    "Since your layout only has a single child view, RecyclerView, you can switch to a simpler ViewGroup called FrameLayout that should be used for holding a single child view.",
                    "RecyclerView supports displaying items in different ways, such as a linear list or a grid.",
                    "Arranging the items is handled by a LayoutManager.",
                    "The Android framework provides layout managers for basic item layouts.",
                    "The Affirmations app displays items as a vertical list, so you can use the LinearLayoutManager.",
                    "To be able to scroll through a vertical list of items that is longer than the screen, you need to add a vertical scrollbar.",
                    "The final XML layout should look like the following:",
                    "The project should compile and run without any issues.",
                    "However, only a white background is displayed in your app because you are missing a crucial piece of code.",
                    "Right now, you have the source of data and the RecyclerView added to your layout, but the RecyclerView has no information on how to display the Affirmation objects.",
                    "Your app needs a way to take the data from Datasource, and format it so that each Affirmation can be displayed as an item in the RecyclerView.",
                    "Adapter is a design pattern that adapts the data into something that can be used by RecyclerView.",
                    "In this case, you need an adapter that takes an Affirmation instance from the list returned by loadAffirmations ( ), and turns it into a list item view, so that it can be displayed in the RecyclerView.",
                    "When you run the app, RecyclerView uses the adapter to figure out how to display your data on screen.",
                    "RecyclerView asks the adapter to create a new list item view for the first data item in your list.",
                    "Once it has the view, it asks the adapter to provide the data to draw the item.",
                    "This process repeats until the RecyclerView doesn't need any more views to fill the screen.",
                    "If only 3 list item views fit on the screen at once, the RecyclerView only asks the adapter to prepare those 3 list item views ( instead of all 10 list item views ).",
                    "In this step, you'll build an adapter which will adapt an Affirmation object instance so that it can be displayed in the RecyclerView.",
                    "An adapter has multiple parts, and you'll be writing quite a bit of code that's more complex than what you've done in this course so far.",
                    "It's okay if you don't fully understand the details at first.",
                    "Once you have completed this whole app with a RecyclerView, you'll be able to better understand how all the parts fit together.",
                    "You'll also be able to reuse this code as a base for future apps that you create with a RecyclerView.",
                    "Each item in the RecyclerView has its own layout, which you define in a separate layout file.",
                    "Since you are only going to display a string, you can use a TextView for your item layout.",
                    "Notice that you don't need a ViewGroup around your layout, because this list item layout will later be inflated and added as a child to the parent RecyclerView.",
                    "Alternatively, you could have used File > New > Layout Resource File, with File name list_item.xml and TextView as the Root element.",
                    "Then update the generated code to match the code above.",
                    "You need to add a parameter to the constructor of ItemAdapter, so that you can pass the list of affirmations into the adapter.",
                    "The ItemAdapter needs information on how to resolve the string resources.",
                    "This, and other information about the app, is stored in a Context object instance that you can pass into an ItemAdapter instance.",
                    "RecyclerView doesn't interact directly with item views, but deals with ViewHolders instead.",
                    "A ViewHolder represents a single list item view in RecyclerView, and can be reused when possible.",
                    "A ViewHolder instance holds references to the individual views within a list item layout ( hence the name `` view holder'' ).",
                    "This makes it easier to update the list item view with new data.",
                    "View holders also add information that RecyclerView uses to efficiently move views around the screen.",
                    "You will see an error because you need to implement some abstract methods from RecyclerView.Adapter.",
                    "This creates stubs with the correct parameters for the three methods as shown below.",
                    "You should see no more errors.",
                    "Next you need to implement those methods so that they do the correct things for your app.",
                    "The getItemCount ( ) method needs to return the size of your dataset.",
                    "Your app's data is in the dataset property that you are passing into the ItemAdapter constructor, and you can get its size with size.",
                    "It's a more concise way of writing this:",
                    "The onCreateViewHolder ( ) method is called by the layout manager to create new view holders for the RecyclerView ( when there are no existing view holders that can be reused ).",
                    "Remember that a view holder represents a single list item view.",
                    "The onCreateViewHolder ( ) method takes two parameters and returns a new ViewHolder.",
                    "Now adapterLayout holds a reference to the list item view ( from which we can later find",
                    "child views like the TextView ).",
                    "Here is the code for onCreateViewHolder ( ) so far.",
                    "The last method you need to override is onBindViewHolder ( ).",
                    "This method is called by the layout manager in order to replace the contents of a list item view.",
                    "The onBindViewHolder ( ) method has two parameters, an ItemViewHolder previously created by the onCreateViewHolder ( ) method, and an int that represents the current item position in the list.",
                    "In this method, you will find the right Affirmation object from the data set based on position.",
                    "Finally, you need to update all the views referenced by the view holder to reflect the correct data for this item.",
                    "In this case, there is only one view: the TextView within ItemViewHolder.",
                    "Set the text of the TextView to display the Affirmation string for this item.",
                    "In the Android framework, you can call getString ( ) with a string resource ID, and it will return the string value associated with it.",
                    "getString ( ) is a method in the Resources class, and you can get an instance of the Resources class through the context.",
                    "That means you can call context.resources.getString ( ) and pass in a string resource ID.",
                    "The resulting string can be set as the text of the textView in the holder ItemViewHolder.",
                    "In short, this line of code updates the view holder to show the affirmation string.",
                    "The completed onBindViewHolder ( ) method should look like this.",
                    "Here is the finished adapter code.",
                    "Now that you've implemented the ItemAdapter, you need to tell the RecyclerView to use this adapter.",
                    "To finish, you need to use your Datasource and ItemAdapter classes to create and display items in the RecyclerView.",
                    "You do this in MainActivity.",
                    "You've just created an app that displays a list of data with RecyclerView and a custom adapter.",
                    "Take some time to look over the code you created, and understand how the different pieces work together.",
                    "This app has all the required pieces to display your affirmations, but it's not quite ready for production.",
                    "The UI could use some improvement.",
                    "In the next codelab, you'll improve your code, learn how to add images to the app, and polish the UI.",
                    "The solution code for this codelab is in the project and module shown below.",
                    "Note that some of the Kotlin files are in different packages, as indicated by the package statement at the start of the file.",
                    "src/main/res / layout/activty _ main.xml",
                    "src/main/res / layout/list _ item.xml",
                    "Create a project from a template in Android Studio.",
                    "Add string resources to an app.",
                    "Define a layout in XML.",
                    "Understand classes and inheritance in Kotlin ( including abstract classes ).",
                    "Inherit from an existing class and override its methods.",
                    "Use the documentation on developer.android.com for classes provided by the Android framework.",
                    "How to use a RecyclerView to display a list of data.",
                    "How to organize your code into packages",
                    "How to use adapters with RecyclerView to customize how an individual list item looks.",
                    "An app that displays a list of affirmation strings using a RecyclerView.",
                    "A computer with Android Studio version 4.1 or higher installed.",
                    "Start a new Kotlin project in Android Studio using the Empty Activity template.",
                    "Enter Affirmations as the app Name, com.example.affirmations as the Package name, and choose API Level 19 as the Minimum SDK.",
                    "Click Finish to create the project.",
                    "String resources to display as affirmations in the app.",
                    "A source of data to provide a list of affirmations to your app.",
                    "In the Project window, open app > res > values > strings.xml.",
                    "This file currently has a single resource which is the name of the app.",
                    "In strings.xml, add the following affirmations as individual string resources.",
                    "Name them affirmation1, affirmation2, and so on.",
                    "In Android Studio, in the Project window ( Android ), take a look at your new project files under app > java for the Affirmations app.",
                    "They should look similar to the screenshot below, which shows three packages, one for your code ( com.example.affirmations ), and two for test files ( com.example.affirmations ( androidTest ) and com.example.affirmations ( test ) ).",
                    "Notice that the name of the package consists of several words separated by a period.",
                    "Create different packages for different parts of your code.",
                    "For example, developers will often separate the classes that work with data and the classes that build the UI into different packages.",
                    "Use code from other packages in your code.",
                    "In order to use the classes from other packages, you need to define them in your build system's dependencies.",
                    "It's also a standard practice to import them in your code so you can use their shortened names ( eg, TextView ) instead of their fully-qualified names ( eg, android.widget.TextView ).",
                    "For example, you have already used import statements for classes such as sqrt ( import kotlin.math.sqrt ) and View ( import android.view.View ).",
                    "The package name is usually structured from general to specific, with each part of the name in lowercase letters and separated by a period.",
                    "Important: The period is just part of the name.",
                    "It does not indicate a hierarchy in code or mandate a folder structure !",
                    "Because internet domains are globally unique, it is a convention to use a domain, usually yours or the domain of your business, as the first part of the name.",
                    "You can choose the names of packages to indicate what's inside the package, and how packages are related to each other.",
                    "For code examples like this one, com.example followed by the name of the app is commonly used.",
                    "kotlin.math - Mathematical functions and constants.",
                    "android.widget - Views, such as TextView.",
                    "In Android Studio, in the Project pane, right-click app > java > com.example.affirmations and select New > Package.",
                    "In the New Package popup, notice the suggested package name prefix.",
                    "The suggested first part of the package name is the name of the package you right-clicked.",
                    "While package names do not create a hierarchy of packages, reusing parts of the name is used to indicate a relationship and organization of the content !",
                    "In the popup, append model to the end of the suggested package name.",
                    "Developers often use model as the package name for classes that model ( or represent ) the data.",
                    "This creates a new package under the com.example.affirmations ( root ) package.",
                    "This new package will contain any data-related classes defined in your app.",
                    "Right-click on the com.example.affirmations.model package and select New > Kotlin File/Class.",
                    "In the popup, select Class and enter Affirmation as the name of the class.",
                    "This creates a new file called Affirmation.kt in the model package.",
                    "Make Affirmation a data class by adding the data keyword before the class definition.",
                    "This leaves you with an error, because data classes must have at least one property defined.",
                    "Add a val integer parameter stringResourceId to the constructor of the Affirmation class.",
                    "This gets rid of your error.",
                    "In Android Studio, in the Project window, right-click app > java > com.example.affirmations and select New > Package.",
                    "Enter data as the last part of the package name.",
                    "Right click on the data package and select new Kotlin File/Class.",
                    "Enter Datasource as the class name.",
                    "Inside the Datasource class, create a function called loadAffirmations ( ).",
                    "Declare List <Affirmation> as the return type of the method loadAffirmations ( ).",
                    "In the body of loadAffirmations ( ), add a return statement.",
                    "After the return keyword, call listOf < > ( ) to create a List.",
                    "Inside the angle brackets < >, specify the type of the list items as Affirmation.",
                    "Inside the parentheses, create an Affirmation, passing in R.string.affirmation1 as the resource ID as shown below.",
                    "Add the remaining Affirmation objects to the list of all affirmations, separated by commas.",
                    "The finished code should look like the following.",
                    "In layouts/activity_main.xml, give the TextView that comes with your template an id of textview.",
                    "In MainActivity in the onCreate ( ) method after the existing code, get a reference to textview.",
                    "Then add code to create and display the size of the affirmations list.",
                    "Create a Datasource, call loadAffirmations ( ), get the size of the returned list, convert it to a string, and assign it as the text of textView.",
                    "The screen should look as shown below.",
                    "Delete the code you just added in MainActivity.",
                    "item - One data item of the list to display.",
                    "Represents one Affirmation object in your app.",
                    "Adapter - Takes data and prepares it for RecyclerView to display.",
                    "ViewHolders - A pool of views for RecyclerView to use and reuse to display affirmations.",
                    "RecyclerView - Views on screen",
                    "Open activity_main.xml ( app > res > layout > activity_main.xml )",
                    "If you are not already using it, switch to Split view.",
                    "In the XML, replace ConstraintLayout with FrameLayout.",
                    "The completed layout should look as shown below.",
                    "In the Palette, select Containers, and find the RecyclerView.",
                    "Drag a RecyclerView into the layout.",
                    "If it appears, read the Add Project Dependency popup and click OK.",
                    "( If the popup doesn't appear, no action is needed. )",
                    "Wait for Android Studio to finish and the RecyclerView to appear in your layout.",
                    "If necessary, change the layout_width and layout_height attributes of the RecyclerView to match_parent so that the RecyclerView can fill the whole screen.",
                    "Set the resource ID of the RecyclerView to recycler_view.",
                    "Switch back to Code view.",
                    "In the XML code, inside the RecyclerView element, add LinearLayoutManager as the layout manager attribute of the RecyclerView, as shown below.",
                    "Inside RecyclerView, add an android: scrollbars attribute set to vertical.",
                    "In res > layout, create a new empty File called list_item.xml.",
                    "Open list_item.xml in Code view.",
                    "Add a TextView with id item_title.",
                    "Add wrap_content for the layout_width and layout_height, as shown in the code below.",
                    "In Android Studio in the Project pane, right-click app > java > com.example.affirmations and select New > Package.",
                    "Enter adapter as the last part of the package name.",
                    "Right-click on the adapter package and select New > Kotlin File/Class.",
                    "Enter ItemAdapter as the class name, finish, and the ItemAdapter.kt file opens.",
                    "Add a parameter to the ItemAdapter constructor that is a val called dataset of type List <Affirmation>.",
                    "Since the dataset will be only used within this class, make it private.",
                    "Add a parameter to the ItemAdapter constructor that is a val called context of type Context.",
                    "Position it as the first parameter in the constructor.",
                    "Inside the ItemAdapter class, before the closing curly brace for ItemAdapter, create an ItemViewHolder class.",
                    "Defining a class inside another class is called creating a nested class.",
                    "Since ItemViewHolder is only used by ItemAdapter, creating it inside ItemAdapter shows this relationship.",
                    "This is not mandatory, but it helps other developers understand the structure of your program.",
                    "Add a private val view of type View as a parameter to the ItemViewHolder class constructor.",
                    "Make ItemViewHolder a subclass of RecyclerView.",
                    "ViewHolder and pass the view parameter into the superclass constructor.",
                    "Inside ItemViewHolder, define a val property textView that is of type TextView.",
                    "Assign it the view with the ID item_title that you defined in list_item.xml.",
                    "Add the code to extend your ItemAdapter from the abstract class RecyclerView.Adapter.",
                    "Specify ItemAdapter.ItemViewHolder as the view holder type in angle brackets.",
                    "Put your cursor on ItemAdapter and press Command + I ( Control + I on Windows ).",
                    "This shows you the list of methods you need to implement: getItemCount ( ), onCreateViewHolder ( ), and onBindViewHolder ( ).",
                    "Select all three functions using Shift + click and click OK.",
                    "Replace getItemCount ( ) with this:",
                    "A parent parameter, which is the view group that the new list item view will be attached to as a child.",
                    "The parent is the RecyclerView.",
                    "A viewType parameter which becomes important when there are multiple item view types in the same RecyclerView.",
                    "If you have different list item layouts displayed within the RecyclerView, there are different item view types.",
                    "You can only recycle views with the same item view type.",
                    "In your case, there is only one list item layout and one item view type, so you don't have to worry about this parameter.",
                    "In the onCreateViewHolder ( ) method, obtain an instance of LayoutInflater from the provided context ( context of the parent ).",
                    "The layout inflater knows how to inflate an XML layout into a hierarchy of view objects.",
                    "Once you have a LayoutInflater object instance, add a period followed by another method call to inflate the actual list item view.",
                    "Pass in the XML layout resource ID R.layout.list _ item and the parent view group.",
                    "The third boolean argument is attachToRoot.",
                    "This argument needs to be false, because RecyclerView adds this item to the view hierarchy for you when it's time.",
                    "In onCreateViewHolder ( ), return a new ItemViewHolder instance where the root view is adapterLayout.",
                    "Inside onBindViewHolder ( ), create a val item and get the item at the given position in the dataset.",
                    "With an Affirmation object instance, you can find the corresponding string resource ID by calling item.stringResourceId.",
                    "However, this is an integer and you need to find the mapping to the actual string value.",
                    "In MainActivity, go to the onCreate ( ) method.",
                    "Insert the new code described in the following steps after the call to setContentView ( R.layout.activity _ main ).",
                    "Create an instance of Datasource, and call the loadAffirmations ( ) method on it.",
                    "Store the returned list of affirmations in a val named myDataset.",
                    "Create a variable called recyclerView and use findViewById ( ) to find a reference to the RecyclerView within the layout.",
                    "To tell the recyclerView to use the ItemAdapter class you created, create a new ItemAdapter instance.",
                    "ItemAdapter expects two parameters: the context ( this ) of this activity, and the affirmations in myDataset.",
                    "Assign the ItemAdapter object to the adapter property of the recyclerView.",
                    "Since the layout size of your RecyclerView is fixed in the activity layout, you can set the setHasFixedSize parameter of the RecyclerView to true.",
                    "This setting is only needed to improve performance.",
                    "Use this setting if you know that changes in content do not change the layout size of the RecyclerView.",
                    "When you are done, the code for MainActivity should be similar to the following.",
                    "You should see a list of affirmation strings displayed on screen.",
                    "RecyclerView widget helps you display a list of data.",
                    "RecyclerView uses the adapter pattern to adapt and display the data.",
                    "ViewHolder creates and holds the views for RecyclerView.",
                    "RecyclerView comes with built in LayoutManagers.",
                    "RecyclerView delegates how items are laid out to LayoutManagers.",
                    "Create a new class for the adapter, for example, ItemAdapter.",
                    "Create a custom ViewHolder class that represents a single list item view.",
                    "Modify the ItemAdapter class to extend from the RecyclerView.Adapter class with the custom ViewHolder class.",
                    "Implement these methods within the adapter: getItemsCount ( ), onCreateViewHolder ( ), and onBindViewHolder ( ).",
                    "Create a list with RecyclerView",
                    "Enhance your UI with MaterialCardView and images",
                    ""
                ],
                "title": "Use RecyclerView to display a scrollable list \u00a0|\u00a0 Android Developers"
            }
        ],
        "git": [
            {
                "link": "https://github.com/noties/Markwon/issues/90",
                "content": [
                    "Use in a recyclerview item \u00b7 Issue # 90 \u00b7 noties/Markwon \u00b7 GitHub",
                    "Use in a recyclerview item",
                    "Hi, this is a very cool work and I love it.",
                    "Is it safe performance-wise to use in a recyclerview item ?",
                    "The text was updated successfully, but these errors were encountered:",
                    "Generally speaking: yes, it is safe.",
                    "But there is one point that should be considered:",
                    "use textView #setSpannableFactory on a TextView that is used in adapter",
                    "Other than that follow the regular steps when working with a RecyclerView and TextView:",
                    "cache as much as possible",
                    "for example, you can parse and create markdown CharSequence before sending to an adapter ( by calling Markwon.markdown ( configuration, markdown ).",
                    "if you evaluating markdown lazily ( parsing when the first time item is requested ), do not forget to cache SpannableConfiguration and Parser ( when not specified explicitly these 2 classes will be created implicitly anyway ) and re-use them between calls",
                    "if you are still not happy with performance you can try relatively new thing called prefetch text ( quick search will get you some results )",
                    "Great !",
                    "Very well explained, Thanks",
                    ""
                ],
                "title": "Use in a recyclerview item \u00b7 Issue # 90 \u00b7 noties/Markwon \u00b7 GitHub"
            }
        ],
        "qa": [
            {
                "uid": "37096547",
                "link": "https://stackoverflow.com/questions/37096547",
                "title": "How to get data from Edit Text in a RecyclerView?",
                "answers": [
                    {
                        "uid": 37096844,
                        "score": 2,
                        "text": [
                            "To do this there are two ways: -",
                            "1 -RRB- Add save Button in each row of RecyclerView on this Button click -LRB- onClick -RRB-",
                            "2 -RRB- Add onTextChangedListener to EditText",
                            "Then in your MainActivity.java retrive data from sharedpreferences or database"
                        ]
                    },
                    {
                        "uid": 37097190,
                        "score": 17,
                        "text": [
                            "You don't need to use so many lists, just create a class that will contain all the data of single item, there is no need for buttons, use just text change listener instead.",
                            "sample code"
                        ]
                    },
                    {
                        "uid": 50483688,
                        "score": 0,
                        "text": [
                            "I had a similar problem.My Recyclerview contained one Textview, two EditTexts and one remove Button to remove the item from the Recyclerview.",
                            "I am getting the data from both the Edittexts, from a model class using a button from my activity.",
                            "Everything works well I just want to know what all optimizations I can make.",
                            "Please give your suggestions in a detailed manner.",
                            "My Model Class:",
                            "Above class holds the three Strings one is the titile and the two hold the edittext data.",
                            "My Adapter code:",
                            "In the adapter I am using two arraylists rtyArray and qtyArray to hold the position of the Edittext data in the model class.",
                            "The above two functions return the positions of the Edittextdata",
                            "My Activity:",
                            "In my case both the position holding arrays are always equal in size."
                        ]
                    }
                ],
                "tags": [
                    "android",
                    "android-edittext",
                    "android-recyclerview"
                ]
            }
        ],
        "other": [
            {
                "link": "https://medium.com/swlh/create-recyclerview-in-android-fragment-c0f0b151125f",
                "type": "misc",
                "content": [
                    "Sign inEditor's PicksTop 10 StoriesStart it up T\u0336h\u0336e\u0336 \u0336S\u0336t\u0336a\u0336r\u0336t\u0336u\u0336p\u0336Straight into your inbox",
                    "Editor's PicksTop 10 StoriesStart it up T\u0336h\u0336e\u0336 \u0336S\u0336t\u0336a\u0336r\u0336t\u0336u\u0336p\u0336Straight into your inbox",
                    "Create RecyclerView in Android FragmentJames LiuFollowApr 26, 2020 \u00b7 4 min readAndroid Official Documentation provided a tutorial for creating a RecyclerView in Activity.",
                    "However, it is a bit different when trying to create a RecyclerView in Fragment instead.",
                    "Create RecyclerView in Android FragmentJames LiuFollowApr 26, 2020 \u00b7 4 min read",
                    "James LiuFollowApr 26, 2020 \u00b7 4 min read",
                    "Step 1: Create a Basic Activity ProjectOpen Android Studio, Create new project - > select Basic Activity - > Finish Application creation.",
                    "Once you run the app on emulator, you will see a single activity application with a button which allows you to switch between two fragments.Step 2: Create a RecyclerView resourceWe are going to create a RecyclerView resource in SecondFragment.",
                    "Go to / res/layout/fragment_second.xml, add the following lines to create RecyclerView: Alternatively, we can also use Palette in Android Studio to create RecyclerView: Drag RecyclerView from Palette to Layout in fragment_second.xml ( using Design view ).",
                    "Define RecyclerView id as ` recyclerview `.",
                    "Since this is created under ConstraintLayout, define Constraint Widget in 4 directions under Layout.Step 3: Create a FrameLayout with TextViewAfter creating RecyclerView, we need to define resource for each item ( TextView ) in RecyclerView.",
                    "Create a new file under / res/layout /: frame_textview.",
                    "xml: Copy the following lines to this new file.Alternatively, you can also use Palette to create TextViewDrag TextView from Palette to Layout in frame_textview.xml ( using Design view ).",
                    "Define TextView id as ` randomText `",
                    "The StartupGet smarter at building your thing.",
                    "Join The Startup's +783 K followers.Follow",
                    "Get smarter at building your thing.",
                    "Join The Startup's +783 K followers.",
                    "Sign up for Top 10 StoriesBy The StartupGet smarter at building your thing.",
                    "Subscribe to receive The Startup's top 10 most read stories -- delivered straight into your inbox, once a week.",
                    "Take a look.Get this newsletterBy signing up, you will create a Medium account if you don't already have one.",
                    "Review our Privacy Policy for more information about our privacy practices.Check your inboxMedium sent you an email at to complete your subscription.AndroidRecyclerviewJavaProgrammingAndroid Developers50 claps50 claps2 responsesWritten byJames LiuFollowReverse EngineeringFollowThe StartupFollowGet smarter at building your thing.",
                    "Follow to join The Startup's +8 million monthly readers & +783 K followers.FollowWritten byJames LiuFollowReverse EngineeringThe StartupFollowGet smarter at building your thing.",
                    "Follow to join The Startup's +8 million monthly readers & +783 K followers.More From MediumDo You Speak-A My Language ?!",
                    "Greg PerryFlutter fast dependency injection!Rod Brown in Flutter CommunityHow to Dynamically Change an Android View's StyleElye in Mobile App Development PublicationFlutter Push notification from Laravel Admin PanelPRAMOD YADAVClean MVVM Activity LifecycleEric Silverberg in Perry Street Software EngineeringSaying Hello from React-NativeKenny Marks in The StartupLocal development and testing with FakeSplitInstallManagerWojtek Kalici\u0144ski in Android DevelopersKotlin Coroutines: The Suspend FunctionRechee Jozil in Microsoft Mobile Engineering",
                    "Review our Privacy Policy for more information about our privacy practices.Check your inboxMedium sent you an email at to complete your subscription.AndroidRecyclerviewJavaProgrammingAndroid Developers50 claps50 claps2 responses",
                    "Review our Privacy Policy for more information about our privacy practices.Check your inboxMedium sent you an email at to complete your subscription.",
                    ""
                ],
                "title": "Create RecyclerView in Android Fragment | The Startup"
            },
            {
                "link": "https://guides.codepath.com/android/using-the-recyclerview",
                "type": "misc",
                "content": [
                    "It is supposed to be the successor of ListView and GridView.",
                    "One of the reasons is that RecyclerView has a more extensible framework, especially since it provides the ability to implement both horizontal and vertical layouts.",
                    "Use the RecyclerView widget when you have data collections whose elements change at runtime based on user action or network events.",
                    "If you want to use a RecyclerView, you will need to work with the following:",
                    "RecyclerView.Adapter - To handle the data collection and bind it to the view",
                    "LayoutManager - Helps in positioning the items",
                    "ItemAnimator - Helps with animating the items for common operations such as Addition or Removal of item",
                    "Furthermore, it provides animation support for RecyclerView items whenever they are added or removed, which had been extremely difficult to do with ListView.",
                    "RecyclerView also begins to enforce the ViewHolder pattern too, which was already a recommended practice but now deeply integrated with this new framework.",
                    "For more details, see this detailed overview.",
                    "Compared to ListView RecyclerView differs from its predecessor ListView primarily because of the following features:",
                    "Required ViewHolder in Adapters - ListView adapters do not require the use of the ViewHolder pattern to improve performance.",
                    "In contrast, implementing an adapter for RecyclerView requires the use of the ViewHolder pattern for which it uses RecyclerView.Viewholder.",
                    "Customizable Item Layouts - ListView can only layout items in a vertical linear arrangement and this can not be customized.",
                    "In contrast, the RecyclerView has a RecyclerView.LayoutManager that allows any item layouts including horizontal lists or staggered grids.",
                    "Easy Item Animations - ListView contains no special provisions through which one can animate the addition or deletion of items.",
                    "In contrast, the RecyclerView has the RecyclerView.ItemAnimator class for handling item animations.",
                    "Manual Data Source - ListView had adapters for different sources such as ArrayAdapter and CursorAdapter for arrays and database results respectively.",
                    "In contrast, the RecyclerView.Adapter requires a custom implementation to supply the data to the adapter.",
                    "Manual Item Decoration - ListView has the android: divider property for easy dividers between items in the list.",
                    "In contrast, RecyclerView requires the use of a RecyclerView.ItemDecoration object to setup much more manual divider decorations.",
                    "Manual Click Detection - ListView has a AdapterView.OnItemClickListener interface for binding to the click events for individual items in the list.",
                    "In contrast, RecyclerView only has support for RecyclerView.OnItemTouchListener which manages individual touch events but has no built-in click handling.",
                    "LayoutManagers A RecyclerView needs to have a layout manager and an adapter to be instantiated.",
                    "A layout manager positions item views inside a RecyclerView and determines when to reuse item views that are no longer visible to the user.",
                    "RecyclerView provides these built-in layout managers:",
                    "LinearLayoutManager shows items in a vertical or horizontal scrolling list.",
                    "GridLayoutManager shows items in a grid.",
                    "StaggeredGridLayoutManager shows items in a staggered grid.",
                    "To create a custom layout manager, extend the RecyclerView.LayoutManager class.",
                    "Here is Dave Smith's talk on the custom layout manager",
                    "Notes: In the recent version of the Support Library, if you don't explicitly set the LayoutManager, the RecyclerView will not show !",
                    "There is a Logcat error though E/RecyclerView: No layout manager attached ; skipping layout",
                    "RecyclerView.Adapter RecyclerView includes a new kind of adapter.",
                    "It's a similar approach to the ones you already used, but with some peculiarities, such as a required ViewHolder.",
                    "You will have to override two main methods: one to inflate the view and its view holder, and another one to bind data to the view.",
                    "The good thing about this is that the first method is called only when we really need to create a new view.",
                    "No need to check if it's being recycled.",
                    "ItemAnimator RecyclerView.ItemAnimator will animate ViewGroup modifications such as add/delete/select that are notified to the adapter.",
                    "DefaultItemAnimator can be used for basic default animations and works quite well.",
                    "See the section of this guide for more information.",
                    "Using the RecyclerView Using a RecyclerView has the following key steps:",
                    "Add RecyclerView AndroidX library to the Gradle build file Define a model class to use as the data source Add a RecyclerView to your activity to display the items Create a custom row layout XML file to visualize the item Create a RecyclerView.Adapter and ViewHolder to render the item Bind the adapter to the data source to populate the RecyclerView",
                    "The steps are explained in more detail below.",
                    "Installation Make sure the RecyclerView AndroidX library is listed as a dependency in your app/build.",
                    "Click on `` Sync Project with Gradle files'' to let your IDE download the appropriate resources.",
                    "Defining a Model Every RecyclerView is backed by a source for data.",
                    "In this case, we will define a Contact class which represents the data model being displayed by the RecyclerView:",
                    "Create the RecyclerView within Layout Inside the desired activity layout XML file in res/layout/activity_users.xml, let's add the RecyclerView from the support library:",
                    "In the layout, preview we can see the RecyclerView within the activity:",
                    "Now the RecyclerView is embedded within our activity layout file.",
                    "Next, we can define the layout for each item within our list.",
                    "Creating the Custom Row Layout Before we create the adapter, let's define the XML layout file that will be used for each row within the list.",
                    "This item layout for now should contain a horizontal linear layout with a textview for the name and a button to message the person:",
                    "This layout file can be created in res/layout/item_contact.xml and will be rendered for each item row.",
                    "Note that you should be using wrap_content for the layout_height.",
                    "See this link for more context.",
                    "With the custom item layout complete, let's create the adapter to populate the data into the recycler view.",
                    "Here we need to create the adapter which will actually populate the data into the RecyclerView.",
                    "The adapter's role is to convert an object at a position into a list row item to be inserted.",
                    "However, with a RecyclerView the adapter requires the existence of a `` ViewHolder'' object which describes and provides access to all the views within each item row.",
                    "We can create the basic empty adapter and holder together in ContactsAdapter.java as follows:",
                    "Now that we've defined the basic adapter and ViewHolder, we need to begin filling in our adapter.",
                    "First, let's store a member variable for the list of contacts and pass the list in through our constructor:",
                    "Every adapter has three primary methods: onCreateViewHolder to inflate the item layout and create the holder, onBindViewHolder to set the view attributes based on the data and getItemCount to determine the number of items.",
                    "We need to implement all three to finish the adapter:",
                    "With the adapter completed, all that is remaining is to bind the data from the adapter into the RecyclerView.",
                    "Binding the Adapter to the RecyclerView In our activity, we will populate a set of sample users which should be displayed in the RecyclerView.",
                    "Finally, compile and run the app and you should see something like the screenshot below.",
                    "If you create enough items and scroll through the list, the views will be recycled and far smoother by default than the ListView widget:",
                    "Notifying the Adapter Unlike ListView, there is no way to add or remove items directly through the RecyclerView adapter.",
                    "You need to make changes to the data source directly and notify the adapter of any changes.",
                    "Also, whenever adding or removing elements, always make changes to the existing list.",
                    "For instance, reinitializing the list of Contacts such as the following will not affect the adapter, since it has a memory reference to the old list:",
                    "Instead, you need to act directly on the existing reference:",
                    "There are many methods available to use when notifying the adapter of different changes:",
                    "notifyItemChanged ( int pos ) Notify that item at the position has changed.",
                    "notifyItemInserted ( int pos ) Notify that item reflected at the position has been newly inserted.",
                    "notifyItemRemoved ( int pos ) Notify that items previously located at the position have been removed from the data set.",
                    "notifyDataSetChanged ( ) Notify that the dataset has changed.",
                    "Use only as last resort.",
                    "We can use these from the activity or fragment:",
                    "Every time we want to add or remove items from the RecyclerView, we will need to explicitly inform the adapter of the event.",
                    "Unlike the ListView adapter, a RecyclerView adapter should not rely on notifyDataSetChanged ( ) since the more granular actions should be used.",
                    "See the API documentation for more details.",
                    "Also, if you are intending to update an existing list, make sure to get the current count of items before making any changes.",
                    "For instance, a getItemCount ( ) on the adapter should be called to record the first index that will be changed.",
                    "Diffing Larger Changes Often times there are cases when changes to your list are more complex ( i.e. sorting an existing list ) and it can not be easily determined whether each row changed.",
                    "In this cases, you would normally have to call notifyDataSetChanged ( ) on the entire adapter to update the entire screen, which eliminates the ability to perform animation sequences to showcase what changed.",
                    "Using with ListAdapter The ListAdapter class simplifies detecting whether an item was inserted, updated, or deleted.",
                    "You can find more details in this blog post.",
                    "Note the blog post refers to Support Library v23 that was replaced with AndroidX library.",
                    "Use this Migration guide to ensure compatibility with the rest of the examples.",
                    "First, change your adapter to inherit from a RecyclerView.Adapter to a ListAdapter.",
                    "Note that a ListAdapter requires an extra generic parameter, which is the type of data managed by this adapter.",
                    "We also need to declare an item callback:",
                    "You may notice an error that says `` There is no default constructor available in androidx.recyclerview.widget.ListAdapter''.",
                    "The reason is that you will declare an empty constructor and your adapter will also need to invoke this callback method:",
                    "Instead of overriding the getItemsCount ( ), remove it since the size of the list will be managed by the ListAdapter class:",
                    "We will also add a helper function to add more contacts.",
                    "Anytime we wish to add more contacts, will use this method instead.",
                    "A submitList ( ) function provided by the ListAdapter will trigger the comparison.",
                    "Finally, we need to modify the onBindViewHolder to use the getItem ( ) method instead.",
                    "Using with DiffUtil The ListAdapter is built on top of the DiffUtil class but requires less boilerplate code.",
                    "You can see below what the steps are needed to in order to accomplish the same goal.",
                    "You do not need to follow the steps below if you already using ListAdapter.",
                    "The DiffUtil class, which was added in the v24 .2.0 of the support library, helps compute the difference between the old and new list.",
                    "This class uses the same algorithm used for computing line changes in source code ( the diff utility program ), so it usually fairly fast.",
                    "It is recommended however for larger lists that you execute this computation in a background thread.",
                    "To use the DiffUtil class, you need to first implement a class that implements the DiffUtil.Callback that accepts the old and new list:",
                    "Next, you would implement a swapItems ( ) method on your adapter to perform the diff and then invoke dispatchUpdates ( ) to notify the adapter whether the element was inserted, removed, moved, or changed:",
                    "For a working example, see this sample code.",
                    "Scrolling to New Items If we are inserting elements to the front of the list and wish to maintain the position at the top, we can set the scroll position to the 1st element:",
                    "If we are adding items to the end and wish to scroll to the bottom as items are added, we can notify the adapter that an additional element has been added and can call smoothScrollToPosition ( ) on the RecyclerView:",
                    "Implementing Endless Scrolling To implement fetching more data and appending to the end of the list as the user scrolls towards the bottom, use the addOnScrollListener ( ) from the RecyclerView and add an onLoadMore method leveraging the EndlessScrollViewScrollListener document in the guide.",
                    "Configuring the RecyclerView The RecyclerView is quite flexible and customizable.",
                    "Several of the options available are shown below.",
                    "Performance We can also enable optimizations if the items are static and will not change for significantly smoother scrolling:",
                    "Layouts The positioning of the items is configured using the layout manager.",
                    "By default, we can choose between LinearLayoutManager, GridLayoutManager, and StaggeredGridLayoutManager.",
                    "Linear displays items either vertically or horizontally:",
                    "Displaying items in a grid or staggered grid works similarly:",
                    "For example, a staggered grid might look like:",
                    "We can build our own custom layout managers as outlined there.",
                    "Decorations We can decorate the items using various decorators attached to the recyclerview such as the DividerItemDecoration:",
                    "This decorator displays dividers between each item within the list as illustrated below:",
                    "Grid Spacing Decorations Decorators can also be used for adding consistent spacing around items displayed in a grid layout or staggered grid.",
                    "Copy over this SpacesItemDecoration.java decorator into your project and apply to a RecyclerView using the addItemDecoration method.",
                    "Refer to this staggered grid tutorial for a more detailed outline.",
                    "Animators RecyclerView supports custom animations for items as they enter, move, or get deleted using ItemAnimator.",
                    "The default animation effects is defined by DefaultItemAnimator, and the complex implementation ( see source code ) shows that the logic necessary to ensure that animation effects are performed in a specific sequence ( remove, move, and add ).",
                    "Currently, the fastest way to implement animations with RecyclerView is to use third-party libraries.",
                    "The third-party recyclerview-animators library contains a lot of animations that you can use without needing to build your own.",
                    "Next, we can use any of the defined animators to change the behavior of our RecyclerView:",
                    "For example, here's scrolling through a list after customizing the animation:",
                    "For a further look into defining custom item animators, check out this custom RecyclerView item animation post.",
                    "New ItemAnimator interface There is also a new interface for the ItemAnimator interface.",
                    "The old interface has now been deprecated to SimpleItemAnimator.",
                    "This library adds a ItemHolderInfo class, which appears to be similar to the MoveInfo class defined by DefaultItemAnimator but used more generically to pass state information between animation transition states.",
                    "It is likely that the next version of DefaultItemAnimator will be simplified to use this new class and revised interface.",
                    "Heterogeneous Views See this guide if you want to inflate multiple types of rows inside a single RecyclerView:",
                    "This is useful for feeds which contain various different types of items within a single list.",
                    "Handling Touch Events RecyclerView allows us to handle touch events with:",
                    "Snap to Center Effect In certain cases, we might want a horizontal RecyclerView that allows the user to scroll through a list of items.",
                    "As the user scrolls, we might want items to `` snap to center'' as they are revealed.",
                    "Such as in this example:",
                    "LinearSnapHelper To achieve this snapping to center effect as the user scrolls we can use the built-in LinearSnapHelper as follows:",
                    "For more sophisticated snapping behavior, read more about customizing these helpers and review related sample code here.",
                    "SnappyRecyclerView For a more manual approach, we can create a custom extension to RecyclerView called SnappyRecyclerView which will snap items to center as the user scrolls:",
                    "Copy over the code from SnappyRecyclerView.java to your project.",
                    "Configure your new SnappyRecyclerView with a horizontal LinearLayoutManager:",
                    "Attach your adapter to the RecyclerView to populate the data into the horizontal list as normal.",
                    "You can access the currently `` snapped'' item position with snappyRecyclerView.getFirstVisibleItemPosition ( ).",
                    "That's all, you should be set for a snap-to-center horizontal scrolling list !",
                    "Attaching Click Handlers to Items If you'd like to perform an action whenever a user clicks on any item in your RecyclerView, you'll need to perform that action within a handler.",
                    "Below are three ways you can attach a handler to listen to clicks on a RecyclerView.",
                    "Note that this can be used to recognize clicks on items, but not for recognizing clicks on individual buttons or other elements within your items ... Attaching Click Listeners with Decorators The easiest solution for handling a click on an item in a RecyclerView is to add a decorator class such as this clever ItemClickSupport decorator and then implement the following code in your Activity or Fragment code:",
                    "This technique was originally outlined in this article.",
                    "Under the covers, this is wrapping the interface pattern described in detail below.",
                    "So, if you apply this code above, you do not need the Simple Click Handler within ViewHolder described below.",
                    "Simple Click Handler within ViewHolder Another solution for setting up item click handlers within a RecyclerView is to add code to your Adapter instead ... Unlike ListView which has the setOnItemClickListener method, RecyclerView does not have special provisions for attaching click handlers to items.",
                    "So, to achieve a similar effect manually ( instead of using the decorator utility above ), we can attach click events within the ViewHolder inside our adapter:",
                    "If we want the item to show a `` selected'' effect when pressed, we can set the android: background of the root layout for the row to ?",
                    "This creates the following effect:",
                    "Attaching Click Handlers using Listeners In certain cases, you'd want to setup click handlers for views within the RecyclerView but define the click logic within the containing Activity or Fragment ( i.e bubble up events from the adapter ).",
                    "To achieve this, create a custom listener within the adapter and then fire the events upwards to an interface implementation defined within the parent:",
                    "Then we can attach a click handler to the adapter with:",
                    "See this detailed stackoverflow post which describes how to setup item-level click handlers when using RecyclerView.",
                    "Implementing Pull to Refresh The SwipeRefreshLayout should be used to refresh the contents of a RecyclerView via a vertical swipe gesture.",
                    "See our detailed RecyclerView with SwipeRefreshLayout guide for a step-by-step tutorial on implementing pull to refresh.",
                    "Swipe Detection RecyclerView has an OnFlingListener method that can be used to implement custom fling behavior.",
                    "Download this RecyclerViewSwipeListener and you can handle custom swipe detection by adding this class to your RecyclerView:",
                    "Using Uncover library If your use RecyclerView to implement ` infinite scrolling' over output of the web service, or some other resource that requires slow background calls with multiple items at once, it may be reasonable to try the Uncover library from Maven central:",
                    "This library requires you to implement the primary data fetcher, mediating between fast single item UI-thread calls on model and slow chunked calls on the background on your fetcher:",
                    "The model.install glues model, view and adapter into working implementation.",
                    "When the user swipes forward quickly, the library skips unneeded fetches of data between the new and old position, last requested data are fetched first, and any pending requests are dropped from the queue if they data are no longer visible.",
                    "https://developer.android.com/reference/androidx/recyclerview/widget/RecyclerView.html http://www.grokkingandroid.com/first-glance-androids-recyclerview/ http://www.grokkingandroid.com/statelistdrawables-for-recyclerview-selection/ http://www.bignerdranch.com/blog/recyclerview-part-1-fundamentals-for-listview-experts/ https://developer.android.com/training/material/lists-cards.html http://antonioleiva.com/recyclerview/ https://code.tutsplus.com/tutorials/getting-started-with-recyclerview-and-cardview-on-android--cms-23465 https://code.tutsplus.com/tutorials/introduction-to-the-new-lollipop-activity-transitions--cms-23711",
                    "Overviews The RecyclerView is a ViewGroup that renders any adapter-based view in a similar way.",
                    ""
                ],
                "title": "Using the RecyclerView | CodePath Android Cliffnotes"
            }
        ]
    },
    "parsed": true
}