{
    "task": "Why settings.xml layout is overlapping the ActionBar/Toolbar?",
    "description": "I'm developing a material design app.\nAfter adding settings.xml in SettingsActivity.java & running the app, the activity is appearing like this:\nI don't know why the settings.xml layout is overlapping the ActionBar/Toolbar !",
    "type": "SO",
    "link": "https://stackoverflow.com/questions/32961263",
    "question_id": "32961263",
    "resources": {
        "api": [
            {
                "link": "https://developer.android.com/reference/android/widget/Toolbar",
                "type": "android",
                "content": [
                    "public class Toolbar extends ViewGroup",
                    "A standard toolbar for use within application content.",
                    "A Toolbar is a generalization of action bars for use within application layouts.",
                    "While an action bar is traditionally part of an Activity's opaque window decor controlled by the framework, a Toolbar may be placed at any arbitrary level of nesting within a view hierarchy.",
                    "An application may choose to designate a Toolbar as the action bar for an Activity using the setSupportActionBar ( ) method.",
                    "Toolbar supports a more focused feature set than ActionBar.",
                    "From start to end, a toolbar may contain a combination of the following optional elements:",
                    "In modern Android UIs developers should lean more on a visually distinct color scheme for toolbars than on their application icon.",
                    "The use of application icon plus title as a standard layout is discouraged on API 21 devices and newer.",
                    "Layout information for child views of Toolbars.",
                    "Interface responsible for receiving menu item click events if the items themselves do not have individual item click listeners.",
                    "Collapse a currently expanded action view.",
                    "Dismiss all currently showing popup menus, including overflow or submenus.",
                    "Retrieve the currently configured content description for the collapse button view.",
                    "Return the current drawable used as the collapse icon.",
                    "Gets the ending content inset for this toolbar.",
                    "Gets the end content inset to use when action buttons are present.",
                    "Gets the left content inset for this toolbar.",
                    "Gets the right content inset for this toolbar.",
                    "Gets the starting content inset for this toolbar.",
                    "Gets the start content inset to use when a navigation button is present.",
                    "Gets the content inset that will be used on the ending side of the bar in the current toolbar configuration.",
                    "Gets the content inset that will be used on the left side of the bar in the current toolbar configuration.",
                    "Gets the content inset that will be used on the right side of the bar in the current toolbar configuration.",
                    "Gets the content inset that will be used on the starting side of the bar in the current toolbar configuration.",
                    "Return the current logo drawable.",
                    "Return the description of the toolbar's logo.",
                    "Return the Menu shown in the toolbar.",
                    "Retrieve the currently configured content description for the navigation button view.",
                    "Return the current drawable used as the navigation icon.",
                    "Return the current drawable used as the overflow icon.",
                    "Return the subtitle of this toolbar.",
                    "Returns the title of this toolbar.",
                    "Check whether this Toolbar is currently hosting an expanded action view.",
                    "Hide the overflow items from the associated menu.",
                    "Inflate a menu resource into this toolbar.",
                    "Check whether the overflow menu is currently showing.",
                    "Set a content description for the collapse button if one is present.",
                    "Set the icon to use for the toolbar's collapse button.",
                    "Sets the start content inset to use when action buttons are present.",
                    "Sets the start content inset to use when a navigation button is present.",
                    "Sets the content insets for this toolbar.",
                    "Sets the content insets for this toolbar relative to layout direction.",
                    "Set a logo drawable from a resource id.",
                    "Set a description of the toolbar's logo.",
                    "Set a content description for the navigation button if one is present.",
                    "Set the icon to use for the toolbar's navigation button.",
                    "Set a listener to respond to navigation events.",
                    "Set a listener to respond to menu item click events.",
                    "Set the icon to use for the overflow button.",
                    "Specifies the theme to use when inflating popup menus.",
                    "Set the subtitle of this toolbar.",
                    "Sets the text color, size, style, hint color, and highlight color from the specified TextAppearance resource.",
                    "Sets the text color of the subtitle, if present.",
                    "Set the title of this toolbar.",
                    "Sets the bottom title margin in pixels.",
                    "Sets the ending title margin in pixels.",
                    "Sets the starting title margin in pixels.",
                    "Sets the top title margin in pixels.",
                    "Sets the text color of the title, if present.",
                    "Show the overflow items from the associated menu.",
                    "If this Toolbar does not have an expanded action view this method has no effect.",
                    "An action view may be expanded either directly from the MenuItem it belongs to or by user action.",
                    "This will be used to describe the collapse action to users through mechanisms such as screen readers or tooltips.",
                    "The content inset affects the valid area for Toolbar content other than the navigation button and menu.",
                    "Insets define the minimum margin for these components and can be used to effectively align Toolbar content along well-known gridlines.",
                    "Different content insets are often called for when additional buttons are present in the toolbar, as well as at different toolbar sizes.",
                    "The larger value of getContentInsetEnd ( ) and this value will be used during layout.",
                    "The larger value of getContentInsetStart ( ) and this value will be used during layout.",
                    "Applications that wish to populate the toolbar's menu can do so from here.",
                    "To use an XML menu resource, use inflateMenu ( int ).",
                    "This will be used to describe the navigation action to users through mechanisms such as screen readers or tooltips.",
                    "If the Toolbar has an expanded action view it can be collapsed using the collapseActionView ( ) method.",
                    "Inflate an XML menu resource into this toolbar.",
                    "Existing items in the menu will not be modified or removed.",
                    "This may not reflect a pending show operation in progress.",
                    "The content description will be read via screen readers or other accessibility systems to explain the action of the navigation button.",
                    "The content description will be read via screen readers or other accessibility systems to explain the action of the collapse button.",
                    "The collapse button appears at the start of the toolbar when an action view is present.",
                    "This drawable should generally take the place of title text.",
                    "The logo can not be clicked.",
                    "Apps using a logo should also supply a description using setLogoDescription ( int ).",
                    "This description will be used for accessibility or other similar descriptions of the UI.",
                    "The navigation button appears at the start of the toolbar if present.",
                    "Setting an icon will make the navigation button visible.",
                    "If you use a navigation icon you should also set a description for its action using setNavigationContentDescription ( int ).",
                    "This is used for accessibility and tooltips.",
                    "This listener will be called whenever the user clicks the navigation button at the start of the toolbar.",
                    "An icon must be set for the navigation button to appear.",
                    "This listener will be invoked whenever a user selects a menu item from the action buttons presented at the end of the toolbar or the associated overflow.",
                    "By default, uses the same theme as the toolbar itself.",
                    "Subtitles should express extended information about the current content.",
                    "A title should be used as the anchor for a section of content.",
                    "It should describe or name the content being viewed.",
                    "Content and code samples on this page are subject to the licenses described in the Content License.",
                    "Java is a registered trademark of Oracle and/or its affiliates.",
                    "This may be an Up arrow, navigation menu toggle, close, collapse, done or another glyph of the app's choosing.",
                    "This button should always be used to access other navigational destinations within the container of the Toolbar and its signified content or otherwise leave the current context signified by the Toolbar.",
                    "The navigation button is vertically aligned within the Toolbar's minimum height, if set.",
                    "This may extend to the height of the bar and can be arbitrarily wide.",
                    "The title should be a signpost for the Toolbar's current position in the navigation hierarchy and the content contained there.",
                    "The subtitle, if present should indicate any extended information about the current content.",
                    "If an app uses a logo image it should strongly consider omitting a title and subtitle.",
                    "One or more custom views.",
                    "The application may add arbitrary child views to the Toolbar.",
                    "They will appear at this position within the layout.",
                    "If a child view's Toolbar.LayoutParams indicates a Gravity value of CENTER_HORIZONTAL the view will attempt to center within the available space remaining in the Toolbar after all other elements have been measured.",
                    "The menu of actions will pin to the end of the Toolbar offering a few frequent, important or typical actions along with an optional overflow menu for additional actions.",
                    "Action buttons are vertically aligned within the Toolbar's minimum height, if set.",
                    "setContentInsetsRelative ( int, int )",
                    "setContentInsetsAbsolute ( int, int )",
                    "-LCB- @link androidx.appcompat.R.attr #contentInsetEnd -RCB-",
                    "-LCB- @link androidx.appcompat.R.attr #contentInsetEndWithActions -RCB-",
                    "-LCB- @link androidx.appcompat.R.attr #contentInsetLeft -RCB-",
                    "-LCB- @link androidx.appcompat.R.attr #contentInsetRight -RCB-",
                    "-LCB- @link androidx.appcompat.R.attr #contentInsetStart -RCB-",
                    "-LCB- @link androidx.appcompat.R.attr #contentInsetStartWithNavigation -RCB-",
                    "-LCB- @link androidx.appcompat.R.attr #titleMarginBottom -RCB-",
                    "-LCB- @link androidx.appcompat.R.attr #titleMarginEnd -RCB-",
                    "-LCB- @link androidx.appcompat.R.attr #titleMarginStart -RCB-",
                    "-LCB- @link androidx.appcompat.R.attr #titleMarginTop -RCB-",
                    "-LCB- @link androidx.appcompat.R.attr #contentInsetLeft -RCB- -LCB- @link androidx.appcompat.R.attr #contentInsetRight -RCB-",
                    "-LCB- @link androidx.appcompat.R.attr #contentInsetEnd -RCB- -LCB- @link androidx.appcompat.R.attr #contentInsetStart -RCB-",
                    "-LCB- @link androidx.appcompat.R.attr #titleMargin -RCB-",
                    "Twitter Follow @AndroidDev on Twitter",
                    "YouTube Check out Android Developers on YouTube",
                    "More Android Android Enterprise Security Source",
                    "Support Report platform bug Report documentation bug Google Play support Join research studies",
                    "Documentation Developer guides Design guides API reference Samples Android Studio",
                    "Get news and tips by email Subscribe",
                    ""
                ],
                "title": "Toolbar \u00a0|\u00a0 Android Developers"
            }
        ],
        "git": [
            {
                "link": "https://github.com/JakeWharton/ActionBarSherlock/issues/291",
                "content": [
                    "Action bar height not taken into consideration when adding fragment to android.R.id.content \u00b7 Issue # 291 \u00b7 JakeWharton/ActionBarSherlock \u00b7 GitHub",
                    "This repository has been archived by the owner.",
                    "Action bar height not taken into consideration when adding fragment to android.R.id.content",
                    "action bar height is not taken into consideration when adding a fragment directly to android.R.id.content.",
                    "Works on ICS with the native action bar.",
                    "This is with latest 4.0-wip code.",
                    "The layout I use is this:",
                    "Not sure if this helps, but ABS log when starting this activity is below:",
                    "The text was updated successfully, but these errors were encountered:",
                    "How are you attaching the fragment ?",
                    "On Feb 18, 2012 12:15 PM, `` Nikolay Elenkov'' <",
                    "actionbar height is not taken into consideration when the",
                    "layout contains some views on top of a ListView.",
                    "even when not using the split AB, and works fine on ICS.",
                    "Reply to this email directly or view it on GitHub:",
                    "I am adding it to android.R.id.content:",
                    "it could be any layout that you have under ListView may causes overlap.",
                    "I've had some more time to look into this, and apparently the problem is not the ListView, but adding the fragment to android.R.id.content.",
                    "I've changed it to add the fragment to an empty FrameLayout and the view is displayed properly ( i.e., under the action bar ).",
                    "Whether this is a bug might be debatable, but it used to work with 3.5, and works with the native action bar on ICS, so at this should at least be documented.",
                    "The problem is that you've done nothing to initialize the decor view before the fragment attachment occurs.",
                    "I'm willing to bet that if you put a call to getSupportActionBar ( ) above your transaction you'll see that it works fine.",
                    "ABS v3 was integrated a lot tighter into the support library so it was able to handle this internally but since v4 is much more independent it doesn't operate in the same fashion.",
                    "I'm not sure if calls to getSupportFragmentManager ( ) should install the decor view or not but that may be the only way to get around cases like this where you aren't triggering it normally.",
                    "I can confirm that with the latest changes, adding to android.R.id.content works as expected.",
                    "don't add fragment to android.R.id.content",
                    "to subscribe to this conversation on GitHub.",
                    ""
                ],
                "title": "Action bar height not taken into consideration when adding fragment to android.R.id.content \u00b7 Issue # 291 \u00b7 JakeWharton/ActionBarSherlock \u00b7 GitHub"
            }
        ],
        "qa": [
            {
                "uid": "29738510",
                "link": "https://stackoverflow.com/questions/29738510",
                "title": "Toolbar overlapping below status bar",
                "answers": [
                    {
                        "uid": 29738556,
                        "score": 284,
                        "text": [
                            "Use android: fitsSystemWindows = `` true'' in the root view of your layout -LRB- LinearLayout in your case -RRB-.",
                            "And android: fitsSystemWindows is an",
                            "internal attribute to adjust view layout based on system windows such as the status bar.",
                            "If true, adjusts the padding of this view to leave space for the system windows.",
                            "Will only take effect if this view is in a non-embedded activity.",
                            "Must be a boolean value, either `` true'' or `` false''.",
                            "This may also be a reference to a resource -LRB- in the form'' @ -LSB- package: -RSB- type: name'' -RRB- or theme attribute -LRB- in the form'' ?",
                            "-LSB- package :] -LSB- type: -RSB- name'' -RRB- containing a value of this type.",
                            "This corresponds to the global attribute resource symbol fitsSystemWindows."
                        ]
                    },
                    {
                        "uid": 37781680,
                        "score": 11,
                        "text": [
                            "For me, the problem was that I copied something from an example and used",
                            "just removing this fixed my problem."
                        ]
                    },
                    {
                        "uid": 38076948,
                        "score": 18,
                        "text": [
                            "Just set this to v21/styles.xml file",
                            "and be sure"
                        ]
                    },
                    {
                        "uid": 38473864,
                        "score": 6,
                        "text": [
                            "I removed all lines mentioned below from / res/values-v21/styles.xml and now it is working fine."
                        ]
                    },
                    {
                        "uid": 39322059,
                        "score": 10,
                        "text": [
                            "None of the answers worked for me, but this is what finally worked after i set android: fitSystemWindows on the root view -LRB- I set these in styles v21 -RRB-:",
                            "Make sure you don't have the following line as AS puts it by default:"
                        ]
                    },
                    {
                        "uid": 48843823,
                        "score": 9,
                        "text": [
                            "None of the answers worked for me, but this is what finally worked after I set:",
                            "In parent activity layout file it's not suggested at many places but it's work for me and saves my day"
                        ]
                    },
                    {
                        "uid": 49874903,
                        "score": 1,
                        "text": [
                            "According google docs, we should not use fitsSystemWindows attribute in app theme, it is intended to use in layout files.",
                            "Using in themes can causes problem in toast messages.",
                            "Check Issue LINK & example of problem caused LINK",
                            "Example of using correct way and which works fine with windowTranslucentStatus as well."
                        ]
                    },
                    {
                        "uid": 52345624,
                        "score": 1,
                        "text": [
                            "Remove below lines from style or style -LRB- 21 -RRB-"
                        ]
                    }
                ],
                "tags": [
                    "android",
                    "xml",
                    "android-layout",
                    "material-design",
                    "material-components-android"
                ]
            }
        ],
        "other": [
            {
                "link": "https://www.i-programmer.info/programming/android/8521-android-adventures-menus-a-the-action-bar.html?start=1",
                "type": "misc",
                "content": [
                    "Android Adventures - Menus - The Toolbar",
                    "Page 2 of 4 The Toolbar If you start a new basic Activity project called MenuSample then you will discover that it automatically creates a main_menu resource file and the code needed to display it as a tool bar.",
                    "Previously it would have added an App Bar but Google recommends that we change to using the Toolbar widget.",
                    "The basic Activity template uses the support library to make it possible in earlier versions of Android.",
                    "In this case the Activity has to derive from the AppCompatActivity class: public class MainActivity extends AppCompatActivity -LCB- and we need the imports: import android.support.v7.app.AppCompatActivity ; import android.support.v7.widget.Toolbar ; The Toolbar is defined in activity_main.xml as a custom widget: < android.support.design.widget.AppBarLayout android: layout_width = `` match_parent'' android: layout_height = `` wrap_content'' android: theme ='' @style / AppTheme.AppBarOverlay'' > < android.support.v7.widget.Toolbar android: id ='' @ + id/toolbar'' android: layout_width = `` match_parent'' android: layout_height ='' ?",
                    "attr/actionBarSize'' android: background ='' ?",
                    "attr/colorPrimary'' app: popupTheme ='' @style / AppTheme.PopupOverlay'' style ='' @style / AppTheme'' / > </android.support.design.widget.AppBarLayout> <include\u00a0layout=\"@layout/content_main\"\u00a0/> ... Notice that the Toolbar's style is set to AppTheme.",
                    "This is important as the style selected changes the way the Toolbar is displayed and can stop it from displaying altogether.",
                    "Also notice the tag <include\u00a0layout=\"@layout/content_main\"\u00a0/> This loads the layout that you design in content_main.xml.",
                    "That is, as explained in earlier chapters the layout files are split into two parts - activity_main.xml which defines the layout that should be common to all Android apps and content_main.xml which is used for the layout specific to your app.",
                    "The two files are automatically merged together when activity_main.xml is loaded.",
                    "When the Activity loads onCreate runs and inflates the layout in activity_main.xml and the included content_main.xml.",
                    "This is enough for the toolbar to display but for it to be used as a toolbar by the system we need to add: Toolbar toolbar = ( Toolbar ) findViewById ( R.id.toolbar ) ; setSupportActionBar ( toolbar ) ; All of this code is generated for you automatically and you will find it in the MainActivity.java file in onCreate: @Overrideprotected void onCreate ( Bundle savedInstanceState ) -LCB- super.onCreate ( savedInstanceState ) ; setContentView ( R.layout.activity _ main ) ; Toolbar toolbar = ( Toolbar ) findViewById ( R.id.toolbar ) ; setSupportActionBar ( toolbar ) ; Now if you run the app you will see the familiar Hello world message and the default toolbar:",
                    "In fact it is so familiar you may not even have realized that it is a menu.",
                    "The toolbar has the name of the app to the left and a three dot icon to the right.",
                    "If you select the three dot icon the Settings menu item appears:",
                    "If you take a look at the menu_main.xml file you can see the definition of this menu: < menu xmlns: android = `` http://schemas.android.com/apk/res/android\"\u00a0xmlns:app=\"http://schemas.android.com/apk/res-auto\"\u00a0xmlns:tools=\"http://schemas.android.com/tools\"\u00a0tools:context=\u00a0 `` com.example.mikejames.myapplication.MainActivity'' > < item android: id ='' @ + id/action _ settings'' android: orderInCategory = `` 100'' android: title = `` Settings'' app: showAsAction = `` never'' / > </menu> You can see that this defines a single menu with a single item with the title `` Settings''.",
                    "There are some new attributes being used in the item tag.",
                    "The showAsAction attribute is important for the way the action bar works.",
                    "By default the system places menu items into the overflow area that is only revealed when the user selects the three dot icon or more generally the action overflow icon.",
                    "However for items that you would like to give the user a more direct access to you can set the showAsAction attribute.",
                    "This can be set to any of the following:",
                    "ifRoom - show if there is room never - never show in the visible area withText - show with text always - always show even if it means overlapping other items collapseActionView - show a collapsed view of the item.",
                    "As you can see the Settings item in the default action bar is set to never show.",
                    "The showAsAction attribute works with the orderInCategory attribute to determine the order that items are shown.",
                    "To see this in action let's add another item.",
                    "Add to the end of the menu_main.xml file before the final </menu> tag: < item android: id ='' @ + id/action _ send'' android: title = `` Send'' app: showAsAction = `` ifRoom'' / > Now if you run the app you will see:",
                    "This works and the new item will be displayed as long as there is room - if there isn't it will appear when the user selects the three dots icon.",
                    "It is usual to show toolbar items as icons so change the item tag to read: < item android: id ='' @ + id/action _ send'' android: title = `` Send'' app: showAsAction = `` ifRoom'' android: icon ='' @android: drawable/ic _ menu_send'' / > where we are using one of the many supplied icons.",
                    "You can carry on adding menu items to the action bar and generally customizing how they display given different screen widths - the general idea is the same for all menus.",
                    "Creating The Toolbar So far we have just looked at the menu_main.xml file and the XML specification of the action bar menu.",
                    "There is also some code generated to actually create the menu displayed in the Toolbar.",
                    "The Activity will fire a CreateOptionsMenu event when it is ready to display the toolbar recall the toolbar used to be called the actionbar and before that the Options Menu.",
                    "All the onCreateOptionsMenu event handler has to do is inflate the XML file that defines the menu: @Overridepublic boolean onCreateOptionsMenu ( Menu menu ) -LCB- getMenuInflater ( ).",
                    "inflate ( R.menu.menu _ main, menu ) ; return true ; -RCB- The onCreateOptionsMenu is called once when the Activity starts.",
                    "Before Android 3 it was called each time the menu was displayed on the screen but later the actionbar/toolbar is always on display.",
                    "How to change the toolbar is discussed later.",
                    "All the event handler has to do is use the appropriate inflater object to create the menu from the resource file.",
                    "The new View hierarchy of menu and item objects is added to the menu object passed to the event handler.",
                    "This is important because it means that your new menu items are added to any that are already there.",
                    "This allows other Activitys and Fragments to add items to a common toolbar.",
                    "Where's My Action Bar ?",
                    "If you try any of this out then there is a chance that you will do everything correct and yet your action bar will not show.",
                    "There are only two common reasons for this.",
                    "The first is that you are targeting and using an early version of Android which doesn't support the action bar.",
                    "This is unlikely especially if you are using the support library.",
                    "The second, and this is much more common, is that you are using a theme that doesn't support the action bar or doesn't support the type of action bar you are using.",
                    "For Android 5 or later or the support library select one of the AppCompat themes if you want to make use of the new features introduced with Android 5.",
                    "However if you select a new theme in the designer then it isn't automatically passed on to the app when you run it.",
                    "To change the overall theme for the app you have to edit the styles.xml file in the res/values folder.",
                    "Change the parent = to the theme you want to use - e.g..",
                    "<style\u00a0name=\"AppTheme\"\u00a0parent=\"Theme.AppCompat.Light\"> </style> As always Android Studio generates the correct xml for the styles that work with the Toolbar.",
                    "Last Updated ( Tuesday, 14 March 2017 )",
                    ""
                ],
                "title": "Android Adventures - Menus - The Toolbar"
            },
            {
                "link": "https://guides.codepath.com/android/using-the-app-toolbar",
                "type": "misc",
                "content": [
                    "Jump to SectionTable of ContentsOverviewToolbar vs ActionBarUsing Toolbar as ActionBarReusing the ToolbarStyling the ToolbarDisplaying an App IconCustom Title ViewTranslucent Status BarTransparent Status BarReacting to ScrollAdvanced Scrolling Behavior for ToolbarUsing the App ToolbarEdit PagePage HistoryOverview Toolbar was introduced in Android Lollipop, API 21 release and is the spiritual successor of the ActionBar.",
                    "It's a ViewGroup that can be placed anywhere in your XML layouts.",
                    "Toolbar's appearance and behavior can be more easily customized than the ActionBar.",
                    "Toolbar works well with apps targeted to API 21 and above.",
                    "However, Android has updated the AppCompat support libraries so the Toolbar can be used on lower Android OS devices as well.",
                    "In AppCompat, Toolbar is implemented in the androidx.appcompat.widget.Toolbar class.ura There are two ways to use Toolbar:",
                    "Use a Toolbar as an Action Bar when you want to use the existing ActionBar facilities ( such as menu inflation and selection, ActionBarDrawerToggle, and so on ) but want to have more control over its appearance.",
                    "Use a standalone Toolbar when you want to use the pattern in your app for situations that an Action Bar would not support ; for example, showing multiple toolbars on the screen, spanning only part of the width, and so on.",
                    "Toolbar vs ActionBar The Toolbar is a generalization of the ActionBar system.",
                    "The key differences that distinguish the Toolbar from the ActionBar include:",
                    "Toolbar is a View included in a layout like any other View",
                    "As a regular View, the toolbar is easier to position, animate and control Multiple distinct Toolbar elements can be defined within a single activity",
                    "Keep in mind that you can also configure any Toolbar as an Activity's ActionBar, meaning that your standard options menu actions will be display within.",
                    "Note that the ActionBar continues to work and if all you need is a static bar at the top that can host icons and a back button, then you can safely continue to use ActionBar.",
                    "Using Toolbar as ActionBar To use Toolbar as an ActionBar, first ensure the AndroidX support library is added to your application build.gradle ( Module: app ) file:",
                    "Second, let's disable the theme-provided ActionBar.",
                    "The easiest way is to have your theme extend from Theme.AppCompat.NoActionBar ( or the light variant ) within the res/values/styles.xml file:",
                    "Now you need to add a Toolbar to your Activity layout file.",
                    "One of the biggest advantages of using the Toolbar widget is that you can place the view anywhere within your layout.",
                    "Below we place the toolbar at the top of a LinearLayout like the standard ActionBar:",
                    "Note: You'll want to add android: fitsSystemWindows = `` true'' ( learn more ) to the parent layout of the Toolbar to ensure that the height of the activity is calculated correctly.",
                    "As Toolbar is just a ViewGroup and can be styled and positioned like any other view.",
                    "Note that this means if you are in a RelativeLayout, you need to ensure that all other views are positioned below the toolbar explicitly.",
                    "The toolbar is not given any special treatment as a view.",
                    "Next, in your Activity or Fragment, set the Toolbar to act as the ActionBar by calling the setSupportActionBar ( Toolbar ) method: Note: When using the support library, make sure that you are importing android.support.v7.widget.Toolbar and not android.widget.Toolbar.",
                    "Next, we need to make sure we have the action items listed within a menu resource file such as res/menu/menu_main.xml which is inflated above in onCreateOptionsMenu:",
                    "For more details about action items in the Toolbar including how to setup click handling, refer to our ActionBar guide.",
                    "The above code results in the toolbar fully replacing the ActionBar at the top:",
                    "From this point on, all menu items are displayed in your Toolbar, populated via the standard options menu callbacks.",
                    "Reusing the Toolbar In many apps, the same toolbar can be used across multiple activities or in alternative layout resources for the same activity.",
                    "In order to easily reuse the toolbar, we can leverage the layout include tag as follows.",
                    "First, define your toolbar in a layout file in res/layout/toolbar _ main.xml:",
                    "Next, we can use the <include\u00a0/> tag to load the toolbar into our activity layout XML:",
                    "and then access the Toolbar by the include id instead:",
                    "This allows us to create a consistent navigation experience across activities or configuration changes.",
                    "Styling the Toolbar The Toolbar can be customized in many ways leveraging various style properties including android: theme, app: titleTextAppearance, app: popupTheme.",
                    "Each of these can be mapped to a style.",
                    "Now, we need to create the custom styles in res/values/styles.xml with:",
                    "Displaying an App Icon In certain situations, we might want to display an app icon within the Toolbar.",
                    "This can be done by adding this code into the Activity",
                    "Next, we need to remove the left inset margin that pushes the icon over too far to the left by adding app: contentInsetStart to the Toolbar:",
                    "With that the icon should properly display within the Toolbar as expected.",
                    "Custom Title View A Toolbar is just a decorated ViewGroup and as a result, the title contained within can be completely customized by embedding a view within the Toolbar such as:",
                    "This means that you can style the TextView like any other.",
                    "You can access the TextView inside your activity with:",
                    "Note that you must hide the default title using setDisplayShowTitleEnabled.",
                    "Translucent Status Bar In certain cases, the status bar should be translucent such as:",
                    "To achieve this, first set these properties in your res/values/styles.xml within the main theme:",
                    "The activity or root layout that will have a transparent status bar needs have the fitsSystemWindows property set in the layout XML:",
                    "You should be all set.",
                    "Refer to this stackoverflow post for more details.",
                    "Transparent Status Bar If you want the status bar to be entirely transparent for KitKat and above, the easiest approach is to:",
                    "and then add this style to your res/values/styles.xml within the main theme:",
                    "Reacting to Scroll We can configure the Toolbar to react and change as the page scrolls:",
                    "For example, we can have the toolbar hide when the user scrolls down on a list or expand as the user scrolls to the header.",
                    "There are many effects that can be configured by using the CoordinatorLayout.",
                    "First, we need to make sure we add the design support library to our app/build.",
                    "Next, inside the activity layout XML such as res/layout/activity_main.xml, we need to setup our coordinated layout with a Toolbar and a scrolling container such as a RecyclerView:",
                    "Of course, the RecyclerView could also be replaced with a FrameLayout which could then allow for fragments to be loaded instead:",
                    "This type of layout results in the following:",
                    "Refer to the guide on CoordinatorLayout and AppBarLayout for additional explanation and specifics.",
                    "For troubleshooting, refer to this troubleshooting guide.",
                    "Advanced Scrolling Behavior for Toolbar The proper way of reacting to simple scroll behavior is leveraging the CoordinatorLayout built into the Design Support Library as shown in the previous section.",
                    "However, there are a few other relevant resources around reacting to scrolling events with a more manual approach:",
                    "Hiding or Showing Toolbar on Scroll - Great guide on an alternate strategy not requiring the CoordinatorLayout to replicate the behavior of the `` Google Play Music'' app.",
                    "Sample code can be found here.",
                    "Hiding or Showing Toolbar using CoordinatorLayout - Great guide that outlines how to use CoordinatorLayout to hide the Toolbar and the FAB when the user scrolls.",
                    "With these methods, your app can replicate any scrolling behaviors seen in common apps with varying levels of difficulty not captured with the method shown above.",
                    "Overview Toolbar was introduced in Android Lollipop, API 21 release and is the spiritual successor of the ActionBar.",
                    ""
                ],
                "title": "Using the App Toolbar | CodePath Android Cliffnotes"
            }
        ]
    },
    "parsed": true
}