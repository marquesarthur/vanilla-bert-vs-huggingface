{
    "task": "Android SQLite performance in complex queries",
    "description": "Suppose I have this kind of query\nwhich is then used like this\nSo it selects values from many tables, does some operations etc..\nAs you can see the query is horribly complex ( very difficult to debug ) and the performance does not seem to be as good as I would expect.\nCan I improve performace using some kind of prepared statement ?\nWould it be faster to perform more simple queries and process them manually with some custom code ?",
    "type": "SO",
    "link": "https://stackoverflow.com/questions/13401642",
    "question_id": "13401642",
    "resources": {
        "api": [
            {
                "link": "https://developer.android.com/training/data-storage/sqlite",
                "type": "android",
                "content": [
                    "Saving data to a database is ideal for repeating or structured data, such as contact information.",
                    "This page assumes that you are familiar with SQL databases in general and helps you get started with SQLite databases on Android.",
                    "The APIs you'll need to use a database on Android are available in the android.database.sqlite package.",
                    "Caution: Although these APIs are powerful, they are fairly low-level and require a great deal of time and effort to use:",
                    "For these reasons, we highly recommended using the Room Persistence Library as an abstraction layer for accessing information in your app's SQLite databases.",
                    "One of the main principles of SQL databases is the schema: a formal declaration of how the database is organized.",
                    "The schema is reflected in the SQL statements that you use to create your database.",
                    "You may find it helpful to create a companion class, known as a contract class, which explicitly specifies the layout of your schema in a systematic and self-documenting way.",
                    "A contract class is a container for constants that define names for URIs, tables, and columns.",
                    "The contract class allows you to use the same constants across all the other classes in the same package.",
                    "This lets you change a column name in one place and have it propagate throughout your code.",
                    "A good way to organize a contract class is to put definitions that are global to your whole database in the root level of the class.",
                    "Then create an inner class for each table.",
                    "Each inner class enumerates the corresponding table's columns.",
                    "Note: By implementing the BaseColumns interface, your inner class can inherit a primary key field called _ ID that some Android classes such as CursorAdapter expect it to have.",
                    "It's not required, but this can help your database work harmoniously with the Android framework.",
                    "For example, the following contract defines the table name and column names for a single table representing an RSS feed:",
                    "Once you have defined how your database looks, you should implement methods that create and maintain the database and tables.",
                    "Here are some typical statements that create and delete a table:",
                    "Just like files that you save on the device's internal storage, Android stores your database in your app's private folder.",
                    "Your data is secure, because by default this area is not accessible to other apps or the user.",
                    "The SQLiteOpenHelper class contains a useful set of APIs for managing your database.",
                    "When you use this class to obtain references to your database, the system performs the potentially long-running operations of creating and updating the database only when needed and not during app startup.",
                    "All you need to do is call getWritableDatabase ( ) or getReadableDatabase ( ).",
                    "Note: Because they can be long-running, be sure that you call getWritableDatabase ( ) or getReadableDatabase ( ) in a background thread.",
                    "See Threading on Android for more information.",
                    "To use SQLiteOpenHelper, create a subclass that overrides the onCreate ( ) and onUpgrade ( ) callback methods.",
                    "You may also want to implement the onDowngrade ( ) or onOpen ( ) methods, but they are not required.",
                    "For example, here's an implementation of SQLiteOpenHelper that uses some of the commands shown above:",
                    "To access your database, instantiate your subclass of SQLiteOpenHelper:",
                    "Insert data into the database by passing a ContentValues object to the insert ( ) method:",
                    "The first argument for insert ( ) is simply the table name.",
                    "The second argument tells the framework what to do in the event that the ContentValues is empty ( i.e., you did not put any values ).",
                    "If you specify the name of a column, the framework inserts a row and sets the value of that column to null.",
                    "If you specify null, like in this code sample, the framework does not insert a row when there are no values.",
                    "The insert ( ) methods returns the ID for the newly created row, or it will return -1 if there was an error inserting the data.",
                    "This can happen if you have a conflict with pre-existing data in the database.",
                    "To read from a database, use the query ( ) method, passing it your selection criteria and desired columns.",
                    "The method combines elements of insert ( ) and update ( ), except the column list defines the data you want to fetch ( the `` projection'' ), rather than the data to insert.",
                    "The results of the query are returned to you in a Cursor object.",
                    "The third and fourth arguments ( selection and selectionArgs ) are combined to create a WHERE clause.",
                    "Because the arguments are provided separately from the selection query, they are escaped before being combined.",
                    "This makes your selection statements immune to SQL injection.",
                    "For more detail about all arguments, see the query ( ) reference.",
                    "To look at a row in the cursor, use one of the Cursor move methods, which you must always call before you begin reading values.",
                    "Since the cursor starts at position -1, calling moveToNext ( ) places the `` read position'' on the first entry in the results and returns whether or not the cursor is already past the last entry in the result set.",
                    "For each row, you can read a column's value by calling one of the Cursor get methods, such as getString ( ) or getLong ( ).",
                    "For each of the get methods, you must pass the index position of the column you desire, which you can get by calling getColumnIndex ( ) or getColumnIndexOrThrow ( ).",
                    "When finished iterating through results, call close ( ) on the cursor to release its resources.",
                    "For example, the following shows how to get all the item IDs stored in a cursor and add them to a list:",
                    "To delete rows from a table, you need to provide selection criteria that identify the rows to the delete ( ) method.",
                    "The mechanism works the same as the selection arguments to the query ( ) method.",
                    "It divides the selection specification into a selection clause and selection arguments.",
                    "The clause defines the columns to look at, and also allows you to combine column tests.",
                    "The arguments are values to test against that are bound into the clause.",
                    "Because the result isn't handled the same as a regular SQL statement, it is immune to SQL injection.",
                    "The return value for the delete ( ) method indicates the number of rows that were deleted from the database.",
                    "When you need to modify a subset of your database values, use the update ( ) method.",
                    "Updating the table combines the ContentValues syntax of insert ( ) with the WHERE syntax of delete ( ).",
                    "The return value of the update ( ) method is the number of rows affected in the database.",
                    "Since getWritableDatabase ( ) and getReadableDatabase ( ) are expensive to call when the database is closed, you should leave your database connection open for as long as you possibly need to access it.",
                    "Typically, it is optimal to close the database in the onDestroy ( ) of the calling Activity.",
                    "The Android SDK includes a sqlite3 shell tool that allows you to browse table contents, run SQL commands, and perform other useful functions on SQLite databases.",
                    "For more information, see how to how to issue shell commands.",
                    "There is no compile-time verification of raw SQL queries.",
                    "As your data graph changes, you need to update the affected SQL queries manually.",
                    "This process can be time consuming and error prone.",
                    "You need to use lots of boilerplate code to convert between SQL queries and data objects.",
                    ""
                ],
                "title": "Save data using SQLite \u00a0|\u00a0 Android Developers"
            }
        ],
        "git": [
            {
                "link": "https://github.com/invertase/react-native-firebase/issues/3491",
                "content": [
                    "Slow Query Response in Offline Mode \u00b7 Issue # 3491 \u00b7 invertase/react-native-firebase \u00b7 GitHub",
                    "Slow Query Response in Offline Mode",
                    "Firestore offline Queries are taking too much time, around 8-12 seconds even for small queries and small database.",
                    "The first query response is quick, but the subsequent same query responses are extremely slow.",
                    "I'm using Android with react-native and @react - native-firebase/firestore'': `` 6.2.0''",
                    "The text was updated successfully, but these errors were encountered:",
                    "How big is the dataset ?",
                    "We don't really do anything other than forward query requests on and send them back so I have a feeling this may be an SDK issue.",
                    "I am experiencing this issue too.",
                    "I recently upgraded from v5 to v6 and the calls to Firestore in v6 are very slow.",
                    "A user upgraded to the app version using v6 and called me almost immediately complaining about the slowness.",
                    "A collection with about 50 documents can take anywhere from 10 - 55 seconds.",
                    "@ziban note that documents is not the unit of measure that is important here, I think the appropriate unit of measure is maybe documents for the actual query to run, but for this issue it might be `` size of result set'' - are the documents large ( indicating a serialization/bridge issue ? )",
                    ".",
                    "Basically - there's a real need to tease apart the components of performance to see where the problem is.",
                    "If you could use a profiler that would help",
                    "@mikehardy I did some testing",
                    "I did some estimations on the time it takes to make some firebase calls between v5 and v6 using console.time on an emulator ( Android Nexus 5 Api 22 ).",
                    "Where A has the following structure",
                    "The number of document always retrieved was 1 / A will always be a single object.",
                    "Time ranged from ~ 4000ms to ~ 15000ms",
                    "Time ranged from ~ 3000ms to 12000ms",
                    "Time ranged from ~ 400ms to ~ 10000ms",
                    "Where B contains multiple entries each having the following structure:",
                    "The number of entries was ~ 1700.",
                    "I did not apply any queries.",
                    "Time was approximately ~ 1800ms -- ~ 4000ms",
                    "Where C contains multiple entries each having the following structure:",
                    "where the stringified_object had this structure",
                    "was ~ 10000 ( This was the biggest ).",
                    "Time was approximately ~ 5000 -- 8000ms",
                    "Time was approximately ~ 1000ms - ~ 3000ms.",
                    "Time was approximately ~ 500ms - ~ 3000ms.",
                    "Where D contains multiple entries each having the following structure:",
                    "The number of entries was ~ 2000.",
                    "I applied a query filtering on two fields which are indexed",
                    "Time was approximately ~ 1500ms -- ~ 3000ms",
                    "Even though this is not the best data, I think it shows that there is a performance degradation that warrants some investigations.",
                    "That last one is very interesting.",
                    "You mention counts, but don't mention sizes.",
                    "What are the sizes of these objects, and does the performance vary between v5/v6 with different sizes but same counts ?",
                    "In order to test this and really identify it we may need a script that reproducibly creates a test data set inside firebase so we can tune the test data itself and we know that we have a reproducible test and aren't chasing phantoms",
                    "Are you creating this test data in live environment or did you generate it specifically for this test ?",
                    "If you did generate, could you share the test data generator ?",
                    "I am using the data from a live environment but I can write a script that generates almost similar data.",
                    "The only variable was rn firebase v6 and v5.",
                    "I can estimate each object to be between 50 - 200 bytes on average.",
                    "The last one ( call 4 ) is the largest object.",
                    "But I think there is no need even for a complex data set.",
                    "I think all this can be reproduced using a simple data sets - > Documents with flat objects, objects within objects, arrays, objects in arrays, etc..",
                    "In fact, I suspect that the performance hit in call 4 is caused by queries.",
                    "I'm inclined to agree with you, I think you're right, but in my experience performance tuning everything ( including generation of the test set ) has to be fully automated - even production of the results report, or it's horribly inefficient + does not get a solution",
                    "Let me get started on writing a simple script that can generate almost similar data.",
                    "I'll probably not be done till the end of the week but I will circle back here once I am done and we can move on from there.",
                    "Sounds like how we find the real source of the problem ( that is to say, sounds fantastic ! )",
                    "You can check here https://github.com/ziban/rn-firebase-perf-data-generator for a small project that generates the data I described above.",
                    "I wrote it in a hurry so there might be errors here and there but it should work.",
                    "I've not had the time to create a sample RN project to test this.",
                    "@Ehesp / @Salakar ( But specifically Eliot - I know you looked into firestore perf before ) - we have a test data generator now thanks to @ziban along with some results above that should help finally isolate where the bottleneck is without a lot of time wasted not controlling for data.",
                    "The index.js in that project let's you control how many of each level of a tree to make, and while it isn't parameterized ( to possible change how big each node is ) it would be easy to change.",
                    "Combine that with a driver that creates the data then times queries and the full perf-testing rig exists",
                    "I'll get this looked into - what's really odd is at the time we did some benchmark testing against v5 and it was quicker in all cases.",
                    "Thanks for the info though @ziban, will help massively.",
                    "Ok so there could be a `` quick fix'' for this, however we need to be careful.",
                    "Generally we try to perform all logic on a different thread to the UI, so you don't get UI jank when something is happening on the device ( e.g. converting a load of query results into a React Native friendly format ).",
                    "We do this with Tasks, and use an Executor:",
                    "If you actually look at the implementation of this:",
                    "It's a single threaded executor ...",
                    "now, this will literally queue operations up using a single thread.",
                    "If something else is happening internally, it'll have to wait.",
                    "What we could do instead is use a cached thread pool.",
                    "I'd guess that helps performance, but we need to make sure all the tests are passing because it can introduce some odd async type bugs.",
                    "Nice, then can spread across all cores on the device and map reduce haha - I kid, but having a thread pool should not be too big of a change - good idea",
                    "This assumes of course that profiling shows that's the bottleneck ( fully optimized code blocked by something ) as opposed to something terrible in the single thread ...",
                    "Curios here - > If this was the case then, wouldn't it mean that query calls would be slow inconsistently ie if call A then B would be different from B then A ( depending on which one is faster ) ?",
                    "Or calls would be slow over time as the build-up occurred ?",
                    "Also, what would be the difference between v5 and v6 ?",
                    "@ziban I lean towards your `` that probably won't help'' stance, but using your test generator and a harness before any effort would focus the effort on what would work.",
                    "Might be more threads, but probably it's just something obvious a profiler would show.",
                    "I'd love to do it myself but have not had time yet and likely won't for quite a while unless it hits me personally, sorry",
                    "Part of the issue with firestore is how the data has to be iterated to convert it to a readable data structure on both sides.",
                    "Generally with a large payload this can take some time, and will lock up the thread.",
                    "I'm not 100 % sure, but it should help.",
                    "I've got @russellwheatley tasked with digging into this one !",
                    "did you ever find anything ?",
                    "Hey @ziban, I haven't been able to solve this problem as yet.",
                    "I didn't find any performance difference between using a single thread and a cached thread pool as noted above.",
                    "I think that makes sense anyway because the benefits would probably be seen in an app being utilised fully ( and single thread queued up ) as opposed to the Firestore queries I was executing in isolation of any other tasks.",
                    "I'm currently working on this in my own time whilst having a couple of other tasks ahead of it so I haven't been able to give it my full attention yet.",
                    "But it is on my radar so bear with me: )",
                    "I do appreciate the data generator you made which I did use myself !",
                    "I can try to help.",
                    "Is there any documentation/tips on how I can get started contributing ( e.g looking into such a problem in rn-firebase ) ?",
                    "I.e something a bit more technical.",
                    "Or will I have just dig deep into code and figure it out as I go ?",
                    "We have a contributing guide here: https://github.com/invertase/react-native-firebase/blob/master/CONTRIBUTING.md.",
                    "In terms of the technical aspect, I'm afraid there is no document that will help you ( at least, not to my knowledge ).",
                    "It is a case of digging into the code and getting your hands dirty.",
                    "As a breadcrumb, my next line of inquiry is to look at how we map data and send it across the bridge to native side: https://github.com/invertase/react-native-firebase/blob/master/packages/firestore/lib/utils/typemap.js",
                    "We could potentially look at using buffers or something along those lines to improve performance.",
                    "Silly question, but just to clarify, you did run these tests in isolation: # 3491 ( comment ) ?",
                    "Yeah - I just got going again for a PR and the `` tests'' module in the monorepo gets you set up to execute everything on iOS and Android, then you can make a performance test that is ` describe **.",
                    "only ** ( ` test name', ( ) = > etc etc ` and with the.",
                    "only bit it will only run that each time.",
                    "Then you can make a performance test inside the test harness that already exists if that's useful",
                    "@russellwheatley no, that was from a running app ( running in an emulator ).",
                    "Each call was made on a different page so that's as isolated as it got.",
                    "I have a feeling that this is probably where the problem lies because data that is `` stringified'' was way faster even though it was the largest.",
                    "I spent some time today doing a bit of digging found that most of the time is spent @ this call.",
                    "https://github.com/invertase/react-native-firebase/blob/master/packages/firestore/lib/FirestoreQuery.js#L169 ( Might mean the problem is on the other side of the bridge ?",
                    "I set a simple timer before the function call and after the function call and that's where the most time was spent ( e.g of out 4200ms, 4100ms was spent here ).",
                    "I measured calls in typemap & & it came to about 80ms to 100ms.",
                    "Good work zeroing in on it - you are definitely on the native side now, or perhaps just in between them, in this method",
                    "I think if you run the app from AndroidStudio you can fairly easily do some CPU profiling.",
                    "I find these areas of AndroidStudio a little intimidating because I don't use them often but every time I try I'm able to see what I want without much fuss, you might give it a shot ?",
                    "@mikehardy I've timed that function call and it comes to about 2seconds.",
                    "I can not account for the other 4 - 6 seconds.",
                    "This is the first time I am working on the native side so chances are I am missing something.",
                    "Edit: Retimed the function and this is where most of the time is spent.",
                    "what did the profiler say ?",
                    "I can share some screenshots: It does not show individual functions though",
                    "A correction: retimed the function again and most of the time is spent there.",
                    "I do not know if the profiler info helps much ?",
                    "That looks like it's parked in OkHTTP network code a lot.",
                    "I would want to expand the stack trace on the dominant method and see who is calling it.",
                    "Is there some socket buffer size misconfiguration somewhere so it's round-tripping on the network and getting awful throughput ?",
                    "Or is it looping one item at a time instead of batching at the logic level ( if that's even possible ? )",
                    "?",
                    "I had the react-native js debugger open.",
                    "Look at the 10.0.2.2:8081 next to it - > It's",
                    "Never debug a performance problem while using the react-native debugger.",
                    "It executes your JS code in the browser, did you know that ?",
                    "No statements about or measurements of performance are valid when it's going through the debugger",
                    "Always thought it was some socket communication i.e just passing messages across.",
                    "I didn't know it either until I started maintaining react-native-device-info and thought I was being clever using `` synchronous native methods'' to make APIs available for people in non-async way, and found out the hard way that doesn't work on the debugger because ( mind-blowingly, to me ) it runs the whole bundle in browser.",
                    "I'm having the same problem.",
                    "My RN project with FB v5 is fast, but in v6 it was very slow.",
                    "Curious is that only on Android, because on iOS is good.",
                    "@emersiljr, some things you can do in the meantime:",
                    "- > Try to do some local caching if you can afford it.",
                    "The first call might be slow but you can create the illusion that the latter calls are fast.",
                    "- > check if you have firebase calls within firebase calls.",
                    "Try to break the calls to be independent/eliminate some calls/cache repeated results.",
                    "I looked into this problem for a while and it seems that the library spends a considerable amount of time processing the data on the android before sending it over the bridge.",
                    "I suspect that the problem might lie in firebase android sdk but I am not sure what exactly is ( probably they might have removed something that cached calls/results on their side ).",
                    "Sadly, I've not had the time recently to look into this more.",
                    "i fixed it with firestore ( ).",
                    "disableNetwork ( ) and NetInfo:",
                    "Fascinating, this sounds like it might be an upstream issue for offline vs online, unrelated to the `` gets slower with different data issue'', has anyone checked in firebase-android-sdk or firebase-ios-sdk to see if they are tracking something similar or can reproduce with just the native APIs from those SDKs ?",
                    "Thanks, help me a lot !",
                    "Closing as the above solution appears to solve the problem",
                    "Loading lists ( encounters, habitat-uses ) takes a long time when offline",
                    "\ud83d\udd25 Querying is extremely slow, same query in python 8X faster.",
                    ""
                ],
                "title": "Slow Query Response in Offline Mode \u00b7 Issue # 3491 \u00b7 invertase/react-native-firebase \u00b7 GitHub"
            }
        ],
        "qa": [
            {
                "uid": "4015026",
                "link": "https://stackoverflow.com/questions/4015026",
                "title": "SQLite Optimization for Android application",
                "answers": [
                    {
                        "uid": 4086271,
                        "score": 1,
                        "text": [
                            "I would add these:",
                            "Using of rawQuery -LRB- -RRB- instead of building using ContentValues will fasten up in certain cases.",
                            "off course it is a little tedious to write raw query.",
                            "If you have a lot of string / text type data, consider creating Virtual tables using full text search -LRB- FTS3 -RRB-, which can run faster query.",
                            "you can search in google for the exact speed improvements."
                        ]
                    },
                    {
                        "uid": 4086745,
                        "score": 13,
                        "text": [
                            "Pin down exactly which queries you need to optimize.",
                            "Grab a copy of a typical database and use the REPL to time queries.",
                            "Use this to benchmark any gains as you optimize.",
                            "Use ANALYZE to allow SQLite's query planner to work more efficiently.",
                            "For SELECTs and UPDATEs, indexes can things up, but only if the indexes you create can actually be used by the queries that you need speeding up.",
                            "Use EXPLAIN QUERY PLAN on your queries to see which index would be used or if the query requires a full table scan.",
                            "For large tables, a full table scan is bad and you probably want an index.",
                            "Only one index will be used on any given query.",
                            "If you have multiple predicates, then the index that will be used is the one that is expected to reduce the result set the most -LRB- based on ANALYZE -RRB-.",
                            "You can have indexes that contain multiple columns -LRB- to assist queries with multiple predicates -RRB-.",
                            "If you have indexes with multiple columns, they are usable only if the predicates fit the index from left to right with no gaps -LRB- but unused columns at the end are fine -RRB-.",
                            "If you use an ordering predicate -LRB- <, < =, > etc -RRB- then that needs to be in the last used column of the index.",
                            "Using both WHERE predicates and ORDER BY both require an index and SQLite can only use one, so that can be a point where performance suffers.",
                            "The more indexes you have, the slower your INSERTs will be, so you will have to work out the best trade-off for your situation.",
                            "If you have more complex queries that can't make use of any indexes that you might create, you can de-normalize your schema, structuring your data in such a way that the queries are simpler and can be answered using indexes.",
                            "If you are doing a large number of INSERTs, try dropping indexes and recreating them at the end.",
                            "You will need to benchmark this.",
                            "SQLite LINK using savepoints, but I'm not sure that you'll gain anything there performance-wise.",
                            "You can LINK.",
                            "If you can recover from database corruption yourself, then this might work for you.",
                            "You could perhaps only do this when you're doing intensive operations that you can recover from manually.",
                            "I'm not sure how much of this you can get to from an Android application.",
                            "There is a LINK for optimizing SQLite in general in the SQLite documentation."
                        ]
                    },
                    {
                        "uid": 9624010,
                        "score": 10,
                        "text": [
                            "Here's a bit of code to get EXPLAIN QUERY PLAN results into Android logcat from a running Android app.",
                            "I'm starting with an SQLiteOpenHelper dbHelper and an SQLiteQueryBuilder qb.",
                            "I dropped this into my ContentProvider.query -LRB- -RRB- and now I can see exactly how all the queries are getting performed.",
                            "-LRB- In my case it looks like the problem is too many queries rather than poor use of indexing ; but maybe this will help someone else ... -RRB-"
                        ]
                    },
                    {
                        "uid": 17423400,
                        "score": 0,
                        "text": [
                            "A minor point to add to Robie's otherwise comprehensive answer: the VFS in SQLite -LRB- which is mostly concerned with locking -RRB- can be swapped out for alternatives.",
                            "You may find one of the alternatives like unix-excl or unix-none to be faster but heed the warnings on the LINK !",
                            "LINK -LRB- of table structures -RRB- is also worth considering -LRB- if you haven't already -RRB- simply because it tends to provide the smallest representation of the data in the database ; this is a trade-off, less I/O for more CPU, and one that is usually worthwhile in medium-scale enterprise databases -LRB- the sort I'm most familiar with -RRB-, but I'm afraid I've no idea whether the trade-off works well on small-scale platforms like Android."
                        ]
                    }
                ],
                "tags": [
                    "android",
                    "optimization",
                    "sqlite"
                ]
            }
        ],
        "other": [
            {
                "link": "https://medium.com/androiddevelopers/large-database-queries-on-android-cb043ae626e8",
                "type": "misc",
                "content": [
                    "Photo by Anastasia Zhenina on Unsplash",
                    "Large Database Queries on Android",
                    "Windows of OpportunityChris CraikFollowSep 15, 2017 \u00b7 7 min read",
                    "Chris CraikFollowSep 15, 2017 \u00b7 7 min read",
                    "android-architecture-components/PagingSampleandroid-architecture-components - Samples for Android Architecture Components.github.com",
                    "android-architecture-components - Samples for Android Architecture Components.",
                    "Android DevelopersThe official Android Developers publication on MediumFollow2 .6 K 12",
                    "Android DevelopersThe official Android Developers publication on MediumFollow",
                    "The official Android Developers publication on Medium",
                    "Thanks to Florina Muntenescu, Chet Haase, Yigit Boyar, and Daniel Galpin.",
                    "DatabaseAndroid2 .6 K claps2 .6 K claps12 responsesWritten byChris CraikFollowFollowAndroid DevelopersFollowThe official Android Developers publication on MediumFollowWritten byChris CraikFollowAndroid DevelopersFollowThe official Android Developers publication on MediumMore From MediumDeploy Django Project on HerokuSinghalpriyansh in Django Framework -- Real World ProjectsGCP + Kubernetes + Load Balancers TutorialRyle Zhou in CodeXIntegrating migration tool in Gin framework ( Golang ) Sumedh Shakya in wesionaryTEAMAlgorithms and Big-O IntroductionPaul Torres in CodeXInteracting with AWS Aurora ServerlessChris HareProcessing IoT Data with Node.js & TypeScriptLen Joseph in The StartupWhy I Switched from Atom to VS CodeShahed NasserHow to Generate mock streaming data using Kinesis Data Generator.Sneha Mehrin",
                    ""
                ],
                "title": "Large Database Queries on Android | by Chris Craik | Android Developers | Medium"
            }
        ]
    },
    "parsed": true
}