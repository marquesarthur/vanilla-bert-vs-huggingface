{
    "task": "Explanation of the getView() method of an ArrayAdapter",
    "description": "Could you explain the getView ( ) method of an ArrayAdapter.\nI read the docs and it has three parameters:\nposition: The position of the item within the adapter's data set of the item whose view we want.\nconvertView: The old view to reuse, if possible.\nNote: You should check that this view is non-null and of an appropriate type before using.\nIf it is not possible to convert this view to display the correct data, this method can create a new view.\nHeterogeneous lists can specify their number of view types, so that this View is always of the right type ( see getViewTypeCount ( ) and getItemViewType ( int ) ).\nparent: The parent that this view will eventually be attached to\nI understood the position parameter.\nLike they said, it's imply the position of the item, who view has been requested.\nWhere does convertView come from.\nI've seen many examples where they check if convertView is null.\nIf is is null, they inflate a new instance of the row layout, populate it and return it.\nI guess I've gotten my head around that too but one thing still baffles me.\nWhat is the layout that is passed in through the convertView parameter.\nIs if the resource parameter that is passed in when initialising the ArrayAdapter ?\nIs is a cached copy of the last layout returned by getView ( ) ?\nWhat does the parent parameter do.\nI haven't seen too many examples utilising this.\nMost of them simply reuse/inflate a row layout and return it.\n( I'm asking because I have an on-click animation in my ListView.\nSpecifically this one that aims to replicate Spotify's dropdown quick action menu.\nMy animation has been a little sluggish.\nAfter diagnosing this issue for a while, I've realized that this has been due to the fact that my getView ( ) method takes a bit of time to complete as I'm inflating a fresh row layout in every iteration.\nSomeone suggested caching the row layout in a ViewHolder while other examples point to reusing the convertView parameter i.e. only inflating a row layout if convertView is null. )",
    "type": "SO",
    "link": "https://stackoverflow.com/questions/12400338",
    "question_id": "12400338",
    "resources": {
        "api": [
            {
                "link": "https://developer.android.com/reference/android/widget/ArrayAdapter",
                "type": "android",
                "content": [
                    "public class ArrayAdapter extends BaseAdapter implements Filterable, ThemedSpinnerAdapter",
                    "You can use this adapter to provide views for an AdapterView, Returns a view for each object in a collection of data objects you provide, and can be used with list-based user interface widgets such as ListView or Spinner.",
                    "By default, the array adapter creates a view by calling Object #toString ( ) on each data object in the collection you provide, and places the result in a TextView.",
                    "You may also customize what type of view is used for the data object in the collection.",
                    "To customize what type of view is used for the data object, override getView ( int, android.view.View, android.view.ViewGroup ) and inflate a view resource.",
                    "For an example of using an array adapter with a ListView, see the Adapter Views guide.",
                    "For an example of using an array adapter with a Spinner, see the Spinners guide.",
                    "Note: If you are considering using array adapter with a ListView, consider using RecyclerView instead.",
                    "RecyclerView offers similar features with better performance and more flexibility than ListView provides.",
                    "See the Recycler View guide.",
                    "Adds the specified object at the end of the array.",
                    "Adds the specified items at the end of the array.",
                    "Adds the specified Collection at the end of the array.",
                    "Remove all elements from the list.",
                    "Creates a new ArrayAdapter from external resources.",
                    "Gets a string representation of the adapter data that can help AutofillService autofill the view backed by the adapter.",
                    "Returns the context associated with this array adapter.",
                    "How many items are in the data set represented by this Adapter.",
                    "Gets a View that displays in the drop down popup the data at the specified position in the data set.",
                    "Returns the value previously set by a call to setDropDownViewTheme ( android.content.res.Resources.Theme ).",
                    "Returns a filter that can be used to constrain data with a filtering pattern.",
                    "Get the data item associated with the specified position in the data set.",
                    "Get the row id associated with the specified position in the list.",
                    "Returns the position of the specified item in the array.",
                    "Get a View that displays the data at the specified position in the data set.",
                    "Inserts the specified object at the specified index in the array.",
                    "Notifies the attached observers that the underlying data has been changed and any View reflecting the data set should refresh itself.",
                    "Removes the specified object from the array.",
                    "Sets the layout resource to create the drop down views.",
                    "Sets the Resources.Theme against which drop-down views are inflated.",
                    "Control whether methods that change the list ( add ( T ), addAll ( java.util.Collection ), addAll ( java.lang.Object -LSB- -RSB- ), insert ( T, int ), remove ( T ), clear ( ), sort ( java.util.Comparator ) ) automatically call notifyDataSetChanged ( ).",
                    "Sorts the content of this adapter using the specified comparator.",
                    "This constructor will result in the underlying data collection being immutable, so methods such as clear ( ) will throw an exception.",
                    "The content of the array is obtained through Resources.getTextArray ( int ).",
                    "It should only be set ( i.e., non-null if the values do not represent PII ( Personally Identifiable Information - sensitive data such as email addresses, credit card numbers, passwords, etc..",
                    "For example, it's ok to return a list of month names, but not a list of usernames.",
                    "A good rule of thumb is that if the adapter data comes from static resources, such data is not PII - see ViewStructure.setDataIsSensitive ( boolean ) for more info.",
                    "The context is used to create views from the resource passed to the constructor.",
                    "This method is usually implemented by Adapter classes.",
                    "You can either create a View manually or inflate it from an XML layout file.",
                    "When the View is inflated, the parent View ( GridView, ListView ... ) will apply default layout parameters unless you use LayoutInflater.inflate ( int, android.view.ViewGroup, boolean ) to specify a root view and to prevent attachment to the root.",
                    "By default, drop-down views are inflated against the theme of the Context passed to the adapter's constructor.",
                    "If set to false, caller must manually call notifyDataSetChanged ( ) to have the changes reflected in the attached view.",
                    "The default is true, and calling notifyDataSetChanged ( ) resets the flag to true.",
                    "getDropDownView ( int, android.view.View, android.view.ViewGroup )",
                    "getDropDownView ( int, View, ViewGroup )",
                    ""
                ],
                "title": "ArrayAdapter \u00a0|\u00a0 Android Developers"
            }
        ],
        "git": [
            {
                "link": "https://github.com/nostra13/Android-Universal-Image-Loader/issues/462",
                "content": [
                    "long list show incorrect list items on custom listview with images from android universal image loader \u00b7 Issue # 462 \u00b7 nostra13/Android-Universal-Image - Loader \u00b7 GitHub",
                    "long list show incorrect list items on custom listview with images from android universal image loader",
                    "I tried to display a custom list view that display custom list items with image and text lines.",
                    "I want two type of list items ( left align and right alined, just as message thread ).",
                    "I have used Android-Universal-Image-Loader to load web images.",
                    "bt when i load the list, it load wrong list items time to time.",
                    "when i scroll fast it changed the alignment of list items time to time.",
                    "here u can see the one user ( a girl profile picture ) reply not in a right aligned all the time",
                    "how to get solved this issue ?",
                    "The text was updated successfully, but these errors were encountered:",
                    "You should check your holder here",
                    "If the holder holds the view you want, you can reuse it.",
                    "If not you should instantiate a new one.",
                    "Hope this could help: )",
                    "can u please explain how to do that ?",
                    "It seems you have mistaken logic in your getView ( ).",
                    "Check what happens if convertView is not null.",
                    "You should apply alignment in code in that case.",
                    "I think that's a common mistake when using different layouts for rows but not implementing Adapter.getItemViewType ( ) and getViewTypeCount ( ) correctly.",
                    "The system wasn't instructed that you have two different layouts and won't separate them out into pools and may give you back the wrong layout at times.",
                    "Eventually you can ask for help on StackOverFlow - http://stackoverflow.com/",
                    ""
                ],
                "title": "long list show incorrect list items on custom listview with images from android universal image loader \u00b7 Issue # 462 \u00b7 nostra13/Android-Universal-Image - Loader \u00b7 GitHub"
            }
        ],
        "qa": [
            {
                "uid": "6442054",
                "link": "https://stackoverflow.com/questions/6442054",
                "title": "How does ArrayAdapter getView() method works?",
                "answers": [
                    {
                        "uid": 17224501,
                        "score": 27,
                        "text": [
                            "getView -LRB- -RRB- is the main part of your adapter.",
                            "It returns View that will be displayed as your list/grid/gallary / any view that use adapter item.",
                            "It triggers when you scroll the view -LRB- list for example -RRB-.",
                            "So the first thing you should do its to create your custom adapter.",
                            "You may extend it from BaseAdapter.",
                            "Then you need to create some data to display -LRB- or pass it to adapter from out side - its better solution -RRB-.",
                            "After that override getView -LRB- -RRB- method and make sure to return your custom View there.",
                            "In your case it should be a Layout with ImageView and TextView -LRB- and dont forget to fill them -RRB-.",
                            "You can learn more from:"
                        ]
                    },
                    {
                        "uid": 21848246,
                        "score": 12,
                        "text": [
                            "in BaseAdapter you have getView function that is called by for an AdapterView i.e. ListView.",
                            "you need to override getCount method of the BaseAdapter to return total number of views to diplay.",
                            "And in getView you get following things:",
                            "position:",
                            "getView going to be called for each position every time it is displayed.",
                            "convertView",
                            "As getView is call many times inflating a new view every time is expensive so list view provides you one of the previously created view to re-use.",
                            "parent",
                            "A reference to the parent view that this view will be a child of.",
                            "ArrayAdapter is a subclass of BaseAdapter which takes ArrayList -LRB- or array -RRB- in constructor.",
                            "And overrides getCount for you.",
                            "So all you need to implement is getView"
                        ]
                    }
                ],
                "tags": [
                    "android",
                    "android-arrayadapter"
                ]
            }
        ],
        "other": [
            {
                "link": "https://www.raywenderlich.com/155-android-listview-tutorial-with-kotlin",
                "type": "misc",
                "content": [
                    "iOS & Swift Learn iOS development with SwiftUI and UIKit",
                    "Android & Kotlin Learn Android development in Kotlin",
                    "Flutter Learn multi-platform development with Flutter",
                    "Browse the entire Android & Kotlin library",
                    "SwiftUI by Tutorials -- New Chapters !",
                    "Your definitive guide to building fluid and declarative UI in Swift.Now fully updated in its third edition, with new content and fresh new app designs.Start reading for free -- today !",
                    "Android ListView Tutorial with Kotlin",
                    "Adapters: Servants of the ListView",
                    "What Exactly is an Adapter ?",
                    "Defining the Layout of the ListView's Rows",
                    "Where to Go From Here ?",
                    "Android ListView Tutorial with Kotlin In this tutorial, you'll learn how to use Android's ListView to easily create scrollable lists, by creating a simple recipe list app using Kotlin.",
                    "Feb 21 2018 \u00b7 Article ( 25 mins ) \u00b7 Beginner",
                    "Update Note: This tutorial is now up to date with the latest version of Android Studio version 3.0.1, and uses Kotlin for app development.",
                    "Original tutorial by Odie Edo-Osagie.",
                    "How many times have you needed an app to display a group of related items in a list ?",
                    "How about all the time.",
                    ":] Displaying a specific list is essential to the function of almost any app that queries a set of data and returns a list of results, so many apps need to do this at one point or another.",
                    "For instance, maybe you have a chat app that queries a certain social platform's database to find your friends, and then want to display them in a list that lets you select which friends to connect with.",
                    "Any time you need to display a lot of data and make it easy to navigate, you've got a job for Android's ListView, which handily creates scrollable lists.",
                    "In recent years, ListView has been supplanted by RecyclerView.",
                    "Nevertheless, studying ListView still has it's benefits:",
                    "You can gain insights into why RecyclerView works the way it does You may run into ListView in legacy code, and it's best to know how to work with it",
                    "By working through this tutorial, you'll become familiar with ListView, and you'll do so by creating a recipe list app.",
                    "How to construct and populate a ListView How to customize the layout How to style and beautify a ListView How to optimize a ListView's performance",
                    "You're welcome to up your game in the kitchen by learning the recipes too, but maybe wait until you've built the app, okay ?",
                    "Note: If you're new to Android Development or Kotlin, it's highly recommended that you start with Beginning Android Development with Kotlin to learn your way around the basic tools and concepts.",
                    "Getting Started To kick things off, start by downloading the materials for this tutorial ( you can find a link at the top or bottom of the page ) and open Android Studio 3.0.1 or greater.",
                    "In the Welcome to Android Studio dialog, select Open an existing Android Studio project.",
                    "In the following dialog, select the top-level directory of the starter project AllTheRecipes-Starter and click OK.",
                    "Inside the imported project, you'll find some assets and resources that you'll use to create your app, such as strings, colors, XML layout files, and fonts.",
                    "Additionally, there's some boilerplate code modeling a Recipe and a bare bones MainActivity class.",
                    "You should see something like this:",
                    "Are you ready to get cracking on this list thing ?",
                    "Add Your First ListView The first order of business is to add a ListView to MainActivity.",
                    "As you may know, this is the file that describes the layout of MainActivity.",
                    "Add a ListView to MainActivity by inserting the following code snippet inside the ConstraintLayout tag:",
                    "Open MainActivity and add an instance variable for your ListView with the following line:",
                    "Add the following snippet below the existing code inside the onCreate method:",
                    "Here's a breakdown of what's happening in there:",
                    "This loads a list of Recipe objects from a JSON asset in the app.",
                    "Notice that the starter project contains a Recipe class that models and stores the information about the recipes that will be displayed.",
                    "This creates an array of strings that'll contain the text to be displayed in the ListView.",
                    "This populates the ListView's data source with the titles of the recipes loaded in section one.",
                    "This creates and sets a simple adapter for the ListView.",
                    "The ArrayAdapter takes in the current context, a layout file specifying what each row in the list should look like, and the data that will populate the list as arguments.",
                    "Your ListView has all that it needs to function.",
                    "Build and run the project.",
                    "Adapters: Servants of the ListView Your recipe app is starting to look functional, but not all that appetizing ... yet.",
                    "In the previous section, you successfully built a list of recipe titles.",
                    "It works, but it's nothing to get excited about.",
                    "What if you needed to show more than just the titles ?",
                    "More than just text ?",
                    "Maybe even add some screen-licking worthy thumbnails ?",
                    "For these cases, the simple ArrayAdapter you just used won't cut it.",
                    "You'll have to take matters into your own hands and write your own adapter.",
                    "Well, you won't actually write your own adapter, per se ; you'll simply extend a regular adapter and make some tweaks.",
                    "An adapter loads the information to be displayed from a data source, such as an array or database query, and creates a view for each item.",
                    "Then it inserts the views into the ListView.",
                    "Adapters not only exist for ListViews, but for other kinds of views as well ; ListView is a subclass of AdapterView, so you can populate it by binding it to an adapter.",
                    "The adapter acts as the middle man between the ListView and data source, or its provider.",
                    "It works kind of like this: The ListView asks the adapter what it should display, and the adapter jumps into action:",
                    "It fetches the items to be displayed from the data source It decides how they should be displayed It passes this information on to the ListView In short, The ListView isn't very smart, but when given the right inputs it does a fine job.",
                    "It fully relies on the adapter to tell it what to display and how to display it.",
                    "Building Adapters Okay, now that you've dabbled in theory, you can get on with building your very own adapter.",
                    "Create a new class by right-clicking on the com.raywenderlich.alltherecipes package and selecting New > Kotlin File/Class.",
                    "Name it RecipeAdapter and define it with the following:",
                    "You've made the skeleton of the adapter.",
                    "It extends the BaseAdapter class, which requires several inherited methods you'll implement after taking care of one more detail.",
                    "Update the RecipeAdapter class as follows:",
                    "In here, you've added the properties that will be associated with the adapter and defined a primary constructor for RecipeAdapter.",
                    "Your next step is to implement the adapter methods.",
                    "Kick it off by placing the following code at the bottom of RecipeAdapter:",
                    "getCount ( ) lets ListView know how many items to display, or in other words, it returns the size of your data source.",
                    "getItem ( ) returns an item to be placed in a given position from the data source, specifically, Recipe objects obtained from dataSource.",
                    "This implements the getItemId ( ) method that defines a unique ID for each row in the list.",
                    "For simplicity, you just use the position of the item as its ID.",
                    "Finally, getView ( ) creates a view to be used as a row in the list.",
                    "Here you define what information shows and where it sits within the ListView.",
                    "You also inflate a custom view from the XML layout defined in res/layout/list_item_recipe.xml -- more on this in the next section.",
                    "Defining the Layout of the ListView's Rows You probably noticed that the starter project comes with the file res/layout/list_item_recipe.xml that describes how each row in the ListView should look and be laid out.",
                    "Below is an image that shows the layout of the row view and its elements:",
                    "Your task is to populate each element of the row view with the relevant recipe data, hence, you'll define what text goes in the `` title'' element, the `` subtitle'' element and so on.",
                    "In the getView ( ) method, add the following code snippet just before the return statement:",
                    "This obtains references to each of the elements ( or subviews ) of the row view, specifically the title, subtitle, detail and thumbnail.",
                    "Now that you've got the references sorted out, you need to populate each element with relevant data.",
                    "To do this, add the following code snippet under the previous one but before the return statement:",
                    "Here's what you're doing in the above snippet:",
                    "Getting the corresponding recipe for the current row.",
                    "Updating the row view's text views so they are displaying the recipe.",
                    "Making use of the open-source Picasso library for asynchronous image loading -- it helps you download the thumbnail images on a separate thread instead of the main thread.",
                    "You're also assigning a temporary placeholder for the ImageView to handle slow loading of images.",
                    "Note: You should never perform long-running tasks on the main thread.",
                    "When you do, you expose yourself to the risk of blocking the UI, and that would make scrolling your lists a nightmare !",
                    "Now open up MainActivity so that you can get rid of the old adapter.",
                    "In onCreate, replace everything below ( but not including ) this line:",
                    "You just replaced the rather simple ArrayAdapter with your own RecipeAdapter to make the list more informative.",
                    "Build and run and you should see something like this:",
                    "Now you're cooking for real !",
                    "Look at those recipes -- thumbnails and descriptions sure make a big difference.",
                    "Styling Now that you've got the functionality under wraps, it's time to turn your attention to the finer things in life.",
                    "In this case, your finer things are elements that make your app more snazzy, such as compelling colors and fancy fonts.",
                    "Look for some custom fonts under res/font.",
                    "You'll find three font files: josefinsans_bold.",
                    "Open RecipeAdapter.java and go to the getView ( ) method.",
                    "Just before the return statement, add the following:",
                    "In here, you're assigning a custom font to each of the text views in your rows' layout.",
                    "You access the font by creating a Typeface, which specifies the intrinsic style and typeface of the font, by using ResourcesCompat.getFont ( ).",
                    "Next you set the typeface for the corresponding TextView to set the custom font.",
                    "Your result should look like this:",
                    "On to sprucing up the colors, which are defined in res/values/colors.xml.",
                    "Open up RecipeAdapter and add the following below the inflater declaration:",
                    "You've created a hash map that pairs a recipe detail label with the resource id of a color defined in colors.xml.",
                    "Now go to the getView ( ) method, and add this line just above the return statement:",
                    "Working from the inside out:",
                    "Here you get the resource id for the color that corresponds to the recipe.label from the LABEL_COLORS hash map.",
                    "getColor ( ) is used inside of ContextCompat to retrieve the hex color associated with that resource id.",
                    "Then you set the color property of the detailTextView to the hex color.",
                    "Your app should look like this:",
                    "User Interaction Now your list has function and style.",
                    "What's it missing now ?",
                    "Try tapping or long pressing it.",
                    "There's not much to thrill and delight the user.",
                    "What could you add here to make the user experience that much more satisfying ?",
                    "Well, when a user taps on a row, don't you think it'd be nice to show the full recipe, complete with instructions ?",
                    "You'll make use of AdapterView.onItemClickListener and a brand spanking new activity to do this with elegance.",
                    "Make a New Activity This activity will display when the user selects an item in the list.",
                    "Right-click on com.raywenderlich.alltherecipes then select New > Activity > EmptyActivity to bring up a dialog.",
                    "Fill in the Activity Name with RecipeDetailActivity.",
                    "Leave the automatically populated fields as-is.",
                    "Check that your settings match these:",
                    "Open res/layout/activity_recipe_detail.xml and add a WebView by inserting the following snippet inside the ConstraintLayout tag:",
                    "WebView will be used to load and display a webpage containing the selected recipe's instructions.",
                    "Open up RecipeDetailActivity, and add a WebView reference as a property by adding the following line within the class definition:",
                    "Add the following below the webView property declaration:",
                    "This adds a companion object method to return an Intent for starting the detail activity, and sets up title and url extras in the Intent.",
                    "Head back to MainActivity and add the following to the bottom of the onCreate method:",
                    "Note: Before you dive into the explanation, make sure you understand the four arguments that are provided by onItemClick ; they work as follows:",
                    "parent: The view where the selection happens -- in your case, it's the ListView",
                    "view: The selected view ( row ) within the ListView",
                    "position: The position of the row in the adapter",
                    "id: The row id of the selected item",
                    "You're setting the OnItemClickListener object for the ListView, and inside doing the following:",
                    "Get the recipe object for the row that was clicked Create an intent to navigate to your RecipeDetailActivity to display more information Launch the RecipeDetailActivity by passing the intent object you just created to the startActivity ( ) method.",
                    "Note: To learn more about intents, check out the awesome Android Intents Tutorial.",
                    "Once again, open RecipeDetailActivity and add the following snippet at the bottom of the onCreate method:",
                    "You can see a few things happening here:",
                    "You retrieve the recipe data from the Intent passed from MainActivity by using the extras property.",
                    "You set the title on the action bar of this activity to the recipe title.",
                    "You initialize webView to the web view defined in the XML layout.",
                    "You load the recipe web page by calling loadUrl ( ) with the corresponding recipe's URL on the web view object.",
                    "When you click on the first item in the list, you should see something like this:",
                    "Optimizing Performance Whenever you scroll the ListView, its adapter's getView ( ) method is called in order to create a row and display it on screen.",
                    "Now, if you look in your getView ( ) method, you'll notice that each time this method is called, it performs a lookup for each of the row view's elements by using a call to the findViewById ( ) method.",
                    "These repeated calls can seriously harm the ListView's performance, especially if your app is running on limited resources and/or you have a very large list.",
                    "You can avoid this problem by using the View Holder Pattern.",
                    "Implement a ViewHolder Pattern To implement the ViewHolder pattern, open RecipeAdapter and add the following after the getView ( ) method definition:",
                    "As you can see, you create a class to hold your exact set of component views for each row view.",
                    "The ViewHolder class stores each of the row's subviews, and in turn is stored inside the tag field of the layout.",
                    "This means you can immediately access the row's subviews without the need to look them up repeatedly.",
                    "Now, in getView ( ), replace everything above ( but NOT including ) this line:",
                    "Here's the play-by-play of what's happening above.",
                    "Check if the view already exists.",
                    "If it does, there's no need to inflate from the layout and call findViewById ( ) again.",
                    "If the view doesn't exist, you inflate the custom row layout from your XML.",
                    "Create a new ViewHolder with subviews initialized by using findViewById ( ).",
                    "Hang onto this holder for future recycling by using setTag ( ) to set the tag property of the view that the holder belongs to.",
                    "Skip all the expensive inflation steps and just get the holder you already made.",
                    "Get relevant subviews of the row view.",
                    "Finally, update the return statement of getView ( ) with the line below.",
                    "If your app was running a bit slow on the last build, you should see it running smoother now.",
                    ":] Where to Go From Here ?",
                    "You can download the completed project using the download button at the top or bottom of this tutorial.",
                    "When you develop for Android, AdapterViews are a common concept that you'll run into over and over again.",
                    "If you want to know more about the inner workings of the ListView and performance details, check out this article on performance tips for Android ListViews.",
                    "There are other ways to create lists, such as subclassing a ListActivity and ListFragment.",
                    "Both of these links take you to the official Android developer site so that you can learn more about how they work.",
                    "Both of these alternatives impose the restriction that the respective activity or fragment can only contain a ListView as its child view.",
                    "Suppose you wanted an activity that had a ListView as well as some other views, it would be impossible with a ListActivity.",
                    "The same goes for the ListFragment scenario.",
                    "And be sure to check out our RecyclerView and Intermediate RecyclerView tutorials to see the more modern way to show lists on Android.",
                    "Unlike ListView, RecyclerView enforces the use of the ViewHolder pattern and is much more flexible in terms of layout and animation.",
                    "Feel free to share your feedback, findings or ask any questions in the comments below or in the forums.",
                    "Talk to you soon !",
                    "User Interface Android & Kotlin Tutorials",
                    "raywenderlich.com Weekly The raywenderlich.com newsletter is the easiest way to stay up-to-date on everything you need to know as a mobile developer.",
                    "Get a weekly digest of our tutorials and courses, and receive a free in-depth email course as a bonus !",
                    "Add a rating for this content",
                    "Sign in to add a rating",
                    "The mobile development world moves quickly -- and you don't want to get left behind.",
                    "Learn iOS, Swift, Android, Kotlin, Dart, Flutter and more with the largest and highest-quality catalog of video courses and books on the internet.",
                    "Mark Complete ( All Chapters ) Clear Progress ( All Chapters )",
                    "New Fernando Cejas -- Podcast S11 E08 iOS & Swift Podcast Mar 17 2021 \u00b7 Article ( 1 min )",
                    "Join Nishant and Dru at the bar as we share drinks with Fernando Cejas over his interview in ` Living By The Code.'",
                    "Mar 17 2021 \u00b7 Article ( 1 min )",
                    "New SwiftUI by Tutorials, Third Edition -- Fully Updated with New Chapters !",
                    "iOS & Swift Announcements Mar 17 2021 \u00b7 Article ( 15 mins )",
                    "We're thrilled to announce the latest edition of SwiftUI by Tutorials -- completely reorganized, with new apps and new chapters to help you build your best UI ever !",
                    "Mar 17 2021 \u00b7 Article ( 15 mins )",
                    "New Custom Thumbnails and Previews with Quick Look on iOS iOS & Swift Other Core APIs Mar 17 2021 \u00b7 Article ( 25 mins )",
                    "Learn how to build your own Quick Look preview and thumbnail extensions to display custom file types in iOS.",
                    "Mar 17 2021 \u00b7 Article ( 25 mins )",
                    "New How to Create a 2D Snake Game in Flutter Flutter Graphics & Animation Mar 16 2021 \u00b7 Article ( 25 mins )",
                    "Learn how to use Flutter as a simple game engine by creating a classic 2D Snake Game.",
                    "Get to know the basics of 2D game graphics and how to control objects.",
                    "Mar 16 2021 \u00b7 Article ( 25 mins )",
                    "Joe Howard Joe's path to software development began in the fields of computational physics and systems engineering.",
                    "He has been a mobile ... Author",
                    "Odie Edo-Osagie Odie recently completed an undergraduate degree in Software Engineering and is a postgrad student at the University of East ... Author",
                    "In this tutorial, you'll learn how to use Android's ListView to easily create scrollable lists, by creating a simple recipe list app using Kotlin.",
                    ""
                ],
                "title": "Android ListView Tutorial with Kotlin | raywenderlich.com"
            },
            {
                "link": "https://guides.codepath.com/android/Using-an-ArrayAdapter-with-ListView",
                "type": "misc",
                "content": [
                    "Jump to SectionTable of ContentsRow View RecyclingUsing a Basic ArrayAdapterUsing a Custom ArrayAdapterDefining the ModelCreating the View TemplateDefining the AdapterAttaching the Adapter to a ListViewPopulating Data into ListViewConstructing Models from External SourceAttaching Event Handlers Within AdapterImproving Performance with the ViewHolder PatternBeyond ViewHoldersReferencesUsing an ArrayAdapter with ListViewEdit PagePage HistoryIn Android development, any time we want to show a vertical list of scrollable items we will use a ListView which has data populated using an Adapter.",
                    "The simplest adapter to use is called an ArrayAdapter because the adapter converts an ArrayList of objects into View items loaded into the ListView container.",
                    "The ArrayAdapter fits in between an ArrayList ( data source ) and the ListView ( visual representation ) and configures two aspects:",
                    "Which array to use as the data source for the list How to convert any given item in the array into a corresponding View object",
                    "Note as shown above that there are other data sources besides an ArrayAdapter such as the CursorAdapter which instead binds directly to a result set from a Local SQLite Database.",
                    "Row View Recycling When using an adapter and a ListView, we need to make sure to understand how view recycling works.",
                    "When your ListView is connected to an adapter, the adapter will instantiate rows until the ListView has been fully populated with enough items to fill the full height of the screen.",
                    "At that point, no additional row items are created in memory.",
                    "Instead, as the user scrolls through the list, items that leave the screen are kept in memory for later use and then every new row that enters the screen reuses an older row kept around in memory.",
                    "In this way, even for a list of 1000 items, only ~ 7 item view rows are ever instantiated or held in memory.",
                    "Here is a visual overview of recycling:",
                    "Here is another related diagram on view recycling:",
                    "Refer to this ListView guide for another look at how this works to optimize the performance of your lists.",
                    "Be sure to check out this Udacity video on view recycling as well.",
                    "If you wish to evaluate how fast your ListView is rendering, check out the Profiling GPU tool, which provides a graphical way of visualizing the layout performance.",
                    "Using a Basic ArrayAdapter To use a basic ArrayAdapter, you just need to initialize the adapter and attach the adapter to the ListView.",
                    "First, we initialize the adapter:",
                    "The ArrayAdapter requires a declaration of the type of the item to be converted to a View ( a String in this case ) and then accepts three arguments: context ( activity instance ), XML item layout, and the array of data.",
                    "Note that we've chosen simple_list_item_1.xml which is a simple TextView as the layout for each of the items.",
                    "Now, we just need to connect this adapter to a ListView to be populated:",
                    "By default, this will now convert each item in the data array into a view by calling toString on the item and then assigning the result as the value of a TextView ( simple_list_item_1.xml ) that is displayed as the row for that data item.",
                    "If the app requires a more complex translation between item and View then we need to create a custom ArrayAdapter instead.",
                    "Using a Custom ArrayAdapter When we want to display a series of items from a list using a custom representation of the items, we need to use our own custom XML layout for each item.",
                    "To do this, we need to create our own custom ArrayAdapter class.",
                    "See this repo for the source code.",
                    "First, we often need to define a model to represent the data within each list item.",
                    "Defining the Model Given a Java object that has certain fields defined such as a User class:",
                    "We can create a custom ListView of User objects by subclassing ArrayAdapter to describe how to translate the object into a view within that class and then using it like any other adapter.",
                    "Creating the View Template Next, we need to create an XML layout that represents the view template for each item in res/layout/item _ user.xml:",
                    "Defining the Adapter Next, we need to define the adapter to describe the process of converting the Java object to a View ( in the getView method ).",
                    "The naive approach to this ( without any view caching ) looks like the following:",
                    "That adapter has a constructor and a getView ( ) method to describe the translation between the data item and the View to display.",
                    "getView ( ) is the method that returns the actual view used as a row within the ListView at a particular position.",
                    "Another method used is getItem ( ) which is already present in the ArrayAdapter class and its task is to simply get the data item associated with the specified position in the data set which is associated with that ArrayAdapter.",
                    "Attaching the Adapter to a ListView Now, we can use that adapter in the Activity to display an array of items into the ListView:",
                    "At this point, the ListView is now successfully bound to the users array data.",
                    "Populating Data into ListView Once the adapter is attached, items will automatically be populated into the ListView based on the contents of the array.",
                    "You can add new items to the adapter at any time with:",
                    "which will append the new items to the list.",
                    "You can also clear the entire list at any time with:",
                    "Using the adapter now, you can add, remove and modify users and the items within the ListView will automatically reflect any changes.",
                    "Constructing Models from External Source In order to create model instances, you will likely be loading the data from an external source ( i.e database or REST JSON API ), so you should create two additional methods in each model to allow for construction of a list or a singular item if the data is coming from a JSON API:",
                    "For more details, check out our guide on converting JSON into a model.",
                    "If you are not using a JSON source for your data, you can safely skip this step.",
                    "Attaching Event Handlers Within Adapter Within a ListView, we can easily attach event listeners onto any of the views that are item position aware with:",
                    "You can also similarly pass an entire object through a tag as well as shown here:",
                    "With this approach you can easily access data as needed from within any event handlers.",
                    "Improving Performance with the ViewHolder Pattern To improve performance, we should modify the custom adapter by applying the ViewHolder pattern which speeds up the population of the ListView considerably by caching view lookups for smoother, faster item loading:",
                    "In this example we also have a private static class called ViewHolder.",
                    "Making calls to findViewById ( ) can be slow in practice, and if your adapter has to call it for each View in your row for every single row then you can often run into performance issues.",
                    "What the ViewHolder class does is cache the call to findViewById ( ).",
                    "Once your ListView has reached the max amount of rows it can display on a screen, Android is smart enough to begin recycling those row Views.",
                    "We check if a View is recycled with if ( convertView == null ).",
                    "If it is not null then we have a recycled View and can just change its values, otherwise we need to create a new row View.",
                    "The magic behind this is the setTag ( ) method which lets us attach an arbitrary object onto a View object, which is how we save the already inflated View for future reuse.",
                    "Beyond ViewHolders Customizing Android ListView Rows by Subclassing describes a strategy for obtaining instances of child views using a similar approach as a ViewHolder but without the explicit ViewHolder subclass.",
                    "Table of ContentsRow View RecyclingUsing a Basic ArrayAdapterUsing a Custom ArrayAdapterDefining the ModelCreating the View TemplateDefining the AdapterAttaching the Adapter to a ListViewPopulating Data into ListViewConstructing Models from External SourceAttaching Event Handlers Within AdapterImproving Performance with the ViewHolder PatternBeyond ViewHoldersReferences",
                    "In Android development, any time we want to show a vertical list of scrollable items we will use a ListView which has data populated using an Adapter.",
                    ""
                ],
                "title": "Using an ArrayAdapter with ListView | CodePath Android Cliffnotes"
            }
        ]
    },
    "parsed": true
}