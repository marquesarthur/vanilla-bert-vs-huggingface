{
    "task": "Permission Denial when trying to access contacts in Android",
    "description": "I am trying to access the contacts on the device and later display them in a list, however when I try to access them with a cursor, I get an error that I'm missing permissions for READ_CONTACTS but I have already gave permissions in my AndroidManifest.xml Code where I access Contacts:\nAny help will be appreciated !",
    "type": "SO",
    "link": "https://stackoverflow.com/questions/30293479",
    "question_id": "30293479",
    "resources": {
        "api": [
            {
                "link": "https://developer.android.com/training/permissions/requesting",
                "type": "android",
                "content": [
                    "Every Android app runs in a limited-access sandbox.",
                    "If your app needs to use resources or information outside of its own sandbox, you can declare a permission and set up a permission request that provides this access.",
                    "These steps are part of the workflow for using permissions.",
                    "If you declare any dangerous permissions, and if your app is installed on a device that runs Android 6.0 ( API level 23 ) or higher, you must request the dangerous permissions at runtime by following the steps in this guide.",
                    "If you don't declare any dangerous permissions, or if your app is installed on a device that runs Android 5.1 ( API level 22 ) or lower, the permissions are automatically granted, and you don't need to complete any of the remaining steps on this page.",
                    "The basic principles for requesting permissions at runtime are as follows:",
                    "Before you declare and request runtime permissions in your app, evaluate whether your app needs to do so.",
                    "You can fulfill many use cases in your app, such as taking photos, pausing media playback, and displaying relevant ads, without needing to declare any permissions.",
                    "If you conclude that your app needs to declare and request runtime permissions, complete these steps:",
                    "Check whether the user has already granted the runtime permission that your app requires.",
                    "If so, your app can access the private user data.",
                    "If not, continue to the next step.",
                    "You must check whether you have that permission every time you perform an operation that requires that permission.",
                    "Check whether your app should show a rationale to the user, explaining why your app needs the user to grant a particular runtime permission.",
                    "If the system determines that your app shouldn't show a rationale, continue to the next step directly, without showing a UI element.",
                    "If the system determines that your app should show a rationale, however, present the rationale to the user in a UI element.",
                    "This rationale should clearly explain what data your app is trying to access, and what benefits the app can provide to the user if they grant the runtime permission.",
                    "After the user acknowledges the rationale, continue to the next step.",
                    "Request the runtime permission that your app requires in order to access the private user data.",
                    "The system displays a runtime permission prompt, such as the one shown on the permissions overview page.",
                    "Check the user's response, whether they chose to grant or deny the runtime permission.",
                    "If the user granted the permission to your app, you can access the private user data.",
                    "If the user denied the permission instead, gracefully degrade your app experience so that it provides functionality to the user, even without the information that's protected by that permission.",
                    "Figure 1 illustrates the workflow and set of decisions associated with this process:",
                    "To check if the user has already granted your app a particular permission, pass that permission into the ContextCompat.checkSelfPermission ( ) method.",
                    "This method returns either PERMISSION_GRANTED or PERMISSION_DENIED, depending on whether your app has the permission.",
                    "If the ContextCompat.checkSelfPermission ( ) method returns PERMISSION_DENIED, call shouldShowRequestPermissionRationale ( ).",
                    "If this method returns true, show an educational UI to the user.",
                    "In this UI, describe why the feature, which the user wants to enable, needs a particular permission.",
                    "After the user views an educational UI, or the return value of shouldShowRequestPermissionRationale ( ) indicates that you don't need to show an educational UI this time, request the permission.",
                    "Users see a system permission dialog, where they can choose whether to grant a particular permission to your app.",
                    "Traditionally, you manage a request code yourself as part of the permission request and include this request code in your permission callback logic.",
                    "Another option is to use the RequestPermission contract, included in an AndroidX library, where you allow the system to manage the permission request code for you.",
                    "Because using the RequestPermission contract simplifies your logic, it's recommended that you use it when possible.",
                    "To allow the system to manage the request code that's associated with a permissions request, add dependencies on the following libraries in your module's build.gradle file:",
                    "You can then use one of the following classes:",
                    "The following steps show how to use the RequestPermission contract.",
                    "The process is nearly the same for the RequestMultiplePermissions contract.",
                    "In your activity or fragment's initialization logic, pass in an implementation of ActivityResultCallback into a call to registerForActivityResult ( ).",
                    "The ActivityResultCallback defines how your app handles the user's response to the permission request.",
                    "Keep a reference to the return value of registerForActivityResult ( ), which is of type ActivityResultLauncher.",
                    "To display the system permissions dialog when necessary, call the launch ( ) method on the instance of ActivityResultLauncher that you saved in the previous step.",
                    "After launch ( ) is called, the system permissions dialog appears.",
                    "When the user makes a choice, the system asynchronously invokes your implementation of ActivityResultCallback, which you defined in the previous step.",
                    "Note: Your app can not customize the dialog that appears when you call launch ( ).",
                    "To provide more information or context to the user, change your app's UI so that it's easier for users to understand why a feature in your app needs a particular permission.",
                    "For example, you might change the text in the button that enables the feature.",
                    "Also, the text in the system permission dialog references the permission group associated with the permission that you requested.",
                    "This permission grouping is designed for system ease-of-use, and your app shouldn't rely on permissions being within or outside of a specific permission group.",
                    "The following code snippet shows how to handle the permissions response:",
                    "And this code snippet demonstrates the recommended process of checking for a permission, and requesting a permission from the user when necessary:",
                    "As an alternative to allowing the system to manage the permission request code, you can manage the permission request code yourself.",
                    "To do so, include the request code in a call to requestPermissions ( ).",
                    "The following code snippet demonstrates how to request a permission using a request code:",
                    "After the user responds to the system permissions dialog, the system then invokes your app's implementation of onRequestPermissionsResult ( ).",
                    "The system passes in the user response to the permission dialog, as well as the request code that you defined, as shown in the following code snippet:",
                    "If the user denies a permission request, your app should help users understand the implications of denying the permission.",
                    "In particular, your app should make users aware of the features that don't work because of the missing permission.",
                    "When you do so, keep the following best practices in mind:",
                    "Highlight a specific part of your app's UI where there's limited functionality because your app doesn't have the necessary permission.",
                    "Several examples of what you could do include the following:",
                    "Don't display a generic message ; instead, mention which features are unavailable because your app doesn't have the necessary permission.",
                    "Don't block the user interface.",
                    "In other words, don't display a full-screen warning message that prevents users from continuing to use your app at all.",
                    "At the same time, your app should respect the user's decision to deny a permission.",
                    "Starting in Android 11 ( API level 30 ), if the user taps Deny for a specific permission more than once during your app's lifetime of installation on a device, the user doesn't see the system permissions dialog if your app requests that permission again.",
                    "The user's action implies `` don't ask again.''",
                    "On previous versions, users would see the system permissions dialog each time your app requested a permission, unless the user had previously selected a `` don't ask again'' checkbox or option.",
                    "In certain situations, the permission might be denied automatically, without the user taking any action.",
                    "( Similarly, a permission might be granted automatically as well. )",
                    "It's important to not assume anything about automatic behavior.",
                    "Each time your app needs to access functionality that requires a permission, you should check that your app is still granted that permission.",
                    "To provide the best user experience when asking for app permissions, also see App permissions best practices.",
                    "Starting in Android 11 ( API level 30 ), whenever your app requests a permission related to location, microphone, or camera, the user-facing permissions dialog contains an option called Only this time, as shown in Figure 2.",
                    "If the user selects this option in the dialog, your app is granted a temporary one-time permission.",
                    "Your app can then access the related data for a period of time that depends on your app's behavior and the user's actions:",
                    "When the user next opens your app and a feature in your app requests access to location, microphone, or camera, the user is prompted for the permission again.",
                    "If your app targets Android 11 ( API level 30 ) or higher and isn't used for a few months, the system protects user data by automatically resetting the sensitive runtime permissions that the user had granted your app.",
                    "This action has the same effect as if the user viewed a permission in system settings and changed your app's access level to Deny.",
                    "If your app follows best practices for requesting permissions at runtime, you don't need to make any changes to your app.",
                    "If needed, you can ask the user to prevent the system from resetting your app's permissions.",
                    "This is useful in situations where users expect your app to work primarily in the background, even without the user interacting with your app, such as in the following use cases:",
                    "To direct the user to your app's page in system settings, invoke an intent that includes the Intent.ACTION _ AUTO_REVOKE_PERMISSIONS intent action.",
                    "From this screen, users can prevent the system from resetting your app's permissions by doing the following:",
                    "To check whether auto-reset functionality is disabled for your app, call isAutoRevokeWhitelisted ( ).",
                    "If this method returns true, then the system doesn't auto-reset your app's permissions.",
                    "Some apps depend on access to sensitive user information related to call logs and SMS messages.",
                    "If you want to request the permissions specific to call logs and SMS messages and publish your app to the Play Store, you must prompt the user to set your app as the default handler for a core system function before requesting these runtime permissions.",
                    "For more information on default handlers, including guidance on showing a default handler prompt to users, see the guide on permissions used only in default handlers.",
                    "This section describes how to test several aspects of runtime permissions.",
                    "To grant all runtime permissions automatically when you install an app on an emulator or test device, use the - g option for the adb shell install command, as demonstrated in the following code snippet:",
                    "To verify that the system resets your app's permissions, do the following:",
                    "Save the default amount of time that the system waits to reset an app's permissions.",
                    "That way, you can restore it after testing:",
                    "Reduce the amount of time that the system waits to reset the permissions.",
                    "In the following example, the system is modified such that it resets an app's permissions only one second after you stop interacting with an app:",
                    "Invoke the auto-reset process manually, as shown in the following snippet.",
                    "Make sure that the test device has been turned on for a short while, about 45 seconds, before you run this command.",
                    "Verify that your app can handle the auto-reset event.",
                    "Restore the default amount of time that the system waits before it auto-resets an app's permissions:",
                    "For additional information about permissions, read these articles:",
                    "To learn more about requesting permissions, download the following sample apps:",
                    "Ask for permissions in context, when the user starts to interact with the feature that requires it.",
                    "Always provide the option to cancel an educational UI flow related to permissions.",
                    "If the user denies or revokes a permission that a feature needs, gracefully degrade your app so that the user can continue using your app, possibly by disabling the feature that requires the permission.",
                    "Don't assume any system behavior.",
                    "For example, don't assume that permissions appear in the same permission group.",
                    "A permission group merely helps the system minimize the number of system dialogs that are presented to the user when an app requests closely-related permissions.",
                    "In your app's manifest file, declare the permissions that your app might need to request.",
                    "Design your app's UX so that specific actions in your app are associated with specific runtime permissions.",
                    "Users should know which actions might require them to grant permission for your app to access private user data.",
                    "Wait for the user to invoke the task or action in your app that requires access to specific private user data.",
                    "At that time, your app can request the runtime permission that's required for accessing that data.",
                    "androidx.activity, version 1.2.0 or later.",
                    "androidx.fragment, version 1.3.0 or later.",
                    "To request a single permission, use RequestPermission.",
                    "To request multiple permissions at the same time, use RequestMultiplePermissions.",
                    "Several examples of what you could do include the following: Show a message where the feature's results or data would have appeared.",
                    "Display a different button that contains an error icon and color.",
                    "Show a message where the feature's results or data would have appeared.",
                    "While your app's activity is visible, your app can access the data.",
                    "If the user sends your app to the background, your app can continue to access the data for a short period of time.",
                    "If you launch a foreground service while the activity is visible, and the user then moves your app to the background, your app can continue to access the data until that foreground service stops.",
                    "If the user revokes the one-time permission, such as in system settings, your app can not access the data, regardless of whether you launched a foreground service.",
                    "As with any permission, if the user revokes your app's one-time permission, your app's process terminates.",
                    "Tap Permissions, which loads the App permissions settings screen.",
                    "Turn off the option called Remove permissions if app isn't used, as shown in Figure 3.",
                    "Android RuntimePermissionsBasic Sample Java | Kotlin",
                    ""
                ],
                "title": "Request app permissions \u00a0|\u00a0 Android Developers"
            }
        ],
        "git": [
            {
                "link": "https://github.com/morenoh149/react-native-contacts/issues/516",
                "content": [
                    "Contacts.getAll ( ) crashes Android app when permissions are not granted \u00b7 Issue # 516 \u00b7 morenoh149/react-native-contacts \u00b7 GitHub",
                    "Contacts.getAll ( ) crashes Android app when permissions are not granted",
                    "If permissions are not granted, the callback should be called, with the error field being non-null/undefined.",
                    "React Native does not even have the chance to catch the error.",
                    "Check permissions before calling Contacts.getAll ( )",
                    "The text was updated successfully, but these errors were encountered:",
                    "I'm not sure if there's anything we can/should do about this.",
                    "Checking for permissions before performing privileged actions seems fine to me.",
                    "I think, just crashing silently is not a way to go either.",
                    "Maybe provide some kind of error handling which will prevent a crash.",
                    "I'm not the most Java literate person at a moment, but will try to provide some PR with a fix, if be able to scrape some free time, to help with that issue.",
                    "There is inconsistent behaviour on Android vs iOS though.",
                    "In iOS, permissions aren't granted, it will be handled in the error block:",
                    "In Android, if permissions are not granted, errors do not get caught by this block.",
                    "It crashes the entire app entirely.",
                    "Why provide an error handler for when the error handler only catches iOS errors and not Android errors ?",
                    "It's misleading to developers to see an error handler block that does not catch errors.",
                    "I feel it would be better if both Android & iOS were handled the same way.",
                    "It does not seem appropriate that calling a ReactNative function can cause an entire Android app to crash.",
                    "I feel errors should be handled at the ReactNative boundary.",
                    "I solved it by the using the below piece of `` try catch'' code logic:",
                    "The app will not crash, since all the",
                    "It's still crashing working fine on some phones but on few phones it's crashing",
                    "Android Version 5: Hawaii P8 lite",
                    "in android manifest file use",
                    "Btw, just sharing my code if anyone just wants a quick copy and paste:",
                    "This issue is stale, please provide more information about the status",
                    "I ran into this too and it was super weird, I found you need both WRITE_CONTACTS and READ_CONTACTS regardless of API version.",
                    "The README sections them off as if READ was a part of WRITE for Api 23 +, that's what confused me at least.",
                    "The weirdest part was how getAll did not throw an error, it just hung indefintiely, while addContact would create the contact in the mobile app BUT THEN throw an error on READ permission not granted, which was very difficult to reason through.",
                    "If you want to update the readme that would be welcome.",
                    "My PermissionsAndroid is granted and i can not catch the error, still have the crash with API 22 when i make a getAll call.",
                    "You must use read profile permission in android platform.",
                    ""
                ],
                "title": "Contacts.getAll ( ) crashes Android app when permissions are not granted \u00b7 Issue # 516 \u00b7 morenoh149/react-native-contacts \u00b7 GitHub"
            }
        ],
        "qa": [
            {
                "uid": "5233543",
                "link": "https://stackoverflow.com/questions/5233543",
                "title": "java.lang.SecurityException trying to read from Android Contacts URI",
                "answers": [
                    {
                        "uid": 5233628,
                        "score": 6,
                        "text": [
                            "Hello Steven the debug log trace tells you that you need ... requires android.permission.READ _ CONTACTS",
                            "so just try something by editing the Manifest.xml like adding another permission, let see if its not correctly readed.",
                            "and check this line without **",
                            "dan"
                        ]
                    },
                    {
                        "uid": 9816474,
                        "score": 9,
                        "text": [
                            "Make sure you add it outside of the application tag.",
                            "While developing for a target platform of 2.3.3 using Eclipse on Ubuntu, I had permission failures in the log file that indicated I needed this exact line while working on something similar.",
                            "It wasn't until I moved the * uses-permission ... READ_CONTACTS * line to outside the application tag that things worked."
                        ]
                    },
                    {
                        "uid": 32854679,
                        "score": 5,
                        "text": [
                            "with the api 23, permission <uses-permission\u00a0android:name=\"android.pemission.READ_CONTACTS\"/> dont work, change the api level in the emulator for api 22 -LRB- lollipop -RRB- or lower"
                        ]
                    },
                    {
                        "uid": 34785103,
                        "score": 2,
                        "text": [
                            "If the device is running Android 6.0 or higher, and your app's target SDK is 23 or higher: The app has to list the permissions in the manifest, and it must request each dangerous permission it needs while the app is running.",
                            "The user can grant or deny each permission, and the app can continue to run with limited capabilities even if the user denies a permission request.",
                            "EXAMPLE:",
                            "LINK"
                        ]
                    },
                    {
                        "uid": 35669666,
                        "score": 17,
                        "text": [
                            "Requesting Permissions at Run Time",
                            "Beginning in Android 6.0 -LRB- API level 23 -RRB-, users grant permissions to apps while the app is running, not when they install the app.",
                            "If the permission you need to add isn't listed under the normal permissions, you'll need to deal with `` Runtime Permissions''.",
                            "Runtime permissions are permissions that are requested as they are needed while the app is running.",
                            "These permissions will show a dialog to the user, similar to the following one:",
                            "LINK",
                            "The first step when adding a `` Runtime Permission'' is to add it to the AndroidManifest:",
                            "Next, you'll need to initiate the permission request and handle the result.",
                            "The following code shows how to do this in the context of an Activity, but this is also possible from within a Fragment."
                        ]
                    }
                ],
                "tags": [
                    "android",
                    "permissions",
                    "contacts"
                ]
            }
        ],
        "other": [
            {
                "link": "https://guides.codepath.com/android/Understanding-App-Permissions",
                "type": "misc",
                "content": [
                    "When the app needs to use any of the protected features of the device ( sending network requests, accessing the camera, sending an SMS, etc ) it must obtain the appropriate permission from the user to do so.",
                    "Before Marshmallow, permissions were handled at install-time and specified in the AndroidManifest.xml within the project.",
                    "Full list of permissions can be found here.",
                    "After Marshmallow, permissions must now be requested at runtime before being used.",
                    "There are a number of libraries available to make runtime permissions easier.",
                    "If you to get started quickly, check out our guide on managing runtime permissions with PermissionsDispatcher.",
                    "Permissions before Marshmallow Permissions were much simpler before Marshmallow ( API 23 ).",
                    "All permissions were handled at install-time.",
                    "When a user went to install an app from the Google Play Store, the user was presented a list of permissions that the app required ( some people referred to this as a `` wall of permissions''.",
                    "The user could either accept all the permissions and continue to install the app or decide not to install the app.",
                    "It was an all or nothing approach.",
                    "There was no way to grant only certain permissions to the app and no way for the user to revoke certain permissions after the app was installed.",
                    "Example of pre-Marshmallow permissions requested by the Dropbox app:",
                    "For an app developer, permissions were very simple.",
                    "To request one of the many permissions, simply specify it in the AndroidManifest.xml: For example, an application that needs to read the user's contacts would add the following to it's AndroidManifest.xml:",
                    "That's all there was to it.",
                    "The user had no way of changing permissions, even after installing the app.",
                    "This made it easy for developers to deal with permissions, but wasn't the best user experience.",
                    "Permission Updates in Marshmallow Marshmallow brought large changes to the permissions model.",
                    "It introduced the concept of runtime permissions.",
                    "These are permissions that are requested while the app is running ( instead of before the app is installed ).",
                    "These permission can then be allowed or denied by the user.",
                    "For approved permissions, these can also be revoked at a later time.",
                    "This means there are a couple more things to consider when working with permissions for a Marshmallow app.",
                    "Keep in mind that your targetSdkVersion must be > = 23 and your emulator / device must be running Marshmallow to see the new permissions model.",
                    "If this isn't the case, see the backwards compatibility section to understand how permissions will behave on your configuration.",
                    "Normal Permissions When you need to add a new permission, first check this page to see if the permission is considered a PROTECTION_NORMAL permission.",
                    "In Marshmallow, Google has designated certain permissions to be `` safe'' and called these `` Normal Permissions''.",
                    "These are things like ACCESS_NETWORK_STATE, INTERNET, etc. which can't do much harm.",
                    "Normal permissions are automatically granted at install time and never prompt the user asking for permission.",
                    "Important: Normal Permissions must be added to the AndroidManifest:",
                    "Runtime Permissions If the permission you need to add isn't listed under the normal permissions, you'll need to deal with `` Runtime Permissions''.",
                    "Runtime permissions are permissions that are requested as they are needed while the app is running.",
                    "These permissions will show a dialog to the user, similar to the following one:",
                    "The first step when adding a `` Runtime Permission'' is to add it to the AndroidManifest:",
                    "Next, you'll need to initiate the permission request and handle the result.",
                    "The following code shows how to do this in the context of an Activity, but this is also possible from within a Fragment.",
                    "Permission Groups Permission Groups avoids spamming the user with a lot of permission requests while allowing the app developer to only request the minimal amount of permissions needed at any point in time.",
                    "Related permissions are grouped into one of the permission groups.",
                    "When an app requests a permission that belongs to a particular permission group ( i.e. READ_CONTACTS ), Android asks the user about the higher level group instead ( CONTACTS ).",
                    "This way when the app later needs the WRITE_CONTACTS permission, Android can automatically grant this itself without prompting the user.",
                    "In most of your interaction with the permission API's you'll be working with the individual permissions and not the permission groups, but pay close attention to what the API expects as both permissions and permission groups are Strings.",
                    "Backwards Compatibility There are 2 main scenarios to think about when it comes to backwards compatibility:",
                    "Your app is targeting an API less than Marshmallow ( TargetSdkVersion < 23 ), but the emulator / device is Marshmallow:",
                    "Your app will continue to use the old permissions model.",
                    "All permissions listed in the AndroidManifest will be asked for at install time.",
                    "Users will be able to revoke permissions after the app is installed.",
                    "It's important to test this scenario since the results of certain actions without the appropriate permission can be unexpected.",
                    "The emulator / device is running something older than Marshmallow, but you app targets Marshmallow ( TargetSdkVersion > = 23 ):",
                    "How to Ask For Permissions Google recommends in this video that there are four patterns to consider when thinking about permissions:",
                    "Each pattern dictates a different way of requesting permissions.",
                    "For instance, when requesting for critical but unclear permissions, use a warm welcome screen to help understand a permission is requested.",
                    "For critical permissions, such as a camera app that needs camera permission, ask up-front for it.",
                    "Secondary features can be requested later in context, such as a geotagging app when asking for a location permission.",
                    "For permissions that are secondary and unclear, you should include a rationale explanation if you really need them.",
                    "Storage permissions Rethink about whether you need read/write storage permissions ( i.e. android.permission.WRITE _ EXTERNAL_STORAGE or android.permission.READ _ EXTERNAL_STORAGE ), which give you all files on the SD card.",
                    "Instead, you should use methods on Context to access package-specific directories on external storage.",
                    "Your app always have access to read/write to these directories, so there is no need to permissions to request it:",
                    "Managing Permissions using ADB Permissions can also be managed on the command-line using adb with the following commands.",
                    "Granting and revoking runtime permissions:",
                    "Installing an app with all permissions granted:",
                    "Overview By default, an Android app starts with zero permissions granted to it.",
                    ""
                ],
                "title": "Understanding App Permissions | CodePath Android Cliffnotes"
            },
            {
                "link": "https://www.avg.com/en/signal/guide-to-android-app-permissions-how-to-use-them-smartly",
                "type": "misc",
                "content": [
                    "Guide to Android App Permissions & How to Use Them Smartly",
                    "Android app permissions can give apps control of your phone and access to your private conversations, photos, and more.",
                    "Here's what you need to know to stay safe and in control.",
                    "Anyone who's ever installed an app from Google Play has likely seen an app permission request.",
                    "It looks something like this: The ubiquitous app permission request.",
                    "These requests pop up the first time an app needs access to sensitive hardware or data on your phone or tablet.",
                    "If you've installed a camera app, for example, it will need your permission to access the camera before it can actually take photos.",
                    "So, in addition to being cautious about the apps you install from Google Play, it's also important to know which permissions those apps request from you.",
                    "`` Normal'' vs. `` dangerous'' permissions System permissions are divided into two groups: `` normal'' and `` dangerous.''",
                    "Normal permission groups are allowed by default, because they don't pose a risk to your privacy.",
                    "( e.g., Android allows apps to access the Internet without your permission. )",
                    "Dangerous permission groups, however, can give apps access to things like your calling history, private messages, location, camera, microphone, and more.",
                    "Therefore, Android will always ask you to approve dangerous permissions.",
                    "In earlier versions of Android, accepting potentially dangerous permission groups was an all-or-nothing affair.",
                    "You either allowed all permissions an app needed to function -- before installation -- or you declined them all, which meant you couldn't install the app.",
                    "Sketchy app developers could abuse this system to sneak in permissions that went beyond the scope of their app ( e.g., calendar apps that not only requested access to your calendar, but also your microphone ).",
                    "Thankfully, that mostly changed with the release of Android 6.0 back in October 2015.",
                    "Now Android allows you to decide which permissions to accept on a case-by-case basis -- after the app is installed.",
                    "Sketchy app developers sneak in permissions they don't need.",
                    "Why would a calendar app need access to your microphone ?",
                    "`` This approach streamlines the app install process, since the user does not need to grant permissions when they install or update the app,'' Google says.",
                    "`` It also gives the user more control over the app's functionality ; for example, a user could choose to give a camera app access to the camera but not to the device location.''",
                    "However, lazy or malicious app developers can skirt this new permission system by intentionally targeting older API levels, which is why you can still find apps on Google Play that request all permissions before installation.",
                    "This loophole should be closed later in 2018, though.",
                    "Potentially dangerous permissions to look out for Anyone concerned about their privacy and security should keep an eye out for apps that request access to following nine permission groups.",
                    "Each group contains multiple permissions, and approving a single permission from any group automatically approves all other permissions within that same group.",
                    "( For example, if you allow an app to see who's calling you, you'll allow it to make phone calls, too. )",
                    "Body Sensors Allows access to your health data from heart-rate monitors, fitness trackers, and other external sensors.",
                    "The good: Fitness apps need this permission to monitor your heart rate while you exercise, provide health tips, etc..",
                    "The bad: A malicious app could spy on your health.",
                    "Calendar Allows apps to read, create, edit, or delete your calendar events.",
                    "The good: Calendar apps obviously need this permission to create calendar events, but so do social networking apps that allow you to add events and invitations to your calendar.",
                    "The bad: A malicious app can spy on your personal routines, meeting times, etc. -- and even delete them from your calendar.",
                    "Camera Allows apps to use your camera to take photos and record videos.",
                    "The good: Camera apps need this permission so you can take pictures.",
                    "The bad: A malicious app can secretly turn on your camera and record what's going on around you.",
                    "Contacts Allows apps to read, create, or edit your contact list, as well as access the list of all accounts ( e.g., Facebook, Instagram, Twitter, etc. ) used on your device.",
                    "The good: A communication app can use this to let you text or call other people in your contact list.",
                    "The bad: A malicious app can steal the entire contents of your address book and then target your friends and family with spam, phishing scams, etc..",
                    "Location Allows apps to access your approximate location ( using cellular base stations and Wi-Fi hotspots ) and exact location ( using GPS ).",
                    "The good: Navigation apps can help you get around ; camera apps can geo-tag your photos so you know where they were taken ; and shopping apps can estimate your address for delivery.",
                    "The bad: A malicious app can secretly track your location to build a profile on your daily habits, or even let thieves know when you're not at home.",
                    "Microphone Allows apps to use your microphone to record audio.",
                    "The good: A music recognition app like Shazam uses this to listen to any music you want to identify ; a communication app can use this to allow you to send voice messages to your friends.",
                    "The bad: A malicious app can secretly record what's going on around you, including private talks with your family, conversations with your doctor, and confidential business meetings.",
                    "Phone Allows apps to know your phone number, current cellular network information, and ongoing call status.",
                    "Apps can also make and end calls, see who's calling you, read and edit your calling logs, add voicemail, use VoIP, and even redirect calls to other numbers.",
                    "The good: Communication apps can use this to let you call your friends.",
                    "The bad: A malicious app can spy on your phone habits and make calls without your consent ( including paid calls ).",
                    "SMS Allows apps to read, receive, and send SMS messages, as well as receive WAP push messages and MMS messages.",
                    "The good: Communication apps can use this to let you message your friends.",
                    "The bad: A malicious app can spy on your messages, use your phone to spam others, and even subscribe you to unwanted paid services.",
                    "Storage Allows apps to read and write to your internal or external storage.",
                    "The good: A music app can save downloaded songs to your SD card, or a social networking app can save your friends' photos to your phone.",
                    "The bad: A malicious app can secretly read, change, and delete any of your saved documents, music, photos, and other files.",
                    "Other permission types In addition to the permissions above, Android also has administrator privileges and root privileges.",
                    "Here's what these mean: What are device administrator privileges ?",
                    "Device administrator privileges ( sometimes called `` admin rights'' ) allow apps to change your device password, lock your phone, or even permanently wipe all data from your device.",
                    "Malicious apps can use these privileges against you, but they're also important for legitimate apps.",
                    "For example, security apps with admin privileges are difficult to uninstall, which helps stop thieves from removing them from your phone.",
                    "Our free AVG AntiVirus FREE for Android uses device administrator privileges to let you remotely lock or wipe your device if it's ever lost or stolen.",
                    "What are root privileges ?",
                    "Root privileges ( sometimes called `` root access'' ) are the holy grail of permissions.",
                    "They're the most dangerous, because any app with root privileges can do whatever it wants -- regardless which permissions you've already blocked or enabled.",
                    "As you can imagine, malicious apps with root privileges can wreak havoc on your phone.",
                    "Thankfully, Android blocks these by default.",
                    "But malware makers are always looking for ways to get them.",
                    "How to check app permissions Curious which permissions an app requires before you install it ?",
                    "Want to see which permissions are already being used on your phone ?",
                    "Here are 4 ways to check.",
                    "See app permissions on Google Play before you install When viewing an app description in Google Play, scroll down to the developer info at the bottom of the screen and tap `` Permission details'' to see which permissions the app will ask for.",
                    "( These descriptions are generic and written by Google, so they won't tell you exactly why that particular app needs the permissions, but they can still help you know what to expect before you install. )",
                    "Permission details for any app can be viewed right in Google Play.",
                    "See all permissions used by a specific app If you've already installed an app, here's how to check which permissions it has access to.",
                    "Open your device Settings and tap Apps.",
                    "Choose any app, and tap Permissions.",
                    "See all apps that are using a specific permission This is similar to the method above, but it works from the opposite direction.",
                    "You first pick a permission, and then you see every app that's currently using it.",
                    "Tap the gear icon, then App permissions.",
                    "Choose any permission to see which apps are using it.",
                    "See app permissions by using AVG AntiVirus for Android Our free AVG AntiVirus app can also show you which of your apps are using high, average, or low permissions -- and let you easily change any that you're uncomfortable with.",
                    "( Get AVG AntiVirus for free from Google Play ) Open AVG AntiVirus and tap the menu icon.",
                    "Then scroll down and tap App Permissions.",
                    "Why am I getting two requests for the same permission ?",
                    "You might sometimes see two back-to-back notifications for the same permission.",
                    "This is because the first is from the app itself, explaining why it needs the permission.",
                    "The second is from Android, and is a generic request for the permission.",
                    "Only this second request actually allows or rejects the permission.",
                    "As Google explains to app developers, `` -LSB- I -RSB- f a user launches a photography app, the user probably won't be surprised that the app asks for permission to use the camera, but the user might not understand why the app wants access to the user's location or contacts.",
                    "Before you request a permission, you should consider providing an explanation to the user.''",
                    "Just remember ... App permissions exist to protect you.",
                    "They might seem annoying at first, but you only need to approve them once per app, and it's well worth your time to carefully read and consider these popups before tapping.",
                    "After all, even malicious apps can sneak into Google Play.",
                    "Get Free Protection Against Unsafe Apps Install free AVG AntiVirus for Android to protect your phone against unsafe apps, dangerous downloads, and malware.",
                    "Get it for PC, iOS, Mac",
                    "Get it for Mac, iOS, PC",
                    "Get it for PC, Mac, iOS",
                    "Get it for iOS, Mac, PC",
                    "Should I use a VPN for gaming ?",
                    "How to Manage and Remove Chrome Extensions",
                    "Private IP vs Public IP: What's the Difference ?",
                    "What Is ISP Throttling ?",
                    "Why It Happens & How to Stop It",
                    "How to Allow or Block Pop-Ups in Safari",
                    "Signs Your Phone Has Been Hacked",
                    "Best Chrome Extensions for Security and Privacy",
                    "Do I Need a VPN ?",
                    "Facebook Leak: Check if Your Data is Part of The Breach",
                    "What Is the Difference Between IPv4 and IPv6 ?",
                    "How to Choose the Best Password Manager",
                    "How to Speed Up Chrome, Firefox, and IE",
                    "What Is Router Hacking and How to Prevent It",
                    "How to Stop Endless Buffering Now",
                    "How to Unblock Websites & Access Restricted Content",
                    "What Is a Proxy Server and How Does It Work ?",
                    "What Is Ad Tracking ?",
                    "How to Watch TV Shows and Episodes Online",
                    "The Best Browsers for Security and Privacy in 2021",
                    "What Is Two-Factor Authentication ( 2FA ) ?",
                    "Everything You Need to Know",
                    "Dark Web Scans: When and Why to Use One",
                    "How to Download Your Google Data with Google Takeout",
                    "What Does Google Do With My Data ... and Should I Be Worried ?",
                    "Data Brokers: Who They Are and How They Work",
                    "What Is an IP Address ?",
                    "The Ultimate Guide to Virtual Private Networks ( VPN )",
                    "What Is Data Encryption and How Does it Work ?",
                    "Contact Tracing Apps and Their Privacy Concerns",
                    "Don't Let Your Old Social Media Accounts Come Back to Haunt You",
                    "5 Quick Tips For a Safer Browsing Experience",
                    "How to Set Up a VPN on Windows",
                    "How to Hide Apps on an iPhone or iPad",
                    "How to Stay Sane on Social Media in the COVID-19 Age",
                    "The Pros and Cons of Video Chat Apps",
                    "Is Your Smartphone Tracking You ?",
                    "The Very Best Encrypted Messaging Apps",
                    "Should I Use a VPN, Proxy, or Tor ?",
                    "The Uses and Abuses of Facial Recognition",
                    "Are You an Online Oversharer ?",
                    "How to Hide Apps on Android",
                    "How to Clear Your Search and Browser History",
                    "How to Clear Browser Cookies Completely",
                    "Find Your IP Address on Windows or Mac",
                    "The Most Dangerous & Famous Hackers Today",
                    "The Privacy Implications of DNA Testing",
                    "The Nasty Truth of Data Breaches",
                    "How to Create a Strong Password -- That You Won't Forget",
                    "5 Steps to Stop Robocalls: The Ultimate Guide to Beating the Bots",
                    "Dark Web Scans: When and Why to Use One Dark Web Scans: When and Why to Use One",
                    "How to Download Your Google Data with Google Takeout How to Download Your Google Data with Google Takeout",
                    "Data Brokers: Who They Are and How They Work Data Brokers: Who They Are and How They Work",
                    "Protect your Android against threats with AVG AntiVirus",
                    "Protect your iPhone against threats with AVG Mobile Security",
                    "Virus Scanning & Malware Removal",
                    "Privacy | Cookies | All third party trademarks are the property of their respective owners.",
                    "\u00a9 1988-2021 Copyright Avast Software s.r.o.",
                    "Log in to AVG MyAccount",
                    "We use cookies and similar technologies to recognize your repeat visits and preferences, to measure the effectiveness of campaigns, and improve our websites.",
                    "For settings and more information about cookies, view our Cookie Policy.",
                    "By clicking `` I accept'' on this banner or using our site, you consent to the use of cookies.",
                    ""
                ],
                "title": "Guide to Android App Permissions & How to Use Them Smartly | AVG"
            }
        ]
    },
    "parsed": true
}