{
    "task": "Wait for 2 async REST calls to result in success or error",
    "description": "@JakeWharton \n\nHey Jake, We have an use case where we need to wait for 2 async REST calls to result in either success or failure & based on outcome launch an Activity with dynamic UI labels. We use retrofit as our networking library.\n\nPlease let me know if Retrofit has an in built support the use case above? What are the alternatives?\n\nThanks\n",
    "type": "GIT",
    "link": "https://github.com/square/retrofit/issues/1203",
    "question_id": "1203",
    "resources": {
        "api": [
            {
                "link": "https://developer.android.com/guide/background/threading",
                "type": "android",
                "content": [
                    "All Android apps use a main thread to handle UI operations.",
                    "Calling long-running operations from this main thread can lead to freezes and unresponsiveness.",
                    "For example, if your app makes a network request from the main thread, your app's UI is frozen until it receives the network response.",
                    "You can create additional background threads to handle long-running operations while the main thread continues to handle UI updates.",
                    "This guide shows both Kotlin and Java Programming Language developers how to use a thread pool to set up and use multiple threads in an Android app.",
                    "This guide also shows you how to define code to run on a thread and how to communicate between one of these threads and the main thread.",
                    "Based on the Guide to app architecture, the examples in this topic make a network request and return the result to the main thread, where the app then might display that result on the screen.",
                    "Specifically, the ViewModel calls the repository layer on the main thread to trigger the network request.",
                    "The repository layer is in charge of moving the execution of the network request off the main thread and posting the result back to the main thread using a callback.",
                    "To move the execution of the network request off the main thread, we need to create other threads in our app.",
                    "A thread pool is a managed collection of threads that runs tasks in parallel from a queue.",
                    "New tasks are executed on existing threads as those threads become idle.",
                    "To send a task to a thread pool, use the ExecutorService interface.",
                    "Note that ExecutorService has nothing to do with Services, the Android application component.",
                    "Creating threads is expensive, so you should create a thread pool only once as your app initializes.",
                    "Be sure to save the instance of the ExecutorService either in your Application class or in a dependency injection container.",
                    "The following example creates a thread pool of four threads that we can use to run background tasks.",
                    "There are other ways you can configure a thread pool depending on expected workload.",
                    "See Configuring a thread pool for more information.",
                    "Making a network request on the main thread causes the thread to wait, or block, until it receives a response.",
                    "Since the thread is blocked, the OS can't call onDraw ( ), and your app freezes, potentially leading to an Application Not Responding ( ANR ) dialog.",
                    "Instead, let's run this operation on a background thread.",
                    "First, let's take a look at our Repository class and see how it's making the network request:",
                    "makeLoginRequest ( ) is synchronous and blocks the calling thread.",
                    "To model the response of the network request, we have our own Result class.",
                    "The ViewModel triggers the network request when the user taps, for example, on a button:",
                    "With the previous code, LoginViewModel is blocking the main thread when making the network request.",
                    "We can use the thread pool that we've instantiated to move the execution to a background thread.",
                    "First, following the principles of dependency injection, LoginRepository takes an instance of Executor as opposed to ExecutorService because it's executing code and not managing threads:",
                    "The Executor's execute ( ) method takes a Runnable.",
                    "A Runnable is a Single Abstract Method ( SAM ) interface with a run ( ) method that is executed in a thread when invoked.",
                    "Let's create another function called makeLoginRequest ( ) that moves the execution to the background thread and ignores the response for now:",
                    "Inside the execute ( ) method, we create a new Runnable with the block of code we want to execute in the background thread -- in our case, the synchronous network request method.",
                    "Internally, the ExecutorService manages the Runnable and executes it in an available thread.",
                    "Any thread in your app can run in parallel to other threads, including the main thread, so you should ensure that your code is thread-safe.",
                    "Notice that in our example that we avoid writing to variables shared between threads, passing immutable data instead.",
                    "This is a good practice, because each thread works with its own instance of data, and we avoid the complexity of synchronization.",
                    "If you need to share state between threads, you must be careful to manage access from threads using synchronization mechanisms such as locks.",
                    "This is outside of the scope of this guide.",
                    "In general you should avoid sharing mutable state between threads whenever possible.",
                    "In the previous step, we ignored the network request response.",
                    "To display the result on the screen, LoginViewModel needs to know about it.",
                    "We can do that by using callbacks.",
                    "The function makeLoginRequest ( ) should take a callback as a parameter so that it can return a value asynchronously.",
                    "The callback with the result is called whenever the network request completes or a failure occurs.",
                    "In Kotlin, we can use a higher-order function.",
                    "However, in Java, we have to create a new callback interface to have the same functionality:",
                    "The ViewModel needs to implement the callback now.",
                    "It can perform different logic depending on the result:",
                    "In this example, the callback is executed in the calling thread, which is a background thread.",
                    "This means that you can not modify or communicate directly with the UI layer until you switch back to the main thread.",
                    "You can use a Handler to enqueue an action to be performed on a different thread.",
                    "To specify the thread on which to run the action, construct the Handler using a Looper for the thread.",
                    "A Looper is an object that runs the message loop for an associated thread.",
                    "Once you've created a Handler, you can then use the post ( Runnable ) method to run a block of code in the corresponding thread.",
                    "Looper includes a helper function, getMainLooper ( ), which retrieves the Looper of the main thread.",
                    "You can run code in the main thread by using this Looper to create a Handler.",
                    "As this is something you might do quite often, you can also save an instance of the Handler in the same place you saved the ExecutorService:",
                    "It's a good practice to inject the handler to the Repository, as it gives you more flexibility.",
                    "For example, in the future you might want to pass in a different Handler to schedule tasks on a separate thread.",
                    "If you're always communicating back to the same thread, you can pass the Handler into the Repository constructor, as shown in the following example.",
                    "Alternatively, if you want more flexibility, you can pass in a Handler to each function:",
                    "In this example, the callback passed into the Repository's makeLoginRequest call is executed on the main thread.",
                    "That means you can directly modify the UI from the callback or use LiveData.setValue ( ) to communicate with the UI.",
                    "You can create a thread pool using one of the Executor helper functions with predefined settings, as shown in the previous example code.",
                    "Alternatively, if you want to customize the details of the thread pool, you can create an instance using ThreadPoolExecutor directly.",
                    "You can configure the following details:",
                    "Here's an example that specifies thread pool size based on the total number of processor cores, a keep alive time of one second, and an input queue.",
                    "It's important to understand the basics of threading and its underlying mechanisms.",
                    "There are, however, many popular libraries that offer higher-level abstractions over these concepts and ready-to-use utilities for passing data between threads.",
                    "These libraries include Guava and RxJava for the Java Programming Language users and coroutines, which we recommend for Kotlin users.",
                    "In practice, you should pick the one that works best for your app and your development team, though the rules of threading remain the same.",
                    "For more information about processes and threads in Android, see Process and threads overview.",
                    "Initial and maximum pool size.",
                    "Keep alive time and time unit.",
                    "Keep alive time is the maximum duration that a thread can remain idle before it shuts down.",
                    "An input queue that holds Runnable tasks.",
                    "This queue must implement the BlockingQueue interface.",
                    "To match the requirements of your app, you can choose from the available queue implementations.",
                    "To learn more, see the class overview for ThreadPoolExecutor.",
                    ""
                ],
                "title": "Running Android tasks in background threads \u00a0|\u00a0 Android Developers"
            }
        ],
        "git": [],
        "qa": [
            {
                "uid": "2993085",
                "link": "https://stackoverflow.com/questions/2993085",
                "title": "Clean way in GWT/Java to wait for multiple asynchronous events to finish",
                "answers": [
                    {
                        "uid": 2993171,
                        "score": 2,
                        "text": [
                            "First and foremost - don't ever get into such a situation.",
                            "Redesign your RPC services such that every user flow/screen requires at most a single RPC call to work.",
                            "In this case, you are making three calls to the server, and its just a waste of bandwidth.",
                            "The latency will just kill your app.",
                            "If you can't and really need a hack, use a LINK to periodically poll if all data has downloaded.",
                            "The code you pasted above assumes login -LRB- -RRB- method will be the last to finish - which is wrong.",
                            "Its may be the first to finish, and then your app will be in an indeterminate state - which is very difficult to debug."
                        ]
                    },
                    {
                        "uid": 2993188,
                        "score": 5,
                        "text": [
                            "Like @Epsen says, Future is probably what you want.",
                            "Unfortunately, I don't believe Futures are GWT-compatible.",
                            "The LINK project claims to bring this functionality to GWT, though I've never tried it.",
                            "It may be worth a look."
                        ]
                    },
                    {
                        "uid": 2993739,
                        "score": 0,
                        "text": [
                            "Best case scenario, as sri said, is to redesign your app to only call the backend once at a time.",
                            "This avoids this kind of scenario, and preserves bandwidth and latency time.",
                            "In a web app, this is your most precious resource.",
                            "Having said that the GWT RPC model doesn't really help you to organize things in this manner.",
                            "I've run into this problem myself.",
                            "My solution was to implement a timer.",
                            "The timer will poll your results every X seconds, and when all your expected results are retrieved, your execution flow can continue.",
                            "PollTimer extends Timer -LCB- public PollTimer -LRB- -RRB- -LCB- / / I've set to poll every half second, but this can be whatever you'd like.",
                            "/ / Ideally it will be client side only, so you should be able to make it / / more frequent -LRB- within reason -RRB- without worrying too much about performance scheduleRepeating -LRB- 500 -RRB- ; -RCB- public void run -LCB- / / check to see if all your callbacks have been completed if -LRB- notFinished -RRB- return ;",
                            "-RCB-",
                            "Make your calls to your RPC, then instantiate a new PollTimer object.",
                            "That should do the trick.",
                            "The stuff in java.util.concurrent is not supported by GWT Emulation.",
                            "Wont help you in this case.",
                            "For all intents and purposes, all of the code you do on the client side is single threaded.",
                            "Try to get into that mind set."
                        ]
                    },
                    {
                        "uid": 3030253,
                        "score": 1,
                        "text": [
                            "Just tossing up some ideas:",
                            "The callbacks fire some GwtEvent using the HandlerManager.",
                            "The class containing the ready methods is registered with the HandlerManager as an EventHandler for the events fired by the callback methods, and holds the state -LRB- bookAPIAvailable, searchAPIAvailable, appLoaded -RRB-.",
                            "When a event arrives that specific state is changed, and we check if all the states are as desired.",
                            "For an example using the GWTEvent, HandlerManager and EventHandler, see LINK"
                        ]
                    },
                    {
                        "uid": 3207221,
                        "score": 0,
                        "text": [
                            "Ideally, you want to do as other posters have stated and do as much as you can in a single async call.",
                            "Sometimes you have to do a bunch of separate calls.",
                            "Here's how:",
                            "You want to chain the async calls.",
                            "When the last async completes -LRB- login -RRB-, all the items are loaded.",
                            "Cheers,",
                            "-- Russ"
                        ]
                    },
                    {
                        "uid": 4305629,
                        "score": 41,
                        "text": [
                            "I wrote two classes that solve this problem on my project.",
                            "Basically, each individual callback registers with a parent.",
                            "The parent waits for each child callback to complete, then fires off it's own handleSuccess -LRB- -RRB-.",
                            "The client code looks like this:",
                            "I wrote a post explaining it here: LINK.",
                            "The implementation for these two classes is linked from that post -LRB- sorry, can't give links here because I'm a newbie user - not enough karma to include more than one link ! -RRB-",
                            "."
                        ]
                    },
                    {
                        "uid": 9695421,
                        "score": 4,
                        "text": [
                            "I've struggled with this myself, and I've used several methods - the ` chain' one just gets ugly -LRB- but can be improved if you create classes instead of inline classes for each method -RRB-.",
                            "A variant of your own version works well for me:",
                            "All I did was create a counter for the number of calls I'm going to do, then each async result calls ready -LRB- -RRB- -LRB- be sure to do this on the failure methods too, unless you're going to do something different -RRB-",
                            "In the ready method, I decrement the counter and see if there are still outstanding calls.",
                            "It's still ugly, but it lets you add calls as needed."
                        ]
                    },
                    {
                        "uid": 11153959,
                        "score": 1,
                        "text": [
                            "I did something similar to @Sasquatch, but instead making use of a `` CallbackCounter'' object:",
                            "Then in my callback I just call:"
                        ]
                    }
                ],
                "tags": [
                    "java",
                    "gwt",
                    "google-ajax-api"
                ]
            }
        ],
        "other": [
            {
                "link": "https://www.twilio.com/blog/asynchronous-api-requests-java-completablefutures",
                "type": "misc",
                "content": [
                    "Java 8 was released in 2014, and introduced a raft of new language features such as Lambdas and the Streams API.",
                    "A lot has happened since 2014 - Java is now at version 15, but industry surveys consistently report 8 as the most widely-used version, with very few developers using 7 or lower.",
                    "In October this year, the Twilio Java Helper Library was updated to use Java 8 features in release 8.0.0.",
                    "This new major version reflects the fact that the library no longer supports Java 7.",
                    "One Java 8 API which sometimes gets overlooked is the CompletionStage API, usually accessed through the CompletableFuture class.",
                    "The CompletionStage API lets programmers define pipelines of asynchronous operations for data, and handles the asynchronous behaviour for you.",
                    "You define what you want to happen, and Java takes care of when it can happen.",
                    "In this post I'll show how you can use CompletableFutures with the new Twilio Helper Library ; in fact, the same principles can be applied to deal with any asynchronous code.",
                    "Java 11's HttpClient has async methods that return CompletableFuture instances, for example.",
                    "Synchronous and Asynchronous code If you're calling the Twilio API to send an SMS, your code might look like this:",
                    "-LSB- full code on GitHub -RSB- This code will call the Twilio API, enqueue the SMS, and return a Message object which encapsulates details of the response, including the Message's SID which can be used later to look up what happened to the message.",
                    "There's a lot going on behind the scenes there, including a request and response whizzing over the Internet - on my computer this call takes about a second to complete, and this code will wait until the Message is available before continuing.",
                    "This is a synchronous ( or `` blocking'' ) call.",
                    "There might be other things that your code could be doing while the API request is in progress, so how about if we made the call asynchronous ?",
                    "That would mean our code can continue to do other things and we can get hold of the Message later on when we need it.",
                    "createAsync ( ) will do just that.",
                    "createAsync ( ) method returns a Future.",
                    "Similar to promises in other languages, Futures are objects that will contain a result when it's ready.",
                    "The work is being done in a background thread, and when you need the result you can call a method on the Furture to get the result.",
                    "When you call that method you might still have to wait, but your code has had a chance to do other things in the meantime.",
                    "From version 8.0.0 of the Twilio Helper Library, the type of future returned is now a CompletableFuture which has a.",
                    "join ( ) method for getting its result.",
                    "So your code might look like this:",
                    "-LSB- full code on GitHub -RSB-",
                    "So far, so good - but what makes the CompletionStage API special is that you can build up pipelines of code where each stage will be executed when it is ready, without you having to code the nuts and bolts of the asynchronous behaviour yourself.",
                    "This is similar to how you can use callbacks in other languages, but more flexible as we will see.",
                    "Examples OK, that description might have seemed a little complex.",
                    "Here are a few examples which should help clarify: Chaining computation sequentially If you want to run some code after the API call has completed, use.",
                    "thenApply ( ) method takes a lambda or a method reference which transforms the value and returns another CompletionStage so you can chain more things if you need.",
                    "When you want the final result, again you can call.",
                    "-LSB- full code on GitHub -RSB- Parallel execution Extending the previous example, imagine you need to make several API requests - they don't depend on each other so it doesn't matter what order the requests happen in, but you do need to know when they are all complete for some final bookkeeping ( writing what has happened into a database, for example ).",
                    "You can schedule code to run after multiple CompletionStages have finished using CompletableFuture.allOf ( ).",
                    "The lambda you pass to.",
                    "allOf ( ) takes no arguments ; to get the results of each stage, use.",
                    "join ( ) in the lambda's body:",
                    "-LSB- full code on GitHub -RSB- Handling Errors in CompletionStages If any exceptions are thrown in your asynchronous code, the CompletionStage API will catch them and let you handle them in a few different ways.",
                    "If you do not handle them at all, then your call to.",
                    "join ( ) could throw a CompletionException which has the original exception as its cause.",
                    "A better way to recover might be to use the.",
                    "handle ( ) method - you provide a lambda which takes two arguments, a result and an exception.",
                    "If the exception is non-null you can handle it here.",
                    "handle ( ) returns a CompletableFuture so you can continue chaining or.",
                    "join ( ) to get the result:",
                    "-LSB- full code on GitHub -RSB- The full CompletionStage API These small examples just scratch the surface of the CompletionStage API",
                    "There are dozens of methods for chaining and combining asynchronous actions in different ways.",
                    "For more examples of what you can do with CompletableFutures, I recommend you check out the official documentation or this handy list of 20 examples.",
                    "Summary Java 8's CompletionStage API gives us Java developers powerful tools for defining complex asynchronous processes, and is just one of the many additions to the newest Twilio Java Helper Library.",
                    "If you're using Twilio and Java I'd encourage you to update to the latest Helper library.",
                    "If you're building with Twilio and Java let me know about it.",
                    "I can't wait to see what you build."
                ],
                "title": "How to make asynchronous API requests in Java using CompletableFutures"
            },
            {
                "link": "https://medium.com/mindorks/multiple-concurrent-asynchronous-calls-using-kotlin-coroutines-async-await-and-suspendcoroutine-26371fa49781",
                "type": "misc",
                "content": [
                    "AndroidLearn Advanced Android By DoingRoadmapLearn Advanced Android",
                    "Multiple Concurrent Asynchronous calls using Kotlin coroutines ( async-await and suspendCoroutine ) Priya SindkarFollowJan 9, 2019 \u00b7 3 min read",
                    "Priya SindkarFollowJan 9, 2019 \u00b7 3 min read",
                    "MindOrksOur community publishes stories worth reading on Android ... 334 3",
                    "MindOrksOur community publishes stories worth reading on Android ...",
                    "Our community publishes stories worth reading on Android ...",
                    "Android Developer @Novumlogic Technologies Pvt. Ltd. | Harry Potter fan | Ardent Reader | A content writer | Believer in friends and strong knowledge baseMindOrksOur community publishes stories worth reading on Android DevelopmentMore From MediumUnderstanding Clean Code in AndroidYoga C. Pranata in MindOrksAndroid Dynamic Feature Modules: The FutureDeepanshu in MindOrksWhat Is Blockchain ?",
                    "Simplest Introduction To The BlockchainAmit Shekhar in MindOrksDo it Asynchronously but Intelligently !!!",
                    "Deepanshu in MindOrksMastering Design Patterns in Android with KotlinSumit Mishra in MindOrksWorking with ExoPlayer -- The clean way -- and customizationPrashant Barahi in MindOrksHey Android, Please Keep My Activities!Calvin Noronha in MindOrksSynchronisation 101 with JavaCalvin Noronha in MindOrks",
                    ""
                ],
                "title": "Multiple Concurrent Asynchronous calls using Kotlin coroutines (async-await and suspendCoroutine) | by Priya Sindkar | MindOrks | Medium"
            }
        ]
    },
    "parsed": true
}