{
    "task": "The gravity is not working on the TextView in some situation.",
    "description": "When I\u2019m trying to implement multiple TextViews in the LinearLayout, the all gravity options are not applied to both horizontal and vertical alignment.\n\nThis code block is an example for the Gravity.CENTER option:\n\n``` java\noptionsContainer.addView(context.linearLayout {\u2028  \n    lparams(width = matchParent, height = matchParent)\u2028\u2028    \n\n    textView(\"1\") {\u2028      \n        gravity = Gravity.CENTER\u2028 \n    }.lparams(width = 0, height = matchParent, weight = 1f)\u2028\u2028   \n    textView(\"2\") {\u2028      \n        gravity = Gravity.CENTER\u2028 \n    }.lparams(width = 0, height = matchParent, weight = 1f)\u2028\n})\n```\n\nThe FrameLayout of optionsContainer is following:\n\n``` java\n<FrameLayout\u2028    \n    android:id=\"@+id/options_container\"\u2028    \n    android:layout_width=\"match_parent\"\u2028    \n    android:layout_height=\"56dp\u201d\u2028    \n    android:layout_alignParentBottom=\"true\" />\n```\n\nIn my opinion, this problem can be fixed with attached code block below:\n\n``` java\ninline fun ViewManager.textView(text: CharSequence?, gravity: Int, init: android.widget.TextView.() -> Unit): android.widget.TextView {\u2028    \n    return ankoView(`$$Anko$Factories$Sdk23View`.TEXT_VIEW) {\u2028        \n        init()\u2028        \n        setText(text)\u2028        \n        setGravity(gravity)\u2028    \n    }\n\u2028}\n```\n\nThank you!\n",
    "type": "GIT",
    "link": "https://github.com/Kotlin/anko/issues/135",
    "question_id": "135",
    "resources": {
        "api": [
            {
                "link": "https://developer.android.com/reference/android/widget/TextView",
                "type": "android",
                "content": [
                    "A user interface element the user can tap or click to perform an action.",
                    "An extension to TextView that supports the Checkable interface and displays.",
                    "Class that implements a simple timer.",
                    "A user interface element for entering and modifying text.",
                    "TextClock can display the current date and/or time as a formatted string.",
                    "An editable text view that shows completion suggestions automatically while the user is typing.",
                    "A checkbox is a specific type of two-states button that can be either checked or unchecked.",
                    "A button with two states, checked and unchecked.",
                    "* Specialization of EditText for showing and interacting with the extracted text in a full-screen input method.",
                    "An editable text view, extending AutoCompleteTextView, that can show completion suggestions for the substring of the text where the user is typing instead of necessarily for the entire thing.",
                    "A radio button is a two-states button that can be either checked or unchecked.",
                    "A Switch is a two-state toggle switch widget that can select between two options.",
                    "Displays checked/unchecked states as a button with a `` light'' indicator and by default accompanied with the text `` ON'' or `` OFF''.",
                    "A user interface element that displays text to the user.",
                    "To provide user-editable text, see EditText.",
                    "The following code sample shows a typical use, with an XML layout and code to modify the contents of the text view:",
                    "This code sample demonstrates how to modify the contents of the text view defined in the previous XML layout:",
                    "To customize the appearance of TextView, see Styles and Themes.",
                    "See TextView Attributes, View Attributes",
                    "Type of the text buffer that defines the characteristics of the text such as static, styleable, or editable.",
                    "Interface definition for a callback to be invoked when an action is performed on the editor.",
                    "User interface state that is stored by TextView for implementing View #onSaveInstanceState.",
                    "The TextView does not auto-size text ( default ).",
                    "The TextView scales text size both horizontally and vertically to fit within the container.",
                    "Adds a TextWatcher to the list of those whose methods are called whenever this TextView's text changes.",
                    "Convenience method to append the specified text to the TextView's display buffer, upgrading it to android.widget.TextView.BufferType #EDITABLE if it was not already editable.",
                    "Convenience method to append the specified text slice to the TextView's display buffer, upgrading it to android.widget.TextView.BufferType #EDITABLE if it was not already editable.",
                    "Move the point, specified by the offset, into the view if it is needed.",
                    "Use BaseInputConnection.removeComposingSpans ( ) to remove any IME composing state from this text view.",
                    "Returns true, only while processing a touch gesture, if the initial touch down event caused focus to move to the text view and as a result its selection changed.",
                    "If this TextView contains editable content, extract a portion of it based on the information in request in to outText.",
                    "Gets the autolink mask of the text.",
                    "Returns the type of auto-size set for this widget.",
                    "Describes the autofill type of this view, so an android.service.autofill.AutofillService can create the proper AutofillValue when autofilling the view.",
                    "Gets the TextView's current text for AutoFill.",
                    "Gets the current strategy for breaking paragraphs into lines.",
                    "Returns the padding between the compound drawables and the text.",
                    "Returns the blending mode used to apply the tint to the compound drawables, if specified.",
                    "Returns drawables for the left, top, right, and bottom borders.",
                    "Returns drawables for the start, top, end, and bottom borders.",
                    "Returns the bottom padding of the view, plus space for the bottom Drawable if any.",
                    "Returns the end padding of the view, plus space for the end Drawable if any.",
                    "Returns the left padding of the view, plus space for the left Drawable if any.",
                    "Returns the right padding of the view, plus space for the right Drawable if any.",
                    "Returns the start padding of the view, plus space for the start Drawable if any.",
                    "Returns the top padding of the view, plus space for the top Drawable if any.",
                    "Return the current color selected to paint the hint text.",
                    "Return the current color selected for normal text.",
                    "Retrieves the value set in setCustomInsertionActionModeCallback.",
                    "Retrieves the value set in setCustomSelectionActionModeCallback.",
                    "Return the text that TextView is displaying as an Editable object.",
                    "Returns where, if anywhere, words that are longer than the view is wide should be ellipsized.",
                    "Returns the error message that was set to be displayed with #setError, or null if no error was set or if it the error was cleared by the widget after user input.",
                    "Returns the extended bottom padding of the view, including both the bottom Drawable if any and any extra space to keep more than maxLines of text from showing.",
                    "Returns the extended top padding of the view, including both the top Drawable if any and any extra space to keep more than maxLines of text from showing.",
                    "Returns the current list of input filters.",
                    "Returns the distance between the first text baseline and the top of this TextView.",
                    "Returns the font feature settings.",
                    "Returns the font variation settings.",
                    "Return whether this text view is including its entire text contents in frozen icicles.",
                    "Returns the horizontal and vertical alignment of this TextView.",
                    "Returns the hint that is displayed when the text of the TextView is empty.",
                    "Gets the current frequency of automatic hyphenation to be used when determining word breaks.",
                    "Get the IME action ID previous set with setImeActionLabel.",
                    "Get the IME action label previous set with setImeActionLabel.",
                    "Get the type of the Input Method Editor ( IME ).",
                    "Gets whether the TextView includes extra top and bottom padding to make room for accents that go above the normal ascent and descent.",
                    "Retrieve the input extras currently associated with the text view, which can be viewed as well as modified.",
                    "Get the type of the editable content.",
                    "Gets the current KeyListener for the TextView.",
                    "Returns the distance between the last text baseline and the bottom of this TextView.",
                    "Gets the android.text.Layout that is currently being used to display the text.",
                    "Gets the text letter-space value, which determines the spacing between characters.",
                    "Return the baseline for the specified line ( 0 ... getLineCount ( ) - 1 ) If bounds is not null, return the top, left, right, bottom extents of the specified line in it.",
                    "Return the number of lines of text, or 0 if the internal Layout has not been built.",
                    "Gets the vertical distance between lines of text, in pixels.",
                    "Gets the line spacing extra space",
                    "Gets the line spacing multiplier",
                    "Returns whether the movement method will automatically be set to LinkMovementMethod if setAutoLinkMask has been set to nonzero and links are detected in #setText.",
                    "Gets the number of times the marquee animation is repeated.",
                    "Returns the maximum width of TextView in terms of ems or -1 if the maximum width was set using setMaxWidth ( int ) or setWidth ( int ).",
                    "Returns the maximum height of TextView in terms of pixels or -1 if the maximum height was set using setMaxLines ( int ) or setLines ( int ).",
                    "Returns the maximum height of TextView in terms of number of lines or -1 if the maximum height was set using setMaxHeight ( int ) or setHeight ( int ).",
                    "Returns the maximum width of TextView in terms of pixels or -1 if the maximum width was set using setMaxEms ( int ) or setEms ( int ).",
                    "Returns the minimum width of TextView in terms of ems or -1 if the minimum width was set using setMinWidth ( int ) or setWidth ( int ).",
                    "Returns the minimum height of TextView in terms of pixels or -1 if the minimum height was set using setMinLines ( int ) or setLines ( int ).",
                    "Returns the minimum height of TextView in terms of number of lines or -1 if the minimum height was set using setMinHeight ( int ) or setHeight ( int ).",
                    "Returns the minimum width of TextView in terms of pixels or -1 if the minimum width was set using setMinEms ( int ) or setEms ( int ).",
                    "Gets the android.text.method.MovementMethod being used for this TextView, which provides positioning, scrolling, and text selection functionality.",
                    "Get the character offset closest to the specified absolute position.",
                    "Gets the TextPaint used for the text.",
                    "Gets the flags on the Paint being used to display the text.",
                    "Get the private type of the content.",
                    "Gets the color of the shadow layer.",
                    "Gets the vertical offset of the shadow layer.",
                    "Gets the radius of the shadow layer.",
                    "Returns whether the soft input method will be made visible when this TextView gets focused.",
                    "Return the text that TextView is displaying.",
                    "Returns the TextClassifier used by this TextView.",
                    "Gets the text colors for the different states ( normal, selected, focused ) of the TextView.",
                    "Returns the Drawable corresponding to the text cursor.",
                    "Returns resolved TextDirectionHeuristic that will be used for text layout.",
                    "Get the default primary Locale of the text in this TextView.",
                    "Get the default LocaleList of the text in this TextView.",
                    "Gets the parameters for text layout precomputation, for use with PrecomputedText.",
                    "Gets the extent by which text should be stretched horizontally.",
                    "Returns the Drawable corresponding to the selection handle used for positioning the cursor within text.",
                    "Returns the Drawable corresponding to the left handle used for selecting text.",
                    "Returns the Drawable corresponding to the right handle used for selecting text.",
                    "Gets the text size unit defined by the developer.",
                    "Returns the total bottom padding of the view, including the bottom Drawable if any, the extra space to keep more than maxLines from showing, and the vertical offset for gravity, if any.",
                    "Returns the total end padding of the view, including the end Drawable if any.",
                    "Returns the total left padding of the view, including the left Drawable if any.",
                    "Returns the total right padding of the view, including the right Drawable if any.",
                    "Returns the total start padding of the view, including the start Drawable if any.",
                    "Returns the total top padding of the view, including the top Drawable if any, the extra space to keep more than maxLines from showing, and the vertical offset for gravity, if any.",
                    "Gets the current android.text.method.TransformationMethod for the TextView.",
                    "Gets the current Typeface that is used to style the text.",
                    "Returns the list of URLSpans attached to the text ( by Linkify or otherwise ) if any.",
                    "Return true iff there is a selection of nonzero length inside this text view.",
                    "Checks whether the transformation method applied to this TextView is set to ALL CAPS.",
                    "Get the value of the TextView's elegant height metrics flag.",
                    "Returns whether the text is allowed to be wider than the View.",
                    "Returns whether this text view is a current input method target.",
                    "Returns if the text is constrained to a single horizontally scrolling line ignoring new line characters instead of letting it wrap onto multiple lines.",
                    "Return whether or not suggestions are enabled on this TextView.",
                    "Returns the state of the textIsSelectable flag ( See setTextIsSelectable ( ) ).",
                    "Returns the length, in characters, of the text managed by this TextView",
                    "Move the cursor, if needed, so that it is at an offset that is visible to the user.",
                    "Called by the framework in response to a request to begin a batch of edit operations through a call to link beginBatchEdit ( ).",
                    "Called by the framework in response to a text completion from the current input method, provided by it calling InputConnection.commitCompletion ( ).",
                    "Called by the framework in response to a text auto-correction ( such as fixing a typo using a dictionary ) from the current input method, provided by it calling InputConnection.commitCorrection ( ).",
                    "Called when an attached input method calls InputConnection.performEditorAction ( ) for this text view.",
                    "Called by the framework in response to a request to end a batch of edit operations through a call to link endBatchEdit.",
                    "Callback method to be invoked when the view tree is about to be drawn.",
                    "Called by the framework in response to a private command from the current method, provided by it calling InputConnection.performPrivateCommand ( ).",
                    "Default TextView implementation for receiving content.",
                    "Called when a context menu option for the text view is selected.",
                    "Removes the specified TextWatcher from the list of those whose methods are called whenever this TextView's text changes.",
                    "Sets the properties of this field to transform input to ALL CAPS display.",
                    "Sets the autolink mask of the text.",
                    "Specify whether this widget should automatically scale the text to try to perfectly fit within the layout bounds.",
                    "Specify whether this widget should automatically scale the text to try to perfectly fit within the layout bounds by using the default auto-size configuration.",
                    "Sets the break strategy for breaking paragraphs into lines.",
                    "Sets the size of the padding between the compound drawables and the text.",
                    "Specifies the blending mode used to apply the tint specified by setCompoundDrawableTintList ( android.content.res.ColorStateList ) to the compound drawables.",
                    "Applies a tint to the compound drawables.",
                    "Sets the Drawables ( if any ) to appear to the left of, above, to the right of, and below the text.",
                    "Sets the Drawables ( if any ) to appear to the start of, above, to the end of, and below the text.",
                    "Set whether the cursor is visible.",
                    "Sets the Factory used to create new Editables.",
                    "Set the TextView's elegant height metrics flag.",
                    "Causes words in the text that are longer than the view's width to be ellipsized instead of broken in the middle.",
                    "Sets the width of the TextView to be exactly ems wide.",
                    "Sets the right-hand compound drawable of the TextView to the `` error'' icon and sets an error message that will be displayed in a popup when the TextView has focus.",
                    "Sets the right-hand compound drawable of the TextView to the specified icon and sets an error message that will be displayed in a popup when the TextView has focus.",
                    "Apply to this text view the given extracted text, as previously returned by extractText ( android.view.inputmethod.ExtractedTextRequest, android.view.inputmethod.ExtractedText ).",
                    "Set whether to respect the ascent and descent of the fallback fonts that are used in displaying the text ( which is needed to avoid text from consecutive lines running into each other ).",
                    "Sets the list of input filters that will be used if the buffer is Editable.",
                    "Updates the top padding of the TextView so that is the distance between the top of the TextView and first line's baseline.",
                    "Sets TrueType or OpenType font variation settings.",
                    "Control whether this text view saves its entire text contents when freezing to an icicle, in addition to dynamic state such as cursor position.",
                    "Sets the horizontal alignment of the text and the vertical gravity that will be used when there is extra space in the TextView beyond what is required for the text itself.",
                    "Sets the height of the TextView to be exactly pixels tall.",
                    "Sets the color used to display the selection highlight.",
                    "Sets the text to be displayed when the text of the TextView is empty.",
                    "Sets the text to be displayed when the text of the TextView is empty, from a resource.",
                    "Sets the color of the hint text for all the states ( disabled, focussed, selected ... ) of this TextView.",
                    "Sets the color of the hint text.",
                    "Sets whether the text should be allowed to be wider than the View is.",
                    "Sets the frequency of automatic hyphenation to use when determining word breaks.",
                    "Change the custom IME action associated with the text view, which will be reported to an IME with EditorInfo #actionLabel and EditorInfo #actionId when it has focus.",
                    "Change `` hint'' locales associated with the text view, which will be reported to an IME with EditorInfo #hintLocales when it has focus.",
                    "Change the editor type integer associated with the text view, which is reported to an Input Method Editor ( IME ) with EditorInfo #imeOptions when it has focus.",
                    "Set whether the TextView includes extra top and bottom padding to make room for accents that go above the normal ascent and descent.",
                    "Set the extra input data of the text, which is the TextBoxAttribute.extras Bundle that will be filled in when creating an input connection.",
                    "Set the type of the content with a constant as defined for EditorInfo #inputType.",
                    "Sets the key listener to be used with this TextView.",
                    "Updates the bottom padding of the TextView so that is the distance between the bottom of the TextView and the last line's baseline.",
                    "Sets text letter-spacing in em units.",
                    "Sets an explicit line height for this TextView.",
                    "Sets line spacing for this TextView.",
                    "Sets the height of the TextView to be exactly lines tall.",
                    "Sets the color of links in the text.",
                    "Sets whether the movement method will automatically be set to LinkMovementMethod if setAutoLinkMask has been set to nonzero and links are detected in #setText.",
                    "Sets how many times to repeat the marquee animation.",
                    "Sets the width of the TextView to be at most maxEms wide.",
                    "Sets the height of the TextView to be at most maxPixels tall.",
                    "Sets the height of the TextView to be at most maxLines tall.",
                    "Sets the width of the TextView to be at most maxPixels wide.",
                    "Sets the width of the TextView to be at least minEms wide.",
                    "Sets the height of the TextView to be at least minPixels tall.",
                    "Sets the height of the TextView to be at least minLines tall.",
                    "Sets the width of the TextView to be at least minPixels wide.",
                    "Sets the android.text.method.MovementMethod for handling arrow key movement for this TextView.",
                    "Set a special listener to be called when an action is performed on the text view.",
                    "Sets flags on the Paint being used to display the text and reflows the text if they are different from the old flags.",
                    "Set the private content type of the text, which is the EditorInfo.privateImeOptions field that will be filled in when creating an input connection.",
                    "Directly change the content type integer of the text view, without modifying any other state.",
                    "Sets the Scroller used for producing a scrolling animation",
                    "Set the TextView so that when it takes focus, all the text is selected.",
                    "Gives the text a shadow of the specified blur radius and color, the specified distance from its drawn position.",
                    "Sets whether the soft input method will be made visible when this TextView gets focused.",
                    "Sets the properties of this field ( lines, horizontally scrolling, transformation method ) to be for a single-line input.",
                    "If true, sets the properties of this field ( number of lines, horizontally scrolling, transformation method ) to be for a single-line input ; if false, restores these to the default conditions.",
                    "Sets the Factory used to create new Spannables.",
                    "Sets the text to be displayed.",
                    "Sets the text to be displayed and the android.widget.TextView.BufferType.",
                    "Sets the TextView to display the specified slice of the specified char array.",
                    "Sets the text to be displayed using a string resource identifier.",
                    "Sets the text to be displayed using a string resource identifier and the android.widget.TextView.BufferType.",
                    "Sets the text appearance from the specified style resource.",
                    "Sets the text color, size, style, hint color, and highlight color from the specified TextAppearance resource.",
                    "Sets the TextClassifier for this TextView.",
                    "Sets the text color for all the states ( normal, selected, focused ) to be this color.",
                    "Sets the Drawable corresponding to the text cursor.",
                    "Sets whether the content of this view is selectable by the user.",
                    "Sets the text to be displayed but retains the cursor position.",
                    "Sets the text to be displayed and the android.widget.TextView.BufferType but retains the cursor position.",
                    "Set the default Locale of the text in this TextView to a one-member LocaleList containing just the given Locale.",
                    "Set the default LocaleList of the text in this TextView to the given value.",
                    "Apply the text layout parameter.",
                    "Sets the horizontal scale factor for text.",
                    "Sets the Drawable corresponding to the selection handle used for positioning the cursor within text.",
                    "Sets the Drawable corresponding to the left handle used for selecting text.",
                    "Sets the Drawable corresponding to the right handle used for selecting text.",
                    "Set the default text size to the given value, interpreted as `` scaled pixel'' units.",
                    "Set the default text size to a given unit and value.",
                    "Sets the transformation that is applied to the text that this TextView is displaying.",
                    "Sets the typeface and style in which the text should be displayed, and turns on the fake bold and italic bits in the Paint if the Typeface that you provided does not have all the bits in the style that you specified.",
                    "Sets the typeface and style in which the text should be displayed.",
                    "Sets the width of the TextView to be exactly pixels wide.",
                    "Subclasses override this to specify that they have a KeyListener by default even if not specifically called for in the XML options.",
                    "Subclasses override this to specify a default movement method.",
                    "This method is called when the selection has changed, in case any subclasses would like to know.",
                    "This method is called when the text is changed, in case any subclasses would like to know.",
                    "If your view subclass is displaying its own Drawable objects, it should override this function and return true for any Drawable it is displaying.",
                    "May be a boolean value, such as `` true'' or `` false''.",
                    "Must be one or more ( separated by' |' ) of the following constant values.",
                    "May be a dimension value, which is a floating point number appended with a unit such as `` 14.5 sp''.",
                    "Available units are: px ( pixels ), dp ( density-independent pixels ), sp ( scaled pixels based on preferred font size ), in ( inches ), and mm ( millimeters ).",
                    "May be a reference to another resource, in the form'' @ -LSB- + -RSB- -LSB- package: -RSB- type/name'' or a theme attribute in the form'' ?",
                    "May be a string value, using' ;' to escape characters such as'' or ` uxxxx' for a unicode character ;",
                    "May be an integer value, such as `` 100''.",
                    "May be a color value, in the form of `` rgb'', `` argb'', `` rrggbb'', or `` aarrggbb''.",
                    "May be a floating point value, such as `` 1.2''.",
                    "May be a fractional value, which is a floating point number appended with either % or % p, such as `` 14.5 %''.",
                    "The % suffix always means a percentage of the base size ; the optional % p suffix provides a size relative to some parent container.",
                    "Must be one of the following constant values.",
                    "Applications need to be aware that the flag is not a guarantee, and some IMEs may not respect it.",
                    "In 1.0, the TextWatcher #afterTextChanged method was erroneously not called after #setText calls.",
                    "Now, doing #setText if there are any text changed listeners forces the buffer type to Editable if it would not otherwise be and does call this method.",
                    "This has to be called after layout.",
                    "Returns true if anything changed.",
                    "Only valid while processing the touch gesture of interest, in an editable text view.",
                    "See Linkify #ALL and peers for possible values.",
                    "By default returns AUTOFILL_TYPE_NONE, but views should override it to properly support the Autofill Framework.",
                    "The value is trimmed to 100K chars if longer.",
                    "If the text is not editable, null is returned.",
                    "It is only valid to call this after measuring.",
                    "The format is the same as the CSS font-feature-settings attribute: https://www.w3.org/TR/css-fonts-3/#font-feature-settings-prop",
                    "For android.widget.EditText it always returns true.",
                    "This will frequently be null for non-EditText TextViews.",
                    "This value can be null if the text or width has recently changed.",
                    "The value returned is in ems.",
                    "Normally, this value is 0.0.",
                    "If the internal Layout has not been built, return 0 and set bounds to ( 0, 0, 0, 0 )",
                    "Note that markup within the text can cause individual lines to be taller or shorter than this height, and the layout may contain additional first-or last-line padding.",
                    "Only meaningful if the TextView has marquee enabled.",
                    "A typical use case is to pass the result of MotionEvent #getX ( ) and MotionEvent #getY ( ) to this method.",
                    "Use this only to consult the Paint's properties and not to change them.",
                    "If setText ( java.lang.CharSequence ) was called with an argument of BufferType.SPANNABLE or BufferType.EDITABLE, you can cast the return value from this method to Spannable or Editable, respectively.",
                    "The content of the return value should not be modified.",
                    "If you want a modifiable one, you should make your own copy first.",
                    "If no TextClassifier has been set, this TextView uses the default set by the TextClassificationManager.",
                    "Note that any change applied to the cursor Drawable will not be visible until the cursor is hidden and then drawn again.",
                    "The TextDirectionHeuristic that is used by TextView is only available after getTextDirection ( ) and getLayoutDirection ( ) is resolved.",
                    "Therefore the return value may not be the same as the one TextView uses if the View's layout direction is not resolved or detached from parent root view.",
                    "This will always be the first member of getTextLocales ( ).",
                    "This will usually be 1.0.",
                    "Note that any change applied to the handle Drawable will not be visible until the handle is hidden and then drawn again.",
                    "It may be specified in resources or be passed as the unit argument of setTextSize ( int, float ) at runtime.",
                    "This is frequently null, except for single-line and password fields.",
                    "You can call URLSpan #getURL on them to find where they link to or use Spanned #getSpanStart and Spanned #getSpanEnd to find the region of the text they are attached to.",
                    "This setting selects font variants that have not been compacted to fit Latin-based vertical metrics, and also increases top and bottom bounds to provide more space.",
                    "If false, the text will be wrapped to the width of the View.",
                    "The default implementation just checks with InputMethodManager.",
                    "The suggestions are generated by the IME or by the spell checker as the user types.",
                    "This is done by adding SuggestionSpans to the text.",
                    "When suggestions are enabled ( default ), this list of suggestions will be displayed when the user asks for them on these parts of the text.",
                    "This value depends on the inputType of this TextView.",
                    "The class of the input type must be InputType #TYPE_CLASS_TEXT.",
                    "In addition, the type variation must be one of InputType #TYPE_TEXT_VARIATION_NORMAL, InputType #TYPE_TEXT_VARIATION_EMAIL_SUBJECT, InputType #TYPE_TEXT_VARIATION_LONG_MESSAGE, InputType #TYPE_TEXT_VARIATION_SHORT_MESSAGE or InputType #TYPE_TEXT_VARIATION_WEB_EDIT_TEXT.",
                    "And finally, the InputType #TYPE_TEXT_FLAG_NO_SUGGESTIONS flag must not be set.",
                    "Although you have to set this flag to allow users to select and copy text in a non-editable TextView, the content of an EditText can always be selected, independently of the value of this flag.",
                    "This will not move the cursor if it represents more than one character ( a selection range ).",
                    "This will only work if the TextView contains spannable text ; otherwise it will do nothing.",
                    "The default implementation does nothing ; text views that are supporting auto-completion should override this to do their desired behavior.",
                    "The default implementation flashes the background of the corrected word to provide feedback to the user.",
                    "The method should return true in response to an action type of android.view.DragEvent #ACTION_DRAG_STARTED to receive drag events for the current operation.",
                    "The method should also return true in response to an action type of android.view.DragEvent #ACTION_DROP if it consumed the drop, or false if it didn't.",
                    "For all other events, the return value is ignored.",
                    "The default implementation will call your action listener supplied to setOnEditorActionListener, or perform a standard operation for EditorInfo.IME _ ACTION_NEXT, EditorInfo.IME _ ACTION_PREVIOUS, or EditorInfo.IME _ ACTION_DONE.",
                    "For backwards compatibility, if no IME options have been set and the text view would not normally advance focus on enter, then the NEXT and DONE actions received here will be turned into an enter key down/up pair to go through the normal key handling.",
                    "At this point, all views in the tree have been measured and given a frame.",
                    "Clients can use this to adjust their scroll bounds or even to request a new layout before drawing occurs.",
                    "Apps wishing to provide custom behavior should configure a listener via setOnReceiveContentListener.",
                    "For non-editable TextViews the default behavior is a no-op ( returns the passed-in content without acting on it ).",
                    "For editable TextViews the default behavior is to insert text into the view, coercing non-text content to text as needed.",
                    "The MIME types `` text/plain'' and `` text/html'' have well-defined behavior for this, while other MIME types have reasonable fallback behavior ( see ClipData.Item #coerceToStyledText ).",
                    "Currently this will be one of android.R.id #selectAll, android.R.id #cut, android.R.id #copy, android.R.id #paste or android.R.id #shareText.",
                    "This may use a `` small caps'' formatting if available.",
                    "This setting will be ignored if this field is editable or selectable.",
                    "This call replaces the current transformation method.",
                    "Disabling this will not necessarily restore the previous behavior from before this was enabled.",
                    "See Linkify.ALL and peers for possible values.",
                    "Note: Linkify.MAP _ ADDRESSES is deprecated and should be avoided ; see its documentation.",
                    "If all the configuration params are valid the type of auto-size is set to AUTO_SIZE_TEXT_TYPE_UNIFORM.",
                    "If at least one value from the presetSizes is valid then the type of auto-size is set to AUTO_SIZE_TEXT_TYPE_UNIFORM.",
                    "The default value for TextView is, and the default value for EditText is Layout #BREAK_STRATEGY_SIMPLE, the latter to avoid the text `` dancing'' when being edited.",
                    "The default mode is PorterDuff.Mode #SRC_IN.",
                    "Does not modify the current tint mode, which is BlendMode #SRC_IN by default.",
                    "Subsequent calls to setCompoundDrawables ( android.graphics.drawable.Drawable, android.graphics.drawable.Drawable, android.graphics.drawable.Drawable, android.graphics.drawable.Drawable ) and related methods will automatically mutate the drawables and apply the specified tint and tint mode using Drawable #setTintList ( ColorStateList ).",
                    "Use null if you do not want a Drawable there.",
                    "The Drawables must already have had android.graphics.drawable.Drawable #setBounds called.",
                    "Calling this method will overwrite any Drawables previously set using setCompoundDrawablesRelative or related methods.",
                    "Calling this method will overwrite any Drawables previously set using setCompoundDrawables or related methods.",
                    "Use 0 if you do not want a Drawable there.",
                    "The Drawables' bounds will be set to their intrinsic bounds.",
                    "Note that this property only makes sense for editable TextView.",
                    "If IME is temporarily consuming the input, the cursor will be always invisible, visibility will be updated as the last state when IME does not consume the input anymore.",
                    "If provided, this ActionMode.Callback will be used to create the ActionMode when text insertion is initiated in this View.",
                    "The standard implementation populates the menu with a subset of Select All, Paste and Replace actions, depending on what this View supports.",
                    "A custom implementation can add new entries in the default menu in its android.view.ActionMode.Callback #onPrepareActionMode ( android.view.ActionMode, * android.view.Menu ) method.",
                    "The default actions can also be removed from the menu using android.view.Menu #removeItem ( int ) and passing android.R.id #selectAll, android.R.id #paste or android.R.id #replaceText ids as parameters.",
                    "Returning false from android.view.ActionMode.Callback #onCreateActionMode ( android.view.ActionMode, * android.view.Menu ) will prevent the action mode from being started.",
                    "Action click events should be handled by the custom implementation of android.view.ActionMode.Callback #onActionItemClicked ( android.view.ActionMode, * android.view.MenuItem ).",
                    "Note that text insertion mode is not started when a TextView receives focus and the android.R.attr #selectAllOnFocus flag has been set.",
                    "If provided, this ActionMode.Callback will be used to create the ActionMode when text selection is initiated in this View.",
                    "The standard implementation populates the menu with a subset of Select All, Cut, Copy, Paste, Replace and Share actions, depending on what this View supports.",
                    "A custom implementation can add new entries in the default menu in its android.view.ActionMode.Callback #onPrepareActionMode ( ActionMode, android.view.Menu ) method.",
                    "The default actions can also be removed from the menu using android.view.Menu #removeItem ( int ) and passing android.R.id #selectAll, android.R.id #cut, android.R.id #copy, android.R.id #paste, android.R.id #replaceText or android.R.id #shareText ids as parameters.",
                    "Returning false from android.view.ActionMode.Callback #onCreateActionMode ( ActionMode, android.view.Menu ) will prevent the action mode from being started.",
                    "Action click events should be handled by the custom implementation of android.view.ActionMode.Callback #onActionItemClicked ( ActionMode, * android.view.MenuItem ).",
                    "Note that text selection mode is not started when a TextView receives focus and the android.R.attr #selectAllOnFocus flag has been set.",
                    "The content is highlighted in that case, to allow for quick replacement.",
                    "You may also want to #setSingleLine or setHorizontallyScrolling to constrain the text to a single line.",
                    "Use null to turn off ellipsizing.",
                    "If setMaxLines has been used to set two or more lines, only android.text.TextUtils.TruncateAt #END and android.text.TextUtils.TruncateAt #MARQUEE are supported ( other ellipsizing types will not do anything ).",
                    "This value is used for width calculation if LayoutParams does not force TextView to have an exact width.",
                    "Setting this value overrides previous minimum/maximum configurations such as setMinEms ( int ) or setMaxEms ( int ).",
                    "The icon and error message will be reset to null when any key events cause changes to the TextView's text.",
                    "If the error is null, the error message and icon will be cleared.",
                    "The drawable must already have had android.graphics.drawable.Drawable #setBounds set on it.",
                    "If the error is null, the error message will be cleared ( and you should provide a null icon as well ).",
                    "If set, fallback fonts that end up getting used can increase the ascent and descent of the lines that they are used on.",
                    "The settings string is constructed from multiple pairs of axis tag and style values.",
                    "The axis tag must contain four ASCII characters and must be wrapped with single quotes ( U +0027 ) or double quotes ( U +0022 ).",
                    "Axis strings that are longer or shorter than four characters, or contain characters outside of U +0020.",
                    "U +007 E are invalid.",
                    "If a specified axis name is not defined in the font, the settings will be ignored.",
                    "By default this is false, not saving the text.",
                    "Set to true if the text in the text view is not being saved somewhere else in persistent storage ( such as in a content provider ) so that if the view is later thawed the user will not lose their data.",
                    "For android.widget.EditText it is always enabled, regardless of the value of the attribute.",
                    "This value is used for height calculation if LayoutParams does not force TextView to have an exact height.",
                    "Setting this value overrides previous minimum/maximum height configurations such as setMinHeight ( int ) or setMaxHeight ( int ).",
                    "Null means to use the normal empty text.",
                    "The hint does not currently participate in determining the size of the view.",
                    "If false, it will be wrapped to the width of the View.",
                    "The default value for both TextView and EditText is.",
                    "Note that the default hyphenation frequency value is set from the theme.",
                    "Starting with Android O, this also causes internationalized listeners to be created ( or change locale ) based on the first locale in the input locale list.",
                    "Note: If you want new `` hint'' to take effect immediately you need to call InputMethodManager #restartInput ( View ).",
                    "The given integer is the resource identifier of an XML resource holding an <input-extras> XML tree.",
                    "This will take care of changing the key listener, by calling setKeyListener ( android.text.method.KeyListener ), to match the given content type.",
                    "If the given content type is EditorInfo #TYPE_NULL then a soft keyboard will not be displayed for this text view.",
                    "Note that the maximum number of displayed lines ( see setMaxLines ( int ) ) will be modified if you change the EditorInfo #TYPE_TEXT_FLAG_MULTI_LINE flag of the input type.",
                    "The default value is Layout #JUSTIFICATION_MODE_NONE.",
                    "If the last line is too short for justification, the last line will be displayed with the alignment set by android.view.View #setTextAlignment.",
                    "This can be null to disallow user input.",
                    "Note that this method has significant and subtle interactions with soft keyboards and other input method: see KeyListener.getInputType ( ) for important details.",
                    "Calling this method will replace the current content type of the text view with the content type returned by the key listener.",
                    "Be warned that if you want a TextView with a key listener or movement method not to be focusable, or if you want a TextView without a key listener or movement method to be focusable, you must call #setFocusable again after calling this to get the focusability back the way you want it.",
                    "Typical values for slight expansion will be around 0.05.",
                    "This is equivalent to the vertical distance between subsequent baselines in the TextView.",
                    "Each line other than the last line will have its height multiplied by mult and have add added to it.",
                    "Setting this value overrides previous minimum/maximum height configurations such as setMinLines ( int ) or setMaxLines ( int ).",
                    "setSingleLine ( ) will set this value to 1.",
                    "Only applied if the TextView has marquee enabled.",
                    "Set to -1 to repeat indefinitely.",
                    "Setting this value overrides previous maximum width configurations such as setMaxWidth ( int ) or setWidth ( int ).",
                    "Setting this value overrides previous maximum height configurations such as setMaxLines ( int ) or setLines ( int ).",
                    "Setting this value overrides previous maximum height configurations such as setMaxHeight ( int ) or setLines ( int ).",
                    "Setting this value overrides previous maximum width configurations such as setMaxEms ( int ) or setEms ( int ).",
                    "Setting this value overrides previous minimum width configurations such as setMinWidth ( int ) or setWidth ( int ).",
                    "Setting this value overrides previous minimum height configurations such as setMinLines ( int ) or setLines ( int ).",
                    "The value given here is different than setMinimumHeight ( int ).",
                    "Between minHeight and the value set in setMinimumHeight ( int ), the greater one is used to decide the final height.",
                    "Setting this value overrides other previous minimum height configurations such as setMinHeight ( int ) or setHeight ( int ).",
                    "Setting this value overrides previous minimum width configurations such as setMinEms ( int ) or setEms ( int ).",
                    "The value given here is different than setMinimumWidth ( int ).",
                    "Between minWidth and the value set in setMinimumWidth ( int ), the greater one is used to decide the final width.",
                    "This can be null to disallow using the arrow keys to move the cursor or scroll the view.",
                    "This will be called when the enter key is pressed, or when an action supplied to the IME is selected by the user.",
                    "Setting this means that the normal hard key event will not insert a newline into the text view, even if it is multi-line ; holding down the ALT modifier will, however, allow the user to insert a newline character.",
                    "The text shadow produced does not interact with the properties on view that are responsible for real time shadows, elevation and translationZ.",
                    "Note that the default conditions are not necessarily those that were in effect prior this method, and you may want to reset these properties to your custom values.",
                    "Note that due to performance reasons, by setting single line for the EditText, the maximum text length is set to 5000 if no other character limitation are applied.",
                    "TextView does not accept HTML-like formatting, which you can do with text strings in XML resource files.",
                    "To style your strings, attach android.text.style.",
                    "* objects to a android.text.SpannableString, or see the Available Resource Types documentation for an example of setting formatted text in the XML resource file.",
                    "You must promise that you will not change the contents of the array except for right before another call to setText ( ), since the TextView has no way to know that the text has changed and that it needs to invalidate and re-layout.",
                    "Use a framework-defined TextAppearance style like @android: style/TextAppearance.",
                    "Material.Body1 or see TextAppearance for the set of attributes that can be used in a custom style.",
                    "Deprecated: Use setTextAppearance ( int ) instead.",
                    "The Drawable defaults to the value of the textCursorDrawable attribute.",
                    "The default is false, meaning that the content is not selectable.",
                    "When you use a TextView to display a useful piece of information to the user ( such as a contact's address ), make it selectable, so that the user can select and copy its content.",
                    "You can also use set the XML attribute android.R.styleable #TextView_textIsSelectable to `` true''.",
                    "When you call this method to set the value of textIsSelectable, it sets the flags focusable, focusableInTouchMode, clickable, and longClickable to the same value.",
                    "These flags correspond to the attributes android: focusable, android: focusableInTouchMode, android: clickable, and android: longClickable.",
                    "To restore any of these flags to a state you had set previously, call one or more of the following methods: setFocusable ( ), setFocusableInTouchMode ( ), setClickable ( ) or setLongClickable ( ).",
                    "Same as setText ( java.lang.CharSequence ) except that the cursor position ( if any ) is retained in the new text.",
                    "Same as setText ( java.lang.CharSequence, android.widget.TextView.BufferType ) except that the cursor position ( if any ) is retained in the new text.",
                    "This value is used to choose appropriate typefaces for ambiguous characters ( typically used for CJK locales to disambiguate Hanzi/Kanji/Hanja characters ).",
                    "It also affects other aspects of text display, including line breaking.",
                    "Update the TextView parameters to be compatible with PrecomputedText.Params.",
                    "The default value is 1.0.",
                    "Values greater than 1.0 stretch the text wider.",
                    "Values less than 1.0 make the text narrower.",
                    "By default, this value is 1.0.",
                    "The Drawable defaults to the value of the textSelectHandle attribute.",
                    "The Drawable defaults to the value of the textSelectHandleLeft attribute.",
                    "The Drawable defaults to the value of the textSelectHandleRight attribute.",
                    "This size is adjusted based on the current density and user font size preference.",
                    "Note: if this TextView has the auto-size feature enabled than this function is no-op.",
                    "See TypedValue for the possible dimension units.",
                    "Note that not all Typeface families actually have bold and italic variants, so you may need to use setTypeface ( android.graphics.Typeface, int ) to get the appearance that you actually want.",
                    "Setting this value overrides previous minimum/maximum width configurations such as setMinWidth ( int ) or setMaxWidth ( int ).",
                    "The default range is the drawing height of this view.",
                    "Note: Always call the super implementation, which informs the accessibility subsystem about the selection change.",
                    "Within text, the lengthAfter characters beginning at start have just replaced old text that had length lengthBefore.",
                    "It is an error to attempt to make changes to text from this callback.",
                    "This allows animations for those drawables to be scheduled.",
                    "Be sure to call through to the super class when overriding this function.",
                    "If you override this method you must call through to the superclass implementation.",
                    "When the application is in a special mode, where user's activities are expected to be not recorded in the application's history.",
                    "Some web browsers and chat applications may have this kind of modes.",
                    "When storing typing history does not make much sense.",
                    "Specifying this flag in typing games may help to avoid typing history from being filled up with words that the user is less likely to type in their daily life.",
                    "Another example is that when the application already knows that the expected input is not a valid word ( e.g. a promotion code that is not a valid word in any natural language ).",
                    "java.lang.Appendable #append ( CharSequence, int, int )",
                    "#setAutoSizeTextTypeUniformWithConfiguration ( int, int, int, int )",
                    "#setAutoSizeTextTypeUniformWithPresetSizes ( int -LSB- -RSB-, int )",
                    "android.graphics.Paint #setFontFeatureSettings ( String )",
                    "android.graphics.Paint #setFontVariationSettings ( String )",
                    "#setLineSpacing ( float, float )",
                    "#setShadowLayer ( float, float, float, int )",
                    "android.graphics.Paint #setElegantTextHeight ( boolean )",
                    "android.graphics.drawable.Drawable #setTintBlendMode ( BlendMode )",
                    "android.graphics.drawable.Drawable #setTintList ( ColorStateList )",
                    "android.graphics.drawable.Drawable #setTintMode ( PorterDuff.Mode )",
                    "android.text.StaticLayout.Builder #setUseLineSpacingFromFallbacks ( boolean )",
                    "#setPadding ( int, int, int, int )",
                    "#setPaddingRelative ( int, int, int, int )",
                    "Set font width to 150.",
                    "Set the font slant to 20 degrees and ask for italic style.",
                    "android.graphics.Paint #setShadowLayer ( float, float, float, int )",
                    "#setText ( CharSequence, android.widget.TextView.BufferType )",
                    ""
                ],
                "title": "TextView \u00a0|\u00a0 Android Developers"
            }
        ],
        "git": [
            {
                "link": "https://github.com/nex3z/FlowLayout/issues/10",
                "content": [
                    "Is there a way to set layout's gravity ?",
                    "\u00b7 Issue # 10 \u00b7 nex3z/FlowLayout \u00b7 GitHub",
                    "The question is in the title pretty much.",
                    "I would like to set vertical gravity to center, but I am not sure if that's possible.",
                    "The text was updated successfully, but these errors were encountered:",
                    "I'm adding the support for gravity in next release.",
                    "The layout above will produce:",
                    "Sorry for not replying, but I forgot to say that I would like to do this programmatically.",
                    "Thank you for the XML, though !",
                    "I tried the 1.1.1 version, but the method wasn't there yet I saw.",
                    "I've added a setGravity ( ) method in 1.1.2 version:",
                    "Sorry, but it seems to be centering only horizontally.",
                    ".",
                    "Could you share the layout and your expectation ?",
                    "I suppose you want to center the text vertically.",
                    "From the screenshot, I guess the height of the text is much smaller than the height of the image, or the text's gravity not set to center_vertical.",
                    "You may try setting the height of the text to be the same as the height of the image, and set android: gravity = `` center_vertical'' on the text.",
                    "But without android: gravity = `` center_vertical'' on the TextView, it looks like:",
                    "FlowLayout applys the gravity on all its child views as a whole.",
                    "If you want to align the content of any specific child view, you need to change the configuration of that child view ( change its size, gravity, etc ).",
                    "Setting the TextView gravity to CENTER_VERTICAL and height to the same as ImageView did the trick.",
                    "I thought your FlowLayout would center content the same way as ApmeM's FlowLayout does ( basically centering each view to one single line, not all childs as a whole ).",
                    "As I couldn't use his FlowLayout, I had to search for an alternative and now yours is perfect, thank you !",
                    ""
                ],
                "title": "Is there a way to set layout's gravity ?"
            }
        ],
        "qa": [
            {
                "uid": "19025301",
                "link": "https://stackoverflow.com/questions/19025301",
                "title": "Textview Gravity not working properly in android",
                "answers": [
                    {
                        "uid": 19025355,
                        "score": 30,
                        "text": [
                            "You set this text view a width of `` wrap_content'' it means, what ever the text is, the view take the size of the text.",
                            "and in the LinearLayout, the default gravity -LRB- used here -RRB- is ` center'",
                            "you should try this:"
                        ]
                    },
                    {
                        "uid": 19025393,
                        "score": 29,
                        "text": [
                            "99 % of the time, not working properly == not used properly.",
                            "You are mistaking gravity and layout_gravity.",
                            "gravity is the way the text will align itself in the TextView.",
                            "The TextView being in wrap_content this does nothing, as the TextView is exactly the size of the text.",
                            "layout_gravity is the way the TextView will align itself in its parent, in your case in the vertical LinearLayout"
                        ]
                    },
                    {
                        "uid": 19025503,
                        "score": 2,
                        "text": [
                            "You have given your TextView width wrap_content, and that is the problem, Check below code and replace it to your code."
                        ]
                    },
                    {
                        "uid": 19025568,
                        "score": 0,
                        "text": [
                            "set android: layout_width = `` fill_parent'' for textView1"
                        ]
                    },
                    {
                        "uid": 37515486,
                        "score": 0,
                        "text": [
                            "Make sure you don't have something like that hanging around"
                        ]
                    }
                ],
                "tags": [
                    "java",
                    "android",
                    "layout-gravity"
                ]
            }
        ],
        "other": [
            {
                "link": "https://guides.codepath.com/android/Working-with-the-TextView",
                "type": "misc",
                "content": [
                    "They were designed to be optimal for mobile displays, so these are the three fonts you will be working with most of the time and they can be styled using a handful of XML attributes.",
                    "You might, however, see the need to use custom fonts for special purposes.",
                    "This guide will take a look at the TextView and discuss common properties associated with this view as well as how to setup custom typefaces.",
                    "Text Attributes Typeface As stated in the overview, there are three different default typefaces which are known as the Droid family of fonts: sans, monospace and serif.",
                    "You can specify any one of them as the value for the android: typeface attribute in the XML:",
                    "In addition to the above, there is another attribute value named `` normal'' which defaults to the sans typeface.",
                    "Text Style The android: textStyle attribute can be used to put emphasis on the text.",
                    "The possible values are: normal, bold, italic.",
                    "You can also specify bold | italic.",
                    "A sampling of styles can be seen below:",
                    "Text Size android: textSize specifies the font size.",
                    "Its value must consist of two parts: a floating-point number followed by a unit.",
                    "It is generally a good practice to use the sp unit so the size can scale depending on user settings.",
                    "Too many type sizes and styles at once can wreck any layout.",
                    "The basic set of styles are based on a typographic scale of 12, 14, 16, 20, and 34.",
                    "Refer to this typography styles guide for more details.",
                    "Text Truncation There are a few ways to truncate text within a TextView.",
                    "First, to restrict the total number of lines of text we can use android: maxLines and android: minLines:",
                    "In addition, we can use android: ellipsize to begin truncating text",
                    "Following values are available for ellipsize: start for ... bccc, end for aaab ..., middle for aa ... cc, and marquee for aaabbbccc sliding from left to right.",
                    "There is a known issue with ellipsize and multi-line text, see this MultiplelineEllipsizeTextView library for an alternative.",
                    "Text Color The android: textColor and android: textColorLink attribute values are hexadecimal RGB values with an optional alpha channel, similar to what's found in CSS:",
                    "The android: textColorLink attribute controls the highlighting for hyperlinks embedded within the TextView.",
                    "We can edit the color at runtime with:",
                    "Text Shadow You can use three different attributes to customize the appearance of your text shadow:",
                    "android: shadowColor - Shadow color in the same format as textColor.",
                    "android: shadowRadius - Radius of the shadow specified as a floating point number.",
                    "android: shadowDx - The shadow's horizontal offset specified as a floating point number.",
                    "android: shadowDy - The shadow's vertical offset specified as a floating point number.",
                    "The floating point numbers don't have a specific unit - they are merely arbitrary factors.",
                    "Various Text Properties There are many other text properties including android: lineSpacingMultiplier, android: letterSpacing, android: textAllCaps, android: includeFontPadding and many others:",
                    "android: includeFontPadding removes the extra padding around large fonts.",
                    "android: lineSpacingMultiplier governs the spacing between lines with a default of `` 1''.",
                    "Inserting HTML Formatting TextView natively supports HTML by translating HTML tags to spannable sections within the view.",
                    "To apply basic HTML formatting to text, add text to the TextView with:",
                    "You can read more about the html modes here.",
                    "Note that all tags are not supported.",
                    "See this article for a more detailed look at supported tags and usages.",
                    "Setting Font Colors For setting font colors, we can use the <font> tag as shown:",
                    "And you should be all set.",
                    "Storing Long HTML Strings If you want to store your HTML text within res/values/strings.xml, you have to use CDATA to escape such as:",
                    "and access the content with getString ( R.string.htmlFormattedText ) to load this within the TextView.",
                    "For more advanced cases, you can also check out the html-textview library which adds support for almost any HTML tag within this third-party TextView.",
                    "Autolinking URLs TextView has native support for automatically locating URLs within the their text content and making them clickable links which can be opened in the browser.",
                    "To do this, enable the android: autolink property:",
                    "Issues with ListView One known issue when using android: autoLink or the Linkify class is that it may break the ability to respond to events on the ListView through setOnItemClickListener.",
                    "Check out this solution which extends TextView in order to modify the onTouchEvent to correctly propagate the click.",
                    "You basically need to create a LinkifiedTextView and use this special View in place of any of your TextView's that need auto-link detection.",
                    "In addition, review these alternate solutions which may be effective as well:",
                    "This stackoverflow post or this other post",
                    "This android issue for additional context.",
                    "Displaying Images within a TextView A TextView is actually surprisingly powerful and actually supports having images displayed as a part of it's content area.",
                    "Any images stored in the `` drawable'' folders can actually be embedded within a TextView at several key locations in relation to the text using the android: drawableRight and the android: drawablePadding property.",
                    "In Android, many views inherit from TextView such as Buttons, EditTexts, RadioButtons which means that all of these views support the same functionality.",
                    "For example, we can also do:",
                    "Check out this TextView article for a more detailed look at how to use this functionality.",
                    "Note that if you want to be able to better control the size or scale of the drawables, check out this handy TextView extension or this bitmap drawable approach.",
                    "You can also make calls to setCompoundDrawablesWithIntrinsicBounds on the TextView.",
                    "Using Fonts The easiest way to add font support is to upgrade to Android Studio 3.0, which provides the ability to use other fonts provided by Google.",
                    "You can visit https://fonts.google.com/ to see the ones that are free to use.",
                    "See the FAQ section for more information.",
                    "Android Studio v3 .0 provides built-in support for these fonts and will automatically handles generating the XML and necessary metadata.",
                    "Next to the Attributes section of a TextView, look for the fontFamily and click on More Fonts:",
                    "You will then see these choices:",
                    "Once you choose a font, you will notice that a font directory will be created and a similar XML file will be generated.",
                    "Notice that Android Studio automatically takes care of adding the necessary font provider certificates required to request from Google:",
                    "Adding custom fonts We can actually use any custom font that we'd like within our applications.",
                    "Check out fontsquirrel for an easy source of free fonts.",
                    "For example, we can download Chantelli Antiqua as an example.",
                    "Fonts are stored in the `` assets'' folder.",
                    "In Android Studio, File > New > folder > Assets Folder.",
                    "Now download any font and place the TTF file in the assets/fonts directory:",
                    "We're going to use a basic layout file with a TextView, marked with an id of `` custom_font'' so we can access it in our code.",
                    "To set the custom font manually, open your activity file and insert this into the onCreate ( ) method:",
                    "Alternatively, you can use the third-party calligraphy library:",
                    "Either method will will result in:",
                    "You'll also want to keep an eye on the total size of your custom fonts, as this can grow quite large if you're using a lot of different typefaces.",
                    "Using Spans to Style Sections of Text Spans come in really handy when we want to apply styles to portions of text within the same TextView.",
                    "We can change the text color, change the typeface, add an underline, etc, and apply these to only certain portions of the text.",
                    "The full list of spans shows all the available options.",
                    "As an example, let's say we have a single TextView where we want the first word to show up in red and the second word to have a strikethrough:",
                    "We can accomplish this with spans using the code below:",
                    "Note: There are 3 different classes that can be used to represent text that has markup attached.",
                    "SpannableStringBuilder ( used above ) is the one to use when dealing with mutable spans and mutable text.",
                    "SpannableString is for mutable spans, but immutable text.",
                    "And SpannedString is for immutable spans and immutable text.",
                    "Creating Clickable Styled Spans In certain cases, we might want different substrings in a TextView to different styles and then clickable to trigger an action.",
                    "For example, rendering tweet items where @foo can be clicked in a message to view a user's profile.",
                    "For this, you should copy over the PatternEditableBuilder.java utility into your app.",
                    "You can then use this utility to make clickable spans.",
                    "and this results in the following:",
                    "For more details, view the README for more usage examples.",
                    "Overview Every Android device comes with a collection of standard fonts: Droid Sans, Droid Sans Mono and Droid Serif.",
                    ""
                ],
                "title": "Working with the TextView | CodePath Android Cliffnotes"
            }
        ]
    },
    "parsed": true
}