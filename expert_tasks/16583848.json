{
    "task": "Unlimited/Dynamic ViewPager in both directions",
    "description": "There is one use-case of ViewPager I've never seen pretty implemented.\nViewPager is more or less static structure.\nIt's not so hard to add Pages to the right side ( appending to Model and displaying it ), however, there should be nice-to-use solution to expand PagerAdapter ( or some of it's subclasses ) so it can expand in both directions.\nI can imagine interface for Adapter like this\nSimilar to Collections Iterator, but both-directional.\nWhere index/position is not limited from below on 0, but can use whole range of Integer type.\nMaybe not base the implementation on array ( which is 0 to infinite ).\nI've found this `` hack'': dynamically add and remove view to viewpager But as I stated before, I'm trying to get it working naturally, not maintaining 3,5, ... items and force ViewPager to change current position based on some twisted logic Is there currently any sufficient implementation or is it necessary to implement it ?\nI'm willing to bounty reward answer, if it will be a whole new implementation.",
    "type": "SO",
    "link": "https://stackoverflow.com/questions/16583848",
    "question_id": "16583848",
    "resources": {
        "api": [
            {
                "link": "https://developer.android.com/guide/navigation/navigation-swipe-view-2",
                "type": "android",
                "content": [
                    "Swipe views allow you to navigate between sibling screens, such as tabs, with a horizontal finger gesture, or swipe.",
                    "This navigation pattern is also referred to as horizontal paging.",
                    "This topic teaches you how to create a tab layout with swipe views for switching between tabs, along with how to show a title strip instead of tabs.",
                    "You can create swipe views using AndroidX's ViewPager2 widget.",
                    "To use ViewPager2 and tabs, you need to add a dependency on ViewPager2 and on Material Components to your project.",
                    "To set up your layout with ViewPager2, add the <ViewPager2> element to your XML layout.",
                    "For example, if each page in the swipe view should consume the entire layout, then your layout should look like this:",
                    "To insert child views that represent each page, you need to hook this layout to a FragmentStateAdapter.",
                    "Here's how you might use it to swipe across a collection of Fragment objects:",
                    "The following sections show how you can add tabs to help facilitate navigation between pages.",
                    "A TabLayout provides a way to display tabs horizontally.",
                    "When used together with a ViewPager2, a TabLayout can provide a familiar interface for navigating between pages in a swipe view.",
                    "Figure 1: A TabLayout with four tabs.",
                    "To include a TabLayout in a ViewPager2, add a <TabLayout> element above the <ViewPager2> element, as shown below:",
                    "Next, create a TabLayoutMediator to link the TabLayout to the ViewPager2, and attach it as follows:",
                    "For additional design guidance for tab layouts, see the Material Design documentation for tabs.",
                    "To learn more about ViewPager2, see the following additional resources.",
                    "Turning the Page: Migrating to ViewPager2 ( Android Dev Summit' 19 )",
                    ""
                ],
                "title": "Create swipe views with tabs using ViewPager2 \u00a0|\u00a0 Android Developers"
            }
        ],
        "git": [
            {
                "link": "https://github.com/thoughtbot/expandable-recycler-view/issues/53",
                "content": [
                    "RecyclerView HEIGHT = WRAP_CONTENT not working ( hasFixedSize = true, setNestedScrollingEnabled = false ) \u00b7 Issue # 53 \u00b7 thoughtbot/expandable-recycler-view \u00b7 GitHub",
                    "I'm trying to implement an expandable list using this library but I need that my RecyclerView working with WRAP_CONTENT ( auto update of height attribute ).",
                    "I used hasFixedSize = true and setNestedScrollingEnabled = false but the LinearLayoutManager doesn't update the RecyclerView size.",
                    "My layout hierarchy will be like this:",
                    "There are a custom layout manager to make this work ?",
                    "The text was updated successfully, but these errors were encountered:",
                    "What are you getting as a result ?",
                    "My RecyclerView get the initial height according with my groups, but after expand the groups, the height is not updated.",
                    "hi this is my layout",
                    "I have same problem and when I am expanded the list the height of list is not updated and the group for one second were hidden but when I read your issu I am understand that you should set your hieght of recyclerview to match_parent",
                    "and the parent of them is a relative layout",
                    "@mandybess please look into this issue",
                    "@moeintav We need to set the height parameter of RecyclerView to wrap_content, because the RecyclerView should increase its size based on the size of its children.",
                    "somebody fix this, this is a critical issue",
                    "i suggest you to put the recyclerview in any other layout ( Relative layout is preferable ).",
                    "Then change recyclerview's height/width as match parent to that layout and set the parent layout's height/width as wrap content.",
                    "@margin555 you are 100 % right just needs to be in another layout but that layout MUST be relative view.",
                    "@margin555 Thank you very much you saved my day !",
                    "Now here is my layout:",
                    "@margin555 Amazing !",
                    "Many thanks.",
                    "@margin555 Thanks for the solution.",
                    "Put the RecyclerView into NestedScrollView like this",
                    "and remove the android: nestedScrollingEnabled = `` false'' from RecyclerVeiw",
                    "Switching to RelativeLayout worked when adding items to Recycler that initially had some items.",
                    "But it did not work, when Recycler started out empty.",
                    "Adapter's ItemCount and OnBind was getting called correctly ; but the screen area was not getting redrawn.",
                    "What finally worked for me, was to override OnLayout and force the RecyclerView to View.Layout.",
                    "-LSB- Note: invoking View.Layout on the RelativeLayout was insufficient, it did not trickle down to the Recycler -RSB-.",
                    "there are two ways i found working well for me.",
                    "To make recycle view height behave as",
                    "Putting recycler view inside in the Nested Scroll view to acheive wrap content functionality",
                    "Putting recycler view inside in the relative layout works well, to achieve same wrap content effect.",
                    "thanks a lot \uff0c it works for me.",
                    "it works fine but any way to store list more efficient ?",
                    "It didn't work with androidx's recycler view, any help please ??",
                    "but in this case, some performance issue will arise",
                    "from your code if you are setting it to wrap the content",
                    "I'm having the same issue with recyclerView.",
                    "It seems that even on setting the height of of recyclerView as `` wrap content'', it achieves the max height as that of the layout.",
                    "I tried all the solutions above like putting the recyclerView in a different layout and setting the layout's height as wrap content.",
                    "I even tried adding a FrameLayout to the parent layout and embedding a new fragment inside it with recyclerView.",
                    "Nothing seems to work for me: (",
                    "Here's a screenshot how it looks:",
                    "Someone please help me out.",
                    "I'm trying to find a solution to this for too long and couldn't find anywhere.",
                    ""
                ],
                "title": "RecyclerView HEIGHT = WRAP_CONTENT not working ( hasFixedSize = true, setNestedScrollingEnabled = false ) \u00b7 Issue # 53 \u00b7 thoughtbot/expandable-recycler-view \u00b7 GitHub"
            }           
        ],
        "qa": [                        
            {
                "uid": "36275986",
                "link": "https://stackoverflow.com/questions/36275986",
                "title": "Android : Implementation of two way Endless Viewpager",
                "answers": [
                    {
                        "uid": 36385091,
                        "score": 10,
                        "text": [
                            "Try to check below FragmentPagerAdapter to get endless viewpager adapter:",
                            "I found solution LINK.",
                            "I hope its helps you."
                        ]
                    },
                    {
                        "uid": 57776672,
                        "score": 1,
                        "text": [
                            "The proposed solutions are correct but to achieve the result you need to set the initial value of your viewpager to Integer.MAX _ VALUE/2.",
                            "Anyway, I don't really like this solution, setting getCount to return Integer.MAX _ VALUE can have huge impact on application performance.",
                            "I figured out a solution in order to avoid this problem using the:",
                            "onPageScrollStateChanged Listener",
                            "I simply reorder the fragment list, update the viewPager and move to the new page without animation, the result is an endless loop in both directions:",
                            "This is what happens here: in this example, we have 4 fragments A-B-C-D if the user is on fragment A -LRB- first -RRB-, the new List will become: D-A-B-C -LSB- remove the last and push as first -RSB- I update the ViewPager and move -LRB- without animation -RRB- again to fragment A so index 1.",
                            "Now the user can continue to scroll left and will find fragment D.",
                            "Same thing with the last fragment: starting again with A-B-C-D if the user is on fragment D -LRB- last -RRB-, the new List will become: B-C-D-A -LSB- remove the first and push as last -RSB- I update the ViewPager and move -LRB- without animation -RRB- again to fragment D so index mainFragmentList.size -LRB- -RRB- -2.",
                            "Now the user can continue to scroll right and will find fragment A.",
                            "Remember to implement FragmentStatePagerAdapter NOT FragmentPagerAdapter"
                        ]
                    },
                    {
                        "uid": 60693748,
                        "score": 3,
                        "text": [
                            "I have made my own solution.",
                            "I created a ViewPager that supports infinite looping effect, smart auto-scroll, compatible with any indicators and easy to use.",
                            "It especially uses it as banners of application with a simple item page.",
                            "My custom ViewPager can:",
                            "Github link: LINK",
                            "LINK",
                            "Hope it helps !"
                        ]
                    },
                    {
                        "uid": 66631104,
                        "score": 1,
                        "text": [
                            "One simple way to achieve this for ViewPager2 is with 3 basic ideas:",
                            "Some sample code to do this is as follows:",
                            "1.",
                            "Caveat: this code does not reconcile any TabLayout or an empty data model collection."
                        ]
                    }
                ],
                "tags": [
                    "android",
                    "android-viewpager",
                    "adapter",
                    "infinite-loop",
                    "two-way"
                ]
            }
        ],
        "other": [
            {
                "link": "https://medium.com/@ali.muzaffar/looping-infinite-viewpager-with-page-indicator-in-android-ce741f25702a",
                "type": "misc",
                "content": [
                    "Ali Muzaffar3 .7 K FollowersAboutFollowSign inGet started",
                    "Looping/infinite ViewPager with page indicator in Android",
                    "Recently, I had to implement a looping ViewPager in Android using Fragments.",
                    "This proved to be a confusing and difficult task because in my head, the only way to do this was to use the ViewPagerIndicator library by Jake Wharton.",
                    "Turns out, this narrow thinking was my biggest problem.Ali MuzaffarFeb 5, 2016 \u00b7 7 min read",
                    "Ali MuzaffarFeb 5, 2016 \u00b7 7 min read",
                    "you made it to the end !",
                    "We should hang out !",
                    "feel free to follow me on Medium, LinkedIn, Google + or Twitter.",
                    "Ali MuzaffarA software engineer, an Android, and a ray of hope for your darkest code.",
                    "A software engineer, an Android, and a ray of hope for your darkest code.",
                    ""
                ],
                "title": "Looping/infinite ViewPager with page indicator in Android | by Ali Muzaffar | Medium"
            },
            {
                "link": "https://www.raywenderlich.com/324-viewpager-tutorial-getting-started-in-kotlin",
                "type": "misc",
                "content": [
                    "Browse the entire Android & Kotlin library",
                    "ViewPager Tutorial: Getting Started in Kotlin",
                    "Connecting the PagerAdapter and the ViewPager",
                    "Where to Go From Here ?",
                    "ViewPager Tutorial: Getting Started in Kotlin In this ViewPager tutorial for Android, you'll learn how to use a ViewPager to navigate between content pages in Kotlin.",
                    "Nov 1 2017 \u00b7 Article ( 20 mins ) \u00b7 Beginner",
                    "In this tutorial, you'll become familiar with the ViewPager by modifying an existing app to make the UI more enjoyable.",
                    "Along the way, you'll also learn:",
                    "How the ViewPager works How to keep it memory-efficient How to add some nice features to your ViewPager",
                    "Note: This tutorial assumes you have previous experience with developing for Android in Kotlin.",
                    "If you are unfamiliar with the language have a look at this tutorial.",
                    "If you're beginning with Android, check out some of our Getting Started and other Android tutorials.",
                    "Getting Started Download the starter project and open it by starting Android Studio and selecting Open an existing Android Studio project:",
                    "Navigate to the sample project directory and click Open.",
                    "Take a look at the existing code before going on with the tutorial.",
                    "Inside the assets directory, there is a JSON file containing some information about the top 5 most popular Android related movies ever made.",
                    ":] You can find the helper methods used to read the JSON data inside MovieHelper.kt.",
                    "The Picasso library helps to easily download and display the images on the screen.",
                    "If you are not familiar with fragments have a look at this tutorial.",
                    "Build and Run the project.",
                    "The app consists of a few pages, each displaying some information about a movie.",
                    "I bet the first thing you tried to do was swipe left to check out next movie !",
                    "Or was it just me ?",
                    "For now, you can not-so-gracefully navigate between pages using the Previous and Next buttons at the bottom of the screen.",
                    "Introducing the ViewPager Adding a ViewPager to the UI will allow the users to move forward or backward through the movies by swiping across the screen.",
                    "You don't have to deal with the slide animation and the swipe gesture detection, so the implementation is easier than you might think.",
                    "You'll divide the ViewPager implementation into three parts:",
                    "Creating an Adapter for the ViewPager",
                    "Wiring up the ViewPager and the Adapter",
                    "Preparing the ViewPager For step one, open MainActivity.kt and remove everything inside onCreate ( ), below this line:",
                    "Remove the replaceFragment ( ) method from the bottom of the class as well.",
                    "Now open activity_main.xml and replace everything inside the RelativeLayout with the following:",
                    "Here you created the ViewPager view, which is now the only child of the RelativeLayout.",
                    "Here's how the xml file should look:",
                    "ViewPager is only available through the Android Support Library.",
                    "The Android Support Library is actually a set of libraries that provide backward compatible implementations of widgets and other standard Android functionality.",
                    "These libraries provide a common API that often allow the use of newer Android SDK features on devices that only support lower API levels.",
                    "You should familiarize yourself with the Support Library and Support Library Packages.",
                    "Go back to MainActivity.kt and first import the ViewPager to be able to use it with this line:",
                    "Now you can add the following line at the top of the class to declare the ViewPager:",
                    "Note: Use the keyword lateinit to avoid making the view nullable if you want to initialize it later.",
                    "Read more about lateinit and other Kotlin modifiers here.",
                    "Add this line at the bottom of the onCreate ( ) method to link your ViewPager reference to the xml view you created previously:",
                    "Implementing the PagerAdapter Step one completed !",
                    "You now have a ViewPager that doesn't do anything particularly interesting without an Adapter that tells it what to display.",
                    "If you run the app now you won't be able to see any movies:",
                    "The ViewPager usually displays the `` pages'' using fragment instances, but it can also work with simple views such as ImageView if you want to display static content.",
                    "In this project, you will display multiple things on each page.",
                    "Fragments are here to help you.",
                    "You will connect your Fragment instances with the ViewPager using a PagerAdapter, which is an object that sits between the ViewPager and the data set containing the information you want the ViewPager to display ( in this case the movies array ).",
                    "The PagerAdapter will create each Fragment, add the corresponding movie data to it and return it to the ViewPager.",
                    "PagerAdapter is an abstract class, so you will have an instance of one of its subclasses ( FragmentPagerAdapter and FragmentStatePagerAdapter ) rather than an instance of the PagerAdapter itself.",
                    "There are two types of standard PagerAdapters that manage the lifecycle of each fragment: FragmentPagerAdapter and FragmentStatePagerAdapter.",
                    "Both of them work well with fragments, but they are better suited for different scenarios:",
                    "The FragmentPagerAdapter stores the fragments in memory as long as the user can navigate between them.",
                    "When a fragment is not visible, the PagerAdapter will detach it, but not destroy it, so the fragment instance remains alive in the FragmentManager.",
                    "It will release it from memory only when the Activity shuts down.",
                    "This can make the transition between pages fast and smooth, but it could cause memory issues in your app if you need many fragments.",
                    "The FragmentStatePagerAdapter makes sure to destroy all the fragments the user does not see and only keep their saved states in the FragmentManager, hence the name.",
                    "When the user navigates back to a fragment, it will restore it using the saved state.",
                    "This PagerAdapter requires much less memory, but the process of switching between pages can be slower.",
                    "Your list of movies has only five items, so the FragmentPagerAdapter might work after all.",
                    "But what if you get bored after this tutorial and watch all Harry Potter movies ?",
                    "You'll have to add 8 more items to the JSON file.",
                    "What if you then decide to add your favorite TV series as well ?",
                    "That array can become pretty large.",
                    "In this case, the FragmentStatePagerAdapter works better.",
                    "Creating a Custom FragmentStatePagerAdapter In the project navigator pane, right-click on com.raywenderlich.favoritemovies and select New - > Kotlin File/Class.",
                    "Name it MoviesPagerAdapter and select Class for Kind.",
                    "Replace the contents of this file with the following:",
                    "Let's go over this step-by-step.",
                    "Your new class extends FragmentStatePagerAdapter.",
                    "The constructor of the superclass requires a FragmentManager, thus your custom PagerAdapter needs it as well.",
                    "You also need to provide the list of movies as a parameter.",
                    "Return the fragment associated with the object located at the specified position.",
                    "Return the number of objects in the array.",
                    "When the ViewPager needs to display a fragment, it initiates a chat with the PagerAdapter.",
                    "First, the ViewPager asks the PagerAdapter how many movies are in the array by calling getCount ( ).",
                    "Then it will call getItem ( int position ) whenever a new page is about to be visible.",
                    "Within this method, the PagerAdapter creates a new fragment that displays the information about the movie at the correct position in the array.",
                    "Connecting the PagerAdapter and the ViewPager Open MainActivity.kt and add the following line at the top to declare your MoviesPagerAdapter:",
                    "Next add the following inside onCreate ( ), beneath the existing code:",
                    "This initializes your MoviesPagerAdapter and connects it to the ViewPager.",
                    "Note: supportFragmentManager is equivalent to the getSupportFragmentManager ( ) method you would use in Java and viewPager.adapter = pagerAdapter is the same as viewPager.setAdapter ( pagerAdapter ).",
                    "Read more about getters and setters in Kotlin here.",
                    "The app should behave like the original version, but you can now navigate between movies by swiping rather than pressing buttons :].",
                    "Note: Using the FragmentStatePagerAdapter saves you from having to deal with saving the current page across a runtime configuration change, like rotating the device.",
                    "The state of the Activity is usually lost in those situations and you would have to save it in the Bundle object passed as a parameter in onCreate ( savedInstanceState: Bundle ? )",
                    "Luckily, the PagerAdapter you used does all the work for you.",
                    "You can read more about the savedInstanceState object and the Activity lifecycle here.",
                    "Endless Scrolling A nice feature you often see is being able to swipe continuously between pages in a circular manner.",
                    "That is going to the last page when swiping right on the first one and going to the first one when swiping left on the last.",
                    "For example, swiping between 3 pages would look like this: Page1 - > Page2 - > Page3 - > Page1 - > Page2 Page2",
                    "The FragmentStatePagerAdapter will stop creating new fragments when the current index reaches the number of objects returned by getCount ( ), so you need to change the method to return a fairly large number that the users are not very likely to reach by continuously swiping in the same direction.",
                    "That way the PagerAdapter will keep creating pages until the page index reaches the value returned by getCount ( ).",
                    "Open MoviesPagerAdapter.kt and create a new constant representing the large number by adding this line at the top of the file above the class definition:",
                    "Now replace the return movies.size line inside getCount ( ) with this:",
                    "By multiplying the length of the array with MAX_VALUE, the swipe limit will grow proportionally to the number of movies in your list.",
                    "This way you don't have to worry about getCount ( ) returning a number that is less than the number of movies as your movie list grows.",
                    "The only problem you now have is inside the Adapter's getItem ( position: Int ) method.",
                    "Since getCount ( ) now returns a number larger than the size of the list, the ViewPager will try to access the movie at an index greater than the array size when the user swipes past the last movie.",
                    "Replace the code inside getItem ( position: Int ) with this line:",
                    "This will ensure that the ViewPager doesn't request the element at an index larger than movies.size because the remainder after you divide the position by movies.size will always be greater than or equal to 0 and less than movies.size.",
                    "Right now the infinite scrolling works only when the user navigates forward through the array ( swipes left ).",
                    "That is because, when your app starts, the ViewPager displays the movie at index 0.",
                    "To fix this issue, open MainActivity.kt and add the following line inside onCreate ( ) below the line where you connect the PageAdapter to the ViewPager:",
                    "This tells the ViewPager to display the movie found in the middle of the array.",
                    "The user has now plenty of swiping to do in either direction before they reach an end.",
                    "To ensure that the movie displayed at the beginning will still be the first one in your list, set MAX_VALUE to be an even number ( in this case 200 works fine ).",
                    "This way, after you divide pagerAdapter.count by 2, pagerAdapter.count % movies.size = 0 ( which is the first index that the ViewPager asks for when the app starts ).",
                    "You should now be able to swipe left and right a decent amount of times and the movies will start again from the beginning after you reach the last one and from the end when you reach the first one.",
                    "Adding Tabs A TabLayout is a nice feature that makes it easy to explore and switch between pages.",
                    "The TabLayout contains a tab for each page, which usually displays the page title.",
                    "The user can tap on a tab to navigate directly to the desired page or can use a swipe gesture over the TabLayout to switch between pages.",
                    "If you try to add a TabLayout to your ViewPager you won't be able to see any tabs because the layout will be automatically populated with as many tabs as the FragmentStatePagerAdapter tells it by calling the getCount ( ) method, which now returns a pretty large number.",
                    "Trying to fit that many tabs on your screen will make them really narrow.",
                    "Luckily, there is a third party library called RecyclerTabLayout that solves this problem.",
                    "The library uses the RecyclerView in its implementation.",
                    "You can learn more about the mysterious RecyclerView from this tutorial.",
                    "To install the library, open up build.grade ( Module: app ) and add the following line inside dependencies:",
                    "The recyclertablayout library uses an old version of the Android Support Libraries, so you'll need to add the following to make the Gradle sync happy:",
                    "Tap Sync Now on the yellow pop-up and wait until Android Studio installs the library.",
                    "Open activity_main.xml and paste the following snippet above the ViewPager:",
                    "Now add the following property to your ViewPager to align it below the RecyclerTabLayout:",
                    "Your whole layout file should now look like this:",
                    "Open MainActivity.kt and import RecyclerTabLayout at the top of the file, like this:",
                    "Now add the following at the top of the class to declare a RecyclerTabLayout instance:",
                    "Add this block of code inside onCreate ( ), above the line where you set viewPager.currentItem:",
                    "The first line connects your RecyclerTabLayout instance to the xml view and the second one links the RecyclerTabLayout to your ViewPager.",
                    "The last thing you have to do is let the RecyclerTabLayout know what titles to display on the Tabs.",
                    "Open MoviesPagerAdapter.kt and add the following method inside the class:",
                    "This method tells the TabLayout what to write on the tab placed at a particular position.",
                    "It returns the title of the movie that corresponds with the fragment created inside getItem ( position: Int ).",
                    "You should be able to see the tabs changing as you swipe through the pages.",
                    "Try tapping on a tab and see how the ViewPager will scroll automatically to the corresponding movie :].",
                    "You can download the final project for this tutorial here.",
                    "You've modified an app and gave it a nicer UI with the help of ViewPager.",
                    "You've also added a pretty cool TabLayout and implemented the endless scroll.",
                    "In addition, you learned about the PagerAdapter and had to choose which of the FragmentPagerAdapter and FragmentStatePagerAdapter is best for you application.",
                    "If you want to read more about the ViewPager have a look at the documentation.",
                    "You can try and customize the transition animation with the help of PageTransformer.",
                    "Check out this tutorial for that.",
                    "Bonus challenge: You can implement dot indicators for your pages as seen in many onboarding flows.",
                    "Here you can find a nice way of creating dot indicators.",
                    "Note that this solution won't work with your final ViewPager from this tutorial as it needs PagerAdapter ` s getCount ( ) method to return the exact number of pages.",
                    "You can try implementing the indicators instead of the endless scroll.",
                    "This time try using the default TabLayout instead of the third party library.",
                    "You can download the solution here.",
                    "Feel free to join the forum discussion below if you have any comments or questions !",
                    "User Interface Android & Kotlin Tutorials",
                    "raywenderlich.com Weekly The raywenderlich.com newsletter is the easiest way to stay up-to-date on everything you need to know as a mobile developer.",
                    "Get a weekly digest of our tutorials and courses, and receive a free in-depth email course as a bonus !",
                    "Add a rating for this content",
                    "Sign in to add a rating",
                    "The mobile development world moves quickly -- and you don't want to get left behind.",
                    "Learn iOS, Swift, Android, Kotlin, Dart, Flutter and more with the largest and highest-quality catalog of video courses and books on the internet.",
                    "Mark Complete ( All Chapters ) Clear Progress ( All Chapters )",
                    "New Dart Basics Flutter Getting Started Jun 15 2021 \u00b7 Article ( 35 mins )",
                    "Get an introduction to the basics of the Dart programming language, used for development with the Flutter SDK for mobile, web and beyond.",
                    "Jun 15 2021 \u00b7 Article ( 35 mins )",
                    "New Opportunity: Full-Time Android Video Instructor at Razeware Android & Kotlin Announcements Jun 15 2021 \u00b7 Article ( 5 mins )",
                    "Razeware is currently hiring a full-time video instructor to create top-of-the line Android video courses at raywenderlich.com.",
                    "Jun 15 2021 \u00b7 Article ( 5 mins )",
                    "New Drag and Drop Tutorial for SwiftUI iOS & Swift User Interface Jun 14 2021 \u00b7 Article ( 35 mins )",
                    "Learn how to use the drag and drop API in SwiftUI by building your own simple iPadOS and iOS bug reporting app.",
                    "Jun 14 2021 \u00b7 Article ( 35 mins )",
                    "New Unity Tutorial: How to Make a Game Like Space Invaders Unity How-tos Jun 9 2021 \u00b7 Article ( 40 mins )",
                    "In this Unity tutorial, you'll learn how to make a classic 2D space shooting game similar to Space Invaders.",
                    "Jun 9 2021 \u00b7 Article ( 40 mins )",
                    "Diana Pislaru Computer Science student at The University of Manchester Author",
                    "Jason Donmoyer threddies co-founder ; Android dev ; BJCP beer judge/geek ; All around sound, light, electronics & chemistry tinkerer.",
                    "I blog ... Tech Editor",
                    "Odie Edo-Osagie Odie recently completed an undergraduate degree in Software Engineering and is a postgrad student at the University of East ... Fpe",
                    "Joe Howard Joe's path to software development began in the fields of computational physics and systems engineering.",
                    "He started as a web ... Team Lead",
                    "In this ViewPager tutorial for Android, you'll learn how to use a ViewPager to navigate between content pages in Kotlin.",
                    ""
                ],
                "title": "ViewPager Tutorial: Getting Started in Kotlin | raywenderlich.com"
            }
        ]
    },
    "parsed": true
}