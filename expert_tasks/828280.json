{
    "task": "Is there an accepted best-practice on making asynchronous HTTP requests in Android?",
    "description": "I've seen any number of examples and they all seem to solve this problem differently.\nBasically I just want the simplest way to make the request that won't lock the main thread and is cancelable.\nIt also doesn't help that we have ( at least ) 2 HTTP libraries to choose from, java.net.\n* ( such as HttpURLConnection ) and org.apache.http.\nIs there any consensus on what the best practice is ?",
    "type": "SO",
    "link": "https://stackoverflow.com/questions/828280",
    "question_id": "828280",
    "resources": {
        "api": [
            {
                "link": "https://developer.android.com/training/volley/request",
                "type": "android",
                "content": [
                    "This lesson describes how to use the common request types that Volley supports:",
                    "If your expected response is one of these types, you probably don't have to implement a custom request.",
                    "This lesson describes how to use these standard request types.",
                    "For information on how to implement your own custom request, see Implementing a Custom Request.",
                    "Volley provides the following classes for JSON requests:",
                    "Both classes are based on the common base class JsonRequest.",
                    "You use them following the same basic pattern you use for other types of requests.",
                    "For example, this snippet fetches a JSON feed and displays it as text in the UI:",
                    "Specify a URL and receive a raw string in response.",
                    "See Setting Up a Request Queue for an example.",
                    "JsonObjectRequest and JsonArrayRequest ( both subclasses of JsonRequest ).",
                    "Specify a URL and get a JSON object or array ( respectively ) in response.",
                    "JsonArrayRequest -- A request for retrieving a JSONArray response body at a given URL.",
                    "JsonObjectRequest -- A request for retrieving a JSONObject response body at a given URL, allowing for an optional JSONObject to be passed in as part of the request body.",
                    ""
                ],
                "title": "Make a standard request \u00a0|\u00a0 Android Developers"
            }
        ],
        "git": [
            {
                "link": "https://github.com/square/okhttp/issues/3714",
                "content": [
                    "-LSB- Feature Request -RSB- Non-Blocking Async Interceptors for Async calls \u00b7 Issue # 3714 \u00b7 square/okhttp \u00b7 GitHub",
                    "-LSB- Feature Request -RSB- Non-Blocking Async Interceptors for Async calls",
                    "In current interceptor model, it's impossible to run time consuming async operations without blocking the that interceptor's thread.",
                    "We can still do some parallel operations by awaiting the thread, for example:",
                    "Dispatcher in OkHttpClient allows us the create new thread as much as the count of Integer.MAX _ VALUE for AsyncCall's.",
                    "So we don't get starve about threads.",
                    "But I don't sure about the solution above is good for performance or best practice.",
                    "Having non-blocking interceptors looks like more suitable for async calls.",
                    "I mean, interceptors may be implemented like Callbacks.",
                    "In this way, we can proceed interceptor chain whenever we want, without the blocking interceptors thread.",
                    "In order to achieve this, we can create AsyncInterceptor interface like Interceptor interface.",
                    "For instance, that interface and OkHttpClient implementation may be like this:",
                    "In that case, interceptor chain should be look like this:",
                    "Same Example above with non-blocking interceptor",
                    "I implement basic POC version here: tolpp@3f3da9f",
                    "This is not production ready, only for poc and show my purpose.",
                    "Is anyone else faced with same problem ?",
                    "I can't find too much actually.",
                    "Some of that I find:",
                    "This is the close one:",
                    "The text was updated successfully, but these errors were encountered:",
                    "I think the complexity here is very high, and I don't think the async use cases are very common.",
                    "A worse-but-simpler solution is to just fail the request ( throw an IOException ? )",
                    "and do the expensive work before retrying the HTTP call.",
                    "We do want async in OkHttp, but without any API changes.",
                    "We get there with coroutines ; either by using some Kotlin or waiting for Java to ship them.",
                    "@tolpp I hit this also for oauth2 refresh tokens https://github.com/yschimke/oksocial/blob/master/src/main/kotlin/com/baulsupp/oksocial/authenticator/ServiceInterceptor.kt#L31-L36",
                    "IIRC the answer from @swankjesse was that if you make a sync call in an interceptor, then you are tying up a thread, but won't deadlock because it doesn't need to grab another thread and doesn't hold a lock during that time.",
                    "I don't think we're going to proceed with this.",
                    "I think this kind of problem is better solved at the application layer, or via something transformative like coroutines.",
                    "hopefully this will be on the wishlist for 4.0 # 2903",
                    "I try to use Kotlin coroutines and java.nio.SocketChannel solve this problem and prevent current interceptor API, but failed.",
                    "like this question in StackOverFlow.",
                    "If any progress about similar transformative occur, please remind me.",
                    "I think this kind of problem is better solved at the application layer",
                    "It's certainly solvable because we can attach headers asynchronously before delivering the initial request to OkHttpClient, but it's certainly not better solved.",
                    "As coroutines users, we leverage actor coroutines to own and store state - this is how we achieve simple thread safety.",
                    "This becomes a problem for us when APIs ( like an OkHttpInterceptor ) requests synchronous access to data.",
                    "This also leads to developers being lazy and leveraging runBlocking to access the async actor data, simply because of the OkHttpInterceptor API.",
                    "This leads to deadlocks in some rare edge cases.",
                    "In the builder of our SDK, we provide ( ) - > SomeData ( sync ) and suspend ( ) - > SomeData ( async ) overloads.",
                    "If a client injects the sync overload, it gets internally wrapped by an async overload and our SDK only uses the async overload.",
                    "That said, this is trivial to do because of coroutines ( which OkHttp3 does not leverage ).",
                    "@swankjesse Maybe this is possible for something like OkHttp4 or OkHttp5 ?",
                    ""
                ],
                "title": "-LSB- Feature Request -RSB- Non-Blocking Async Interceptors for Async calls \u00b7 Issue # 3714 \u00b7 square/okhttp \u00b7 GitHub"
            }
        ],
        "qa": [           
            {
                "uid": "28504524",
                "link": "https://stackoverflow.com/questions/28504524",
                "title": "Android: best practice to perform asynchronous operations in getView()",
                "answers": [
                    {
                        "uid": 28534832,
                        "score": 5,
                        "text": [
                            "This is absolutely not a good way to go about updating information in a ListView.",
                            "The getView method should simply create the view from data that you already have.",
                            "It certainly shouldn't be running anything to get more information.",
                            "The best advice that I could give you is to fetch the data beforehand.",
                            "Pull the data, update the ArrayList that your Adapter is connected to, then call adapter.notifyDataSetChanged -LRB- -RRB-.",
                            "This will redraw all of your information.",
                            "Pull the data all at once - not in small parts.",
                            "This is the best and most reasonable way to do this."
                        ]
                    },
                    {
                        "uid": 28535944,
                        "score": 2,
                        "text": [
                            "There are several appraoches for this.",
                            "Although what you are doing is really not appropriate.",
                            "LINK",
                            "LINK",
                            "LINK and Threads",
                            "In conclusion, the major drawbacks of your current approach: - is loss of context when the changes need to be made.",
                            "- the explicit creation of multiple threads",
                            "While the latter is a major issue, the more `` user-noticeable'' problem would the first.",
                            "There are and could be several other approaches based on the control you require and the your expertise with android callbacks and thread management.But these three are -LRB- according to me -RRB- most suitable.",
                            "PS: the common point in all these approaches is,",
                            "PPS: You could also look into LINK to again automate your requirements."
                        ]
                    },
                    {
                        "uid": 28623048,
                        "score": 1,
                        "text": [
                            "You can use something like this:",
                            "Also, for even better performance you need to add interaction awareness to your ListView adapter so that it doesn't trigger any asynchronous operation per row after, say, a fling gesture on the ListView -- which means that the scrolling is so fast that it doesn't make sense to even start any asynchronous operation.",
                            "Once scrolling stops, or is about to stop, is when you want to start actually showing the heavy content for each row.",
                            "A very good example can be found here: LINK"
                        ]
                    },
                    {
                        "uid": 28647992,
                        "score": 1,
                        "text": [
                            "Volley library seems to have abstracted out some of the common patters for use ...",
                            "For finer control over network requests and caching, you could have a look at: LINK",
                            "Like in the architechture diagram, on making a request, it looks up cache, and in case of misses tries the network request and adds it to cache for later use, Moreover it seems you can provide custom back off-retry request suiting your needs and handle/invalidate cache as and when required.",
                            "For in-depth reference you could take a look at - LINK"
                        ]
                    },
                    {
                        "uid": 28648528,
                        "score": 1,
                        "text": [
                            "IMHO, the best practice would be not to perform asynchronous operations in getView -LRB- -RRB-.",
                            "Your Adapter class is only supposed to transform Objects into Views and you should keep it as straightforward as possible.",
                            "You can run into trouble if you start an asynchronous task -LRB- or a Thread -RRB- which references newly created View if the task finishes after the view is not on screen anymore or if it was recycled by the adapter as a result of scrolling.",
                            "You should consider performing asynchronous operations outside of the adapter.",
                            "Start an operation and update the list after it is done.",
                            "You can update the whole list or some elements when the asynchronous operation is finished.",
                            "Operations themselves can be done in AsyncTask of your activity or in a dedicated Service.",
                            "Avoid creating new Threads because creating threads is expensive and if for some reason you call it too often, you can run out of memory.",
                            "AsyncTasks use a Thread pool and therefore you will not have this problem."
                        ]
                    },
                    {
                        "uid": 28656143,
                        "score": 1,
                        "text": [
                            "So, taking a step back and looking at this completely abstractly, it seems the question you are asking is along the lines of how to manage some potentially long-running action -LRB- network or otherwise -RRB- that will affect the appearance of a list view item.",
                            "Given that assumption, you face two main problems:",
                            "Issue 1 can be addressed by using a ThreadPoolExecutor -LRB- or whatever other mechanisim you feel like -RRB-.",
                            "The idea being that the threads are recycled as well, so they don't take so much time to spin up.",
                            "Issue 2 is a little more complicated.",
                            "You can cancel the thread operation when the view is about to be recycled -LRB- there are a few ways of doing this -RRB- but you need to decide if losing the effort is acceptable -LRB- the user may scroll your view back on the screen and you have to start again -RRB-.",
                            "You could store the result of your long-running task against the list item -LRB- or some data holder associated with the list item -RRB- but you need to be wary of running out of memory -LRB- least recently used caching or lru caches can sometimes be useful here -RRB-.",
                            "This would allow you to keep your effort and only update your list view if it is still on-screen.",
                            "A flag in your item data could be used to indicate you already have the data and not load it again.",
                            "Sorry, I don't have enough time to go into more detail at the moment.",
                            "It's bedtime for me: - -RRB-",
                            "Good luck.",
                            "I'll write some more if I have time.",
                            "Kind regards, CJ"
                        ]
                    },
                    {
                        "uid": 28665708,
                        "score": 4,
                        "text": [
                            "EDIT",
                            "I think this is an interesting question, worth some kind of `` canonical'' solution",
                            "LINK :P I suggest you to watch this Google I/O from 2013.",
                            "They have clealy explained a lot of these stuff there.",
                            "All of your questions will be answered there.",
                            "It's canon.",
                            "I have used Volley library here.",
                            "If you read the docs then you'll see that Volley runs on background threads.",
                            "So no need to implement your async tasks.",
                            "Since others have already covered the issues in using Threads I will not talk about those.",
                            "Let me go into code directly: -RRB-",
                            "The following has served me well whenever my listviews or gridviews or any other views depend on information from the web:",
                            "Create an interface: WebInfoUpdateReceiver.java",
                            "Create a class to download stuff: Downloader.java",
                            "Now make your activity implement the interface:"
                        ]
                    }
                ],
                "tags": [
                    "android",
                    "multithreading",
                    "asynchronous",
                    "concurrency"
                ]
            }
        ],
        "other": [
            {
                "link": "https://medium.com/@JasonCromer/android-asynctask-http-request-tutorial-6b429d833e28",
                "type": "misc",
                "content": [
                    "Android AsyncTask HTTP GET request TutorialJason CromerOct 27, 2015 \u00b7 7 min readQuickly and efficiently implement an asynchronous HTTP GET requestNOTE: This method is now inferior to the new Architecture Components pattern and should be considered deprecated.Our Expectations and GoalsIf we have an application that requires the use of a standard HTTP request, we better do it right.",
                    "Due to the specifics of Android threading, we can not run network tasks on the same thread as the UI thread.",
                    "Aside from the compiler not letting you within recent updates, using the UI thread to complete a request has deadly consequences.For example: Lets say we implement a GET request on our UI thread, and our API ( for some reason ) can not process it.",
                    "If we do not have catches for timeout exceptions or other exceptions that might have been raised, our thread is now blocked.Why on earth would you want to risk blocking your UI thread, if, lets say, we are doing database maintenance or adjustments that cause it to go down.",
                    "Blocking the UI thread would mean the application would freeze and become unresponsive.",
                    "Android handles this by a pop-up window asking the user to `` wait'' until the app responds, or `` close'' the application due to it being unresponsive.",
                    "Sounds like that app is getting an instant un-install to me.So, with that explained, lets outline what we want from our HTTP request.",
                    "First off, do we want to retrieve, add, update, or delete data from our database ?",
                    "These operations are commonly known as CRUD ( Create, Read, Update, Delete ) and allow us to manipulate the data stored in our database in those manners.",
                    "In conjunction with a REST-ful API, we have our POST, GET, PUT, and DELETE requests.",
                    "If we want to retrieve, for example, the number of users in our application, we would perform a GET request.",
                    "If we want to add a new user, we would use a POST request.",
                    "Updating a user could be done with either a PUT or POST request.",
                    "Deleting a user would be done with a DELETE request.",
                    "Using these methods appropriately with our REST-ful API will allow us to maintain a properly organized system of requests.I just thought I'd note: There are some semantics behind using the phrase `` CRUD'' and `` REST'' in the same phrase, since in a REST-ful API, you actually Create and Update when you perform a POST request, but that should be little to no concern for this tutorial.To summarize, what do we want?We want a method that is performed asynchronously with our UI thread, that cleanly performs a GET, POST, PUT or DELETE request, and handles any exceptions.",
                    "So lets get started.Step 1: Using the AsyncTask for AndroidTo start, whether you're in Android Studio or Eclipse, create a new class.",
                    "Since we're going to be doing a GET request in this tutorial, lets call it HttpGetRequest.",
                    "After that, extend the class AsyncTask.",
                    "There are a few parameters that you have to pass in that correlate to AsyncTask's methods.",
                    "The ones we'll be using are doInBackground ( ) and onPostExecute, and the type we want to return is String.",
                    "This is merely a preference for this tutorial, so you can return any primitive data type or object if you pleased.Passing the String parameters into our extended class should look like so: Now, you'll be bothered because you need to implement AsyncTask's override methods.",
                    "If you have the options to left click and `` generate'' its override methods, select `` doInBackground ( )'' and `` onPostExecute''.",
                    "If not, look below at what our class should now look like.After instantiating a new instance of this class in another class or activity, we can access these methods to perform some background task in doInBackground ( ) and retrieve the result in onPostExecute ( ).",
                    "Lets take a look at an example below: With the skeleton of our class now set up, lets start implementing the actual HTTP request part of it.Step 2: Making the GET RequestWe should now understand the basics of how making the request works, as well as how to use it.",
                    "Now lets begin implementing the steps to perform the actual request.As a quick outline, we will be doing the following: Create a connection to our urlSet our method types ( GET, POST, etc ... ) Create an InputStream to read our resultsCatch our exceptionsHere we are setting up some variables to hold our url and result String.",
                    "In the method `` doInBackground ( String ... params )'', params is an array holding the data we passed in.",
                    "So if we have passed in a url of type String, we will naturally set our result variable equal to the 0th index of params.Now we will be connecting to our url.",
                    "The next steps will all be wrapped in this try-catch block as we will need to catch certain exceptions that may occur during the GET request.As you can see we are casting our myUrl.openConnection ( ) to a HttpURLConnection type.",
                    "This should be pretty straightforward.",
                    "Next, we will be setting our request method, read and connection timeouts.",
                    "I will be using a standard 15 second timeout for each ( in milliseconds ) and, of course, our request method will be a GET request.",
                    "For good practice, I'll make these constants as well.Now that we have set our timeouts, request method, and connected ( attempted anyway ), we are going to create a Stringbuilder and InputStreamReader to read our input from the API.",
                    "Doing so involves a few small steps.",
                    "First, we will create an InputStreamReader that reads our request input.",
                    "Next, we will create a BufferedReader that will allow us to iterate through the response.",
                    "We will then iterate through each line of our response and append it to our StringBuilder.",
                    "We will also create a new variable of type String called inputLine by the other two String we created in doInBackground ( ).",
                    "See, that wasn't that bad, now was it ?",
                    "We are just reading our input, parsing through each line, appending it to a StringBuilder, and converting it to our String result afterwards.Now, however, we have to deal with our exceptions.",
                    "In the case of a GET request, we only need to catch IOException.",
                    "The other request methods can have more catching to do if, for example, we decide to create a JSON object to write to.",
                    "That is a discussion for another Medium post though, and won't be covered here.",
                    "So lets implement this IOException and handle it nicely.",
                    "We'll be setting our result to null here, so it is VERY important to check for a null response in the other classes that you are using this with.",
                    "If you want to play it safe and avoid a null pointer exception, you can always return an empty String ( ``'' ).",
                    "Here we caught our IOException, printed the stack trace in order to see more details if/when we have do debug, and set our result to null.",
                    "We won't be doing anything with our onPostExecute method, but if you feel inclined to, this is where you would do any post-processing on your result.",
                    "The full implementation to our HTTP GET request is complete.Step 3: SummarizeWe've gone through and implemented, step by step, the process of creating an asynchronous HTTP GET request in Java, using Android's AsyncTask class.",
                    "This will allow your app to perform requests while the user interacts with your app's UI.If you have any questions or input, go ahead and leave a comment and I'll get back to you as soon as I can.",
                    "I hope this tutorial is of some use to you, and helps you on your way to creating an awesome Android application.",
                    "Android AsyncTask HTTP GET request TutorialJason CromerOct 27, 2015 \u00b7 7 min readQuickly and efficiently implement an asynchronous HTTP GET requestNOTE: This method is now inferior to the new Architecture Components pattern and should be considered deprecated.",
                    "Android AsyncTask HTTP GET request TutorialJason CromerOct 27, 2015 \u00b7 7 min read",
                    "Jason CromerOct 27, 2015 \u00b7 7 min read",
                    "Our Expectations and GoalsIf we have an application that requires the use of a standard HTTP request, we better do it right.",
                    "Jason CromerSoftware Engineer at Postmates.",
                    "I write about Android-related things, as well as personal/professional health and success.Follow886 15",
                    "I write about Android-related things, as well as personal/professional health and success.Follow",
                    "I write about Android-related things, as well as personal/professional health and success.",
                    ""
                ],
                "title": "Android AsyncTask HTTP GET request Tutorial | by Jason Cromer | Medium"
            },
            {
                "link": "https://www.twilio.com/blog/5-ways-to-make-http-requests-in-java",
                "type": "misc",
                "content": [
                    "Level up your Twilio API skills in TwilioQuest, an educational game for Mac, Windows, and Linux.",
                    "Voice & Video Programmable Voice Programmable Video Elastic SIP Trunking TaskRouter Network Traversal",
                    "Messaging Programmable SMS Programmable Chat Notify",
                    "Lookup Phone Numbers Programmable Wireless Sync",
                    "Access Security Call & Text Marketing Collaboration Commerce Communications Contact Center",
                    "Customer Stories Partner Showcase Why Twilio ?",
                    "API & Docs Blog Help Jobs at Twilio",
                    "Build the future of communications.",
                    "Start today with Twilio's APIs and services.",
                    "Please enter a valid email address.",
                    "Tutorials Sample applications that cover common use cases in a variety of languages.",
                    "Download, test drive, and tweak them yourself.",
                    "Sample applications that cover common use cases in a variety of languages.",
                    "-LSB- header image credit: Iron in the Butterfly Nebula, NASA Astronomy Picture of the Day July 21 2020 ( modified ) -RSB- Making HTTP requests is a core feature of modern programming, and is often one of the first things you want to do when learning a new programming language.",
                    "For Java programmers there are many ways to do it - core libraries in the JDK and third-party libraries.",
                    "This post will introduce you to the Java HTTP clients that I reach for.",
                    "If you use other ones, that's great !",
                    "Let me know about it.",
                    "In this post I'll cover: Core Java:",
                    "I'll use the Astronomy Picture of the Day API from the NASA APIs for the code samples, and the code is all on GitHub in a project based on Java 11.",
                    "Core Java APIs for making Java http requests Since Java 1.1 there has been an HTTP client in the core libraries provided with the JDK.",
                    "With Java 11 a new client was added.",
                    "One of these might be a good choice if you are sensitive about adding extra dependencies to your project.",
                    "Java 1.1 HttpURLConnection First of all, do we capitalize acronyms in class names or not ?",
                    "Anyway, close your eyes and center yourself in 1997.",
                    "Titanic was rocking the box office and inspiring a thousand memes, Spice Girls had a best-selling album, but the biggest news of the year was surely HttpURLConnection being added to Java 1.1.",
                    "Here's how you would use it to make a GET request to get the APOD data:",
                    "-LSB- full code on GitHub -RSB- This seems quite verbose, and I find the order that we have to do things is confusing ( why do we set headers after opening the URL ? )",
                    "If you need to make more complex requests with POST bodies, or custom timeouts etc then it's all possible but I never found this API intuitive at all.",
                    "When would you use HTTPUrlConnection, then ?",
                    "If you are supporting clients who are using older versions of Java, and you can't add a dependency then this might be for you.",
                    "I suspect that's only a small minority of developers, but you might see it in older codebases - for more modern approaches, read on.",
                    "Java 11 HttpClient More than twenty years after HttpURLConnection we had Black Panther in the cinemas and a new HTTP client added to Java 11: java.net.http.HttpClient.",
                    "This has a much more logical API and can handle HTTP/2, and Websockets.",
                    "It also has the option to make requests synchronously or asynchronously by using the CompletableFuture API.",
                    "99 times out of 100 when I make an HTTP request I want to read the response body into my code.",
                    "Libraries that make this difficult will not spark joy in me.",
                    "HttpClient accepts a BodyHandler which can convert an HTTP response into a class of your choosing.",
                    "There are some built-in handlers: String, byte -LSB- -RSB- for binary data, Stream <String> which splits by lines, and a few others.",
                    "You can also define your own, which might be helpful as there isn't a built-in BodyHandler for parsing JSON.",
                    "I've written one ( here ) based on Jackson following an example from Java Docs.",
                    "It returns a Supplier for the APOD class, so we call.",
                    "get ( ) when we need the result.",
                    "This is a synchronous request:",
                    "For an asynchronous request the client and request are made in the same way, then call.",
                    "-LSB- full code on GitHub -RSB- Third-party Java HTTP client libraries If the built-in clients don't work for you, don't worry !",
                    "There are plenty of libraries you can bring into your project which will do the job.",
                    "Apache HttpClient The Apache Software Foundation's HTTP clients have been around for a long time.",
                    "They're widely-used and are the foundation for a lot of higher-level libraries.",
                    "The history is a little confusing.",
                    "The old Commons HttpClient is no longer being developed, and the new version ( also called HttpClient ), is under the HttpComponents project.",
                    "Version 5.0 was released in early 2020, adding HTTP/2 support.",
                    "The library also supports synchronous and asynchronous requests.",
                    "Overall the API is rather low-level - you are left to implement a lot for yourself.",
                    "The following code calls the NASA API.",
                    "It doesn't look too hard to use but I have skipped a lot of the error handling which you would want in production code and again I had to add Jackson code to parse the JSON response.",
                    "You might also want to configure a logging framework to avoid warnings on stdout ( no big deal, but it does irk me a bit ).",
                    "-LSB- full code on GitHub -RSB- Apache provides several more examples for sync and async requests.",
                    "OkHttp OkHttp is an HTTP client from Square with a lot of helpful built-in features, like automatic handling of GZIP, response caching and retries or fallback to other hosts in case of network errors as well as HTTP/2 and WebSocket support.",
                    "The API is clean although there is no built-in parsing of JSON responses so again I added code to parse the JSON with Jackson:",
                    "-LSB- full code on GitHub -RSB- This is fine, but the real power of OkHttp is clear when you add Retrofit over the top.",
                    "Retrofit Retrofit is another library from Square, built on top of OkHttp.",
                    "Along with all the low-level features of OkHttp it adds a way to build Java classes which abstract the HTTP details and present a nice Java-friendly API.",
                    "First, we need to create an interface which declares the methods we want to call against the APOD API, with annotations defining how those correspond to HTTP requests:",
                    "The return type of CompletableFuture <APOD> makes this an asynchronous client.",
                    "Square provide other adapters or you could write your own.",
                    "Having an interface like this helps with mocking the client for tests, which I appreciate.",
                    "After declaring the interface we ask Retrofit to create an implementation which we can use to make requests against a given base URL.",
                    "It's also helpful for integration testing to be able to switch the base URL.",
                    "To generate the client, the code looks like this:",
                    "-LSB- full code on GitHub -RSB- API Authentication If there are multiple methods in our interface which all need an API key it is possible to configure that by adding an HttpInterceptor to the base OkHttpClient.",
                    "The custom client can be added to the Retrofit.Builder.",
                    "The code needed to create the custom client is:",
                    "-LSB- full code on GitHub -RSB- I like this kind of Java API for all but the simplest cases.",
                    "Building classes to represent remote APIs is a nice abstraction that plays well with dependency injection, and having Retrofit create them for you based on a customizable OkHttp client is great.",
                    "Other HTTP clients for Java Since posting this article on Twitter I have been delighted to see people discussing which HTTP clients they use.",
                    "If none of the above is quite what you want, have a look at these suggestions:",
                    "REST Assured - an HTTP client designed for testing your REST services.",
                    "Offers a fluent interface for making requests and helpful methods for making assertions about responses.",
                    "cvurl - a wrapper for the Java 11 HttpClient which rounds off some of the sharp edges you might encounter making complex requests.",
                    "Feign - Similar to Retrofit, Feign can build classes from annotated interfaces.",
                    "Feign is highly flexible with multiple options for making and reading requests, metrics, retries and more.",
                    "Spring RestTemplate ( synchronous ) and WebClient ( asynchronous ) clients - if you've used Spring for everything else in your project it could be a good idea to stick with that ecosystem.",
                    "Baeldung has an article comparing them.",
                    "MicroProfile Rest Client - another client in the `` build a class from an annotated interface'' mode, this one is interesting because you can reuse the same interface to create a web server too, and be sure that the client and server match.",
                    "If you're building a service and a client for that service then it could be the one for you.",
                    "Summary There are a lot of choices for HTTP clients in Java - for simple cases I would recommend the built-in java.net.http.HttpClient.",
                    "For more complex use-cases or if you want to have your HTTP APIs abstracted as Java classes as part of a larger application look at Retrofit or Feign.",
                    "Happy hacking, I can't wait to see what you build !",
                    "Sign up and start building",
                    "Thanks for rating this post !",
                    "We are always striving to improve our blog quality, and your feedback is valuable to us.",
                    "How could this post serve you better ?",
                    "If applicable fill in the countries where you are using Twilio",
                    "Protected by reCAPTCHA -- Privacy - Terms",
                    "\ud83c\udf89 Thank you for your feedback !",
                    ""
                ],
                "title": "5 ways to make HTTP requests in Java"
            }
        ]
    },
    "parsed": true
}