{
    "task": "Don\u2019t leak MockWebServer ports across tests",
    "description": "https://github.com/google/j2objc/commit/1158bbd903df87802c9bfe21655ae47e053b3e57\n",
    "type": "GIT",
    "link": "https://github.com/square/okhttp/issues/2742",
    "question_id": "2742",
    "resources": {
        "api": [],
        "git": [
            {
                "link": "https://github.com/square/okhttp/issues/3898",
                "content": [
                    "MockWebServer tests got stuck after updating from 3.9.1 to 3.10.0",
                    "After updating from 3.9.1 to 3.10.0 mockwebserver tests got stuck.",
                    "This is how I configure the HttpClient ( I'm setting up HTTPS and Certificate Pinning ) \ud83d\udc40",
                    "Following you can find a failing test \ud83d\udc40",
                    "\u261d\ufe0f is using https://github.com/mapbox/mapbox-events-android code.",
                    "You can check that we only bumped OkHttp version to 3.10.0 \ud83d\udc49 mapbox/mapbox-events-android @c92a4ac and after that tests got stuck.",
                    "Tried many things without luck \ud83d\ude13",
                    "What did it change that could affect tests in that sense ?",
                    "The text was updated successfully, but these errors were encountered:",
                    "This is a little mystery.",
                    "Can you attach a debugger and check out where OkHttp gets stuck ?",
                    "Everything is working fine until",
                    "while ( processOneRequest ( socket, source, sink ) ) -LCB-",
                    "which calls readRequest ( socket, source, sink, sequenceNumber ) which also calls source.readUtf8LineStrict ( ) which ends up calling RealBufferedSource #readUtf8LineStrict which finally throws a java.io.EOFException ( not found: limit = 0 content = ... ) because apparently the size of the Buffer is 0.",
                    "Then the exception is bubble up to readRequest which returns null",
                    "return null ; / / no request because we closed the stream",
                    "and then processOneRequest returns false",
                    "if ( request == null ) return false ;",
                    "which breaks the processOneRequest loop and logs the WARNING: MockWebServer -LSB- 59055 -RSB- connection from / 127.0.0.1 didn't make a request message because sequenceNumber is 0.",
                    "After that the test is still running ( apparently waiting for new requests ).",
                    "It seems that there's an issue when getting the buffer from the socket and in 3.10.0 we're not able to read that kind of requests anymore.",
                    "I know that 3.10.0 brings Okio 1.14.0.",
                    "Could it be related ?",
                    "My guess is that the root of the issue is around",
                    "Let me know if you need any further information.",
                    "Wanted to add that apart from the issue when trying to obtain the buffer from the socket, \u261d\ufe0f seems like another problem because if at that point we've already received an error, why the test doesn't continue its execution and it gets stuck instead ?",
                    "It seems that in that scenario there are still resources opened.",
                    "Any chance you could isolate this into a standalone test case ?",
                    "All of OkHttp's tests use OkHttp + MockWebServer and they're all working fine.",
                    "After a thoroughly debug session, @Sefford told me that when he bumped OkHttp version to 3.10.0, he started getting SSLPeerUnverifiedException: Hostname localhost not verified messages in their tests and he fixed it adding",
                    "to the config of the OkHttpClient used in their tests.",
                    "I wasn't getting those messages because I'm mocking the Callback so they weren't logged.",
                    "Thanks @Sefford for pointing me in that direction \ud83d\ude4f",
                    "It seems that after # 3764 changes if you're using MockWebServer with HTTPS you need to add \u261d\ufe0f to your tests in order to have them \u2705",
                    "It'd be great if we could add that to the documentation somehow ( if that's the best solution to follow in these cases ).",
                    "After adding that config to my tests everything is working again \ud83d\udc83",
                    "But now I'm wondering why even when passing in an empty Callback implementation ( without adding the hostname verifier stub ) tests still get stuck.",
                    "Shouldn't the exception bubble up and stop the execution of the test if the hostname is not verified ?",
                    "It seems that although the Callback is fired it's not sending the notification to the lock properly and it remains opened forever.",
                    "Let me know if it's worth it to open a new issue reporting \u261d\ufe0f or if you prefer to keep the discussion here.",
                    "Update OkHttp version to 3.10.0",
                    "There is still something worth digging into here regarding why the behaviour changed and why its hanging now.",
                    "I'll try to take a look this week, but glad you have a workaround to unblock yourself.",
                    "I'll try to take a look this week",
                    "Awesome !",
                    "Let me know if you have any questions or if you need further information/clarification.",
                    "We use similar setup but without pinning and get SSLPeerUnverifiedException: Hostname localhost not verified too.",
                    "So we had to use workaround by Guardiola31337.",
                    "Although I'm not sure if using SslClient.localhost ( ) is supported as SslClient is inside internal package.",
                    "SslClient is not public API and we might break you in a future release.",
                    "No action to take on this, other than to be afraid of how mocks + onFailure interact poorly.",
                    ""
                ],
                "description": "After updating from `3.9.1` to `3.10.0` `mockwebserver` tests got stuck.\r\n\r\nThis is how I configure the `HttpClient` (I'm setting up `HTTPS` and _Certificate Pinning_ ) \ud83d\udc40\r\n```java\r\nprivate OkHttpClient configureHttpClient() {\r\n    CertificatePinnerFactory factory = new CertificatePinnerFactory();\r\n    OkHttpClient.Builder builder = client.newBuilder()\r\n      .addInterceptor(new GzipRequestInterceptor())\r\n      .retryOnConnectionFailure(true)\r\n      .certificatePinner(factory.provideCertificatePinnerFor(environment))\r\n      .connectionSpecs(Arrays.asList(ConnectionSpec.MODERN_TLS, ConnectionSpec.COMPATIBLE_TLS));\r\n    if (isSocketFactoryUnset(sslSocketFactory, x509TrustManager)) {\r\n      builder.sslSocketFactory(sslSocketFactory, x509TrustManager);\r\n    }\r\n\r\n    return builder.build();\r\n  }\r\n```\r\n\r\n`3.9.1` \ud83d\udc47\r\n```\r\nFeb 27, 2018 9:15:56 PM okhttp3.mockwebserver.MockWebServer$2 execute\r\nINFO: MockWebServer[59072] starting to accept connections\r\nFeb 27, 2018 9:15:57 PM okhttp3.mockwebserver.MockWebServer$3 processOneRequest\r\nINFO: MockWebServer[59072] received request: POST /events/v2?access_token=anyAccessToken HTTP/1.1 and responded: HTTP/1.1 204 OK\r\n```\r\n\r\n`3.10.0` \ud83d\udc47\r\n```\r\nFeb 27, 2018 9:12:04 PM okhttp3.mockwebserver.MockWebServer$2 execute\r\nINFO: MockWebServer[59055] starting to accept connections\r\nFeb 27, 2018 9:12:06 PM okhttp3.mockwebserver.MockWebServer$3 processConnection\r\nWARNING: MockWebServer[59055] connection from /127.0.0.1 didn't make a request\r\n```\r\n\r\nFollowing you can find a failing test \ud83d\udc40\r\n```java\r\npackage com.mapbox.android.telemetry;\r\n\r\n\r\nimport android.content.Context;\r\n\r\nimport org.junit.Test;\r\n\r\nimport java.net.HttpURLConnection;\r\nimport java.util.Arrays;\r\nimport java.util.List;\r\n\r\nimport okhttp3.Callback;\r\nimport okhttp3.HttpUrl;\r\nimport okhttp3.mockwebserver.MockResponse;\r\nimport okhttp3.mockwebserver.MockWebServer;\r\nimport okhttp3.mockwebserver.RecordedRequest;\r\nimport okhttp3.internal.tls.SslClient;\r\n\r\nimport static org.junit.Assert.assertEquals;\r\nimport static org.mockito.Mockito.RETURNS_DEEP_STUBS;\r\nimport static org.mockito.Mockito.mock;\r\n\r\npublic class Foo {\r\n\r\n  @Test\r\n  public void foo() throws Exception {\r\n    MockWebServer server = new MockWebServer();\r\n    server.useHttps(SslClient.localhost().socketFactory, false);\r\n    server.start();\r\n    Context mockedContext = mock(Context.class, RETURNS_DEEP_STUBS);\r\n    MapboxTelemetry.applicationContext = mockedContext;\r\n    TelemetryClient telemetryClient = obtainATelemetryClient(\"anyAccessToken\", \"anyUserAgent\", server);\r\n    List<Event> mockedEvent = obtainAnEvent();\r\n    MockResponse mockResponse = new MockResponse();\r\n    mockResponse.setResponseCode(HttpURLConnection.HTTP_NO_CONTENT);\r\n    mockResponse.setBody(\"\");\r\n    server.enqueue(mockResponse);\r\n    Callback mockedCallback = mock(Callback.class);\r\n\r\n    telemetryClient.sendEvents(mockedEvent, mockedCallback);\r\n\r\n    RecordedRequest request = server.takeRequest();\r\n    assertEquals(\"/events/v2?access_token=anyAccessToken\", request.getPath());\r\n  }\r\n\r\n  TelemetryClient obtainATelemetryClient(String accessToken, String userAgent, MockWebServer server) {\r\n    TelemetryClientSettings mockedTelemetryClientSettings = provideDefaultTelemetryClientSettings(server);\r\n    Logger mockedLogger = mock(Logger.class);\r\n    return new TelemetryClient(accessToken, userAgent, mockedTelemetryClientSettings, mockedLogger);\r\n  }\r\n\r\n  private TelemetryClientSettings provideDefaultTelemetryClientSettings(MockWebServer server) {\r\n    HttpUrl localUrl = obtainBaseEndpointUrl(server);\r\n    SslClient sslClient = SslClient.localhost();\r\n\r\n    return new TelemetryClientSettings.Builder()\r\n      .baseUrl(localUrl)\r\n      .sslSocketFactory(sslClient.socketFactory)\r\n      .x509TrustManager(sslClient.trustManager)\r\n      .build();\r\n  }\r\n\r\n  private List<Event> obtainAnEvent() {\r\n    Event theEvent = new AppUserTurnstile(\"anySdkIdentifier\", \"anySdkVersion\", false);\r\n\r\n    return obtainEvents(theEvent);\r\n  }\r\n\r\n  private List<Event> obtainEvents(Event... theEvents) {\r\n    return Arrays.asList(theEvents);\r\n  }\r\n\r\n  private HttpUrl obtainBaseEndpointUrl(MockWebServer server) {\r\n    return server.url(\"/\");\r\n  }\r\n}\r\n```\r\n\r\n\u261d\ufe0f is using https://github.com/mapbox/mapbox-events-android code.\r\n\r\nYou can check that we only bumped OkHttp version to `3.10.0` \ud83d\udc49 https://github.com/mapbox/mapbox-events-android/commit/c92a4acdf684cedc003c769f44a62c345ce596f9 and after that tests got stuck.\r\n\r\nTried many things without luck \ud83d\ude13\r\nAny hints? What did it change that could affect tests in that sense? \r\n\r\n",
                "title": "MockWebServer tests got stuck after updating from 3.9.1 to 3.10.0"
            }
        ],
        "qa": [
            {
                "uid": "24952513",
                "link": "https://stackoverflow.com/questions/24952513",
                "title": "Simulate no network using Retrofit and MockWebServer",
                "answers": [
                    {
                        "uid": 24955678,
                        "score": 8,
                        "text": [
                            "to be clear with whe types of exceptions here you can see the differences:",
                            "LINK",
                            "So you can get two types:",
                            "UnknownHostException - When you don't have internet or unknown host ... to simulate this, set to the adapter an incorrect end point.",
                            "ConnectException - mockwebserver can throw a timeout exception.",
                            "You can see how to do it here:",
                            "LINK",
                            "Really I don't know how your code is, but I hope this is useful"
                        ]
                    },
                    {
                        "uid": 24960253,
                        "score": 26,
                        "text": [
                            "Retrofit has a retrofit-mock module which offers a MockRestAdapter class whose purpose is to simulate network delay and errors.",
                            "This is a used in conjunction with the normal RestAdapter to create an instance of your service.",
                            "You can see a full example in the samples/mock-github-client / folder of the repo: LINK",
                            "MockRestAdapter offers these APIs:",
                            "In your test, you can call setErrorPercentage -LRB- 100 -RRB- to guarantee that a network error will occur.",
                            "By default the amount of time for the error to be thrown is anywhere from 0 to 3x the delay.",
                            "Set the delay to 0 for instant results."
                        ]
                    },
                    {
                        "uid": 28584788,
                        "score": 3,
                        "text": [
                            "I don't know if it's useful, but you can simulate a timeout with MockWebServer:",
                            "Note: Please, set HttpClient of your code -LRB- e.g. AsyncHttpClient -RRB- with that number port for testing purpose."
                        ]
                    },
                    {
                        "uid": 56374356,
                        "score": 3,
                        "text": [
                            "What worked for me is pointing the Retrofit URL -LRB- end-point -RRB- to a random non-existent host.",
                            "I used \"thisIsARandomHost.com'' and bingo i was able to mock the unknown host exception.",
                            "For example: setAPP_URL = `` LINK'' ;",
                            "Here, setAPP_URL is the string variable that contains my url which I pass on to retrofit, when I want to mock unknown host exception in my tests I set the url as above.",
                            "For all other purposes it is set to the valid URL required by my app.",
                            "As stated in above answers, MockWebServer is a great library for mocking retrofit responses, but you don't need that library for mocking this exception.",
                            "For mocking all other exceptions I would recommend MockWebServer, I use it a lot in my project for testing responses.",
                            "Note: You can set the app url to anything as long as that url doesn't exist on the web."
                        ]
                    },
                    {
                        "uid": 60987697,
                        "score": 4,
                        "text": [
                            "The easiest way to simulate network issues with MockWebServer is by setting the SocketPolicy to SocketPolicy.DISCONNECT _ AT_START, SocketPolicy.NO _ RESPONSE or etc:",
                            "This way you can simulate network errors like connection prematurely closed before response or Timeout exceptions"
                        ]
                    }
                ],
                "tags": [
                    "android",
                    "retrofit",
                    "mockwebserver"
                ]
            }
        ],
        "other": [
            {
                "link": "https://www.raywenderlich.com/10091980-testing-rest-apis-using-mockwebserver",
                "type": "misc",
                "content": [
                    "iOS & Swift Learn iOS development with SwiftUI and UIKit",
                    "Android & Kotlin Learn Android development in Kotlin",
                    "Flutter Learn multi-platform development with Flutter",
                    "Browse the entire Android & Kotlin library",
                    "Spring Ahead Sale -- Save on Everything.All videos.",
                    "Build your mobile development skills and save !",
                    "Stay ahead of the rest with an Ultimate book & video subscription.",
                    "Starting at just $ 149/year as part of the Spring Ahead sale.",
                    "Why Use a Mock Server to Test API Calls",
                    "Why Use MockWebServer Over Manual Client Mocking",
                    "Setting up a Mock Response",
                    "Creating a File Reader to Read the Response",
                    "Setting up an Idling Resource",
                    "Where to Go From Here ?",
                    "Testing REST APIs Using MockWebServer In this MockWebserver Android tutorial, you'll learn how to mock REST API responses and use Espresso UI tests to check how your app handles success or error responses.",
                    "Jun 8 2020 \u00b7 Article ( 20 mins ) \u00b7 Intermediate",
                    "MockWebServer is a library from Square -- the people who made Retrofit and OkHttp.",
                    "MockWebServer makes it possible to easily test how your apps behave when making HTTP/HTTPS calls.",
                    "A mock web server is a program that mocks the behavior of an actual remote server but doesn't make calls over the internet.",
                    "This makes it easy to test different scenarios without internet access and without having to make changes to your remote server.",
                    "In this tutorial, you'll learn:",
                    "The benefits of using a mock server while testing.",
                    "How to set up MockWebServer.",
                    "How to make MockWebServer mock the behavior of your actual server.",
                    "How to write UI tests to make sure your app functions as expected.",
                    "You'll do this by working on an app called Potterverse that displays a list of characters from the Harry Potter universe and their roles.",
                    "Getting Started Download the starter project by clicking the Download Materials button at the top or bottom of the tutorial.",
                    "Inside the materials, you'll find a starter project and a final project.",
                    "The starter project consists of the following files",
                    "CharacterAdapter.kt: A RecyclerView adapter that displays the list of characters.",
                    "CharacterModel.kt: A Kotlin data model that represents each character.",
                    "MainActivity.kt: Displays the list and the error states, when required.",
                    "OkHttpProvider.kt: Contains a helper method to access a networking client.",
                    "PotterApi.kt: Contains the API key and a method corresponding to the API call you want to make.",
                    "In this tutorial, you'll focus less on the code from the above files and more on setting up MockWebServer and writing tests.",
                    "Open Android Studio and select Open an existing Android Studio project.",
                    "Select starter-project from the MockWebserver_Materials folder.",
                    "After you've imported the starter project, build and run.",
                    "You'll see a screen like this:",
                    "You'll notice an error text appears because the API call failed.",
                    "To fix this, you have to add an API key.",
                    "Adding an API Key For this tutorial, you'll use the PotterAPI to provide data for your app.",
                    "You'll get your API key from https://www.potterapi.com/.",
                    "You'll see a GET A KEY button at the top-right edge of the screen.",
                    "Clicking on GET A KEY will take you to the sign-up page with a form like the one below:",
                    "Once you sign up, you'll see your email ID and API key.",
                    "Open the PotterApi.kt file and assign the API key as follows:",
                    "The API call no longer fails and the app successfully shows a list of characters from the Harry Potter universe.",
                    "Why Use a Mock Server to Test API Calls Before you setup your MockWebServer, you might be wondering why you'd want to test your API calls.",
                    "There are a few advantages to doing this:",
                    "Testing Adapters Is Easy Sometimes, the API might give responses that aren't straightforward to serialize and deserialize directly.",
                    "In other cases, you might want to convert the data from your API response from one data type to another.",
                    "For example, the API might return dates as Strings but you want to use them as DateTime objects.",
                    "For such cases, you might write an adapter to convert the data.",
                    "A mock web server makes it easy to test that these adapters are working as expected when making API calls.",
                    "Testing Empty and Error States It can be tricky to test that apps handle empty and error states properly when you're dealing with a remote server.",
                    "Servers are designed to be as reliable as possible, making it difficult to get error responses while testing.",
                    "By using a mock server, you can easily emulate error responses and see if the app handles them properly.",
                    "All this, without making any changes to your actual server.",
                    "Why Use MockWebServer Over Manual Client Mocking Now that you're sold on testing your API calls, you may be wondering why you should use MockWebServer when you could instead just mock out whatever class makes your API calls.",
                    "Here are a few reasons:",
                    "MockWebServer exercises the full HTTP stack, which would be tedious to do manually.",
                    "You don't need to make changes on the app side when using a MockWebServer.",
                    "It's easy to recreate edge-cases like throttling and rare error codes.",
                    "Configuring MockWebServer In this section, you'll configure a MockWebServer instance and make it return the response you saved in the JSON file.",
                    "Changing the API URL The base URL for the app is stored in PotterApp.",
                    "Open the file to find the following function:",
                    "When you create a test with a mock server, the app shouldn't use the real URL.",
                    "Instead, it should use the mock server's URL.",
                    "To set this up, you'll need a mechanism to tell the app to use the real URL normally, but the mock URL when you run tests.",
                    "A test runner makes this possible.",
                    "It helps you configure the conditions you use to run your tests.",
                    "First, you need to create an equivalent of PotterApp that returns the mock URL instead of the real URL.",
                    "Do this by creating a file named PotterTestApp.kt in the androidTest folder and add the following code to it:",
                    "Here, http://127.0.0.1 is the local URL of your computer and 8080 is the port MockWebServer will use.",
                    "After you add the PotterTestApp.kt file, your package structure should look like this:",
                    "Creating a Test Runner Now, you need to provide a test runner that uses PotterTestApp instead of PotterApp when running a test.",
                    "Create a file named MockTestRunner.kt in the androidTest folder and add the following code to it:",
                    "The newApplication method provides the application instance you'll use in the test.",
                    "You can see that it returns an application instance using PotterTestApp instead of PotterApp.",
                    "Now that you've written a test runner, you need to tell Gradle to use it for your project.",
                    "To do this, open the app-level build.gradle and change the value of testInstrumentationRunner as follows:",
                    "Click Sync Now and let Gradle finish syncing.",
                    "From now on, Gradle will use MockTestRunner whenever you run any UI tests.",
                    "To use a mock web server and verify that it's working as expected, you'll write a few Espresso tests next.",
                    "Using Espresso Espresso is a testing framework that Android provides to write UI tests.",
                    "You can use it to emulate user interactions while running tests and to verify if your views respond as expected.",
                    "You can test MockWebServer even without Espresso but this tutorial uses it to demonstrate a complete testing scenario.",
                    "Note: If you're new to UI testing using Espresso, check out this introduction to Espresso tutorial.",
                    "Before starting to write the test, it's helpful to review the contents of activity_main.xml.",
                    "It contain three main views:",
                    "ProgressBar: Displays the loading status.",
                    "TextView: Shows the error message.",
                    "RecyclerView: Display the list of characters.",
                    "Create a file named MainActivityTest.kt in the androidTest folder and add this to it:",
                    "This is the basic structure of an Espresso test.",
                    "You annotate a class with @RunWith ( AndroidJUnit4:: class ) to specify that AndroidJUnit4 is the runner for this test.",
                    "A @Before annotation on a method specifies that it will run before every test.",
                    "Any method with the @After annotation will run after every test.",
                    "Use these annotations to keep initialization logic common to all tests.",
                    "You use ActivityTestRule to specify the Activity that you want to run the UI tests on and the initial actions you want to perform.",
                    "Setting up MockWebServer You'll need to add the Gradle dependency for MockWebServer first to be able to use instances of MockWebServer.",
                    "Open the app-level build.gradle and add the following line below the corresponding / / TODO at the end of the file:",
                    "Next, you'll create an instance of MockWebServer.",
                    "Add the following line before setup ( ) in the MainActivityTest file:",
                    "Place the cursor on the word MockWebServer and press Alt-Enter, then choose Import to automatically add the missing import line and fix the build.",
                    "You have to start the server before every test and stop it after every test.",
                    "You can do this by modifying setup ( ) as follows:",
                    "This starts the mock server on the 8080 port.",
                    "Next, modify teardown ( ) to stop the server:",
                    "And that's all it takes to get MockWebServer ready.",
                    "All you need to do now is to setup some mock responses and write some tests.",
                    "Setting up a Mock Response Before you can actually write your tests, you need to define the response your mock web server will return.",
                    "To find what the structure of the response of the PotterAPI is, you need to make a real API call first.",
                    "Creating a JSON Response Open a web browser and paste the following URL: https://www.potterapi.com/v1/characters?key=API_KEY.",
                    "Replace API_KEY with the real API key you obtained in the previous section.",
                    "The response will be in the following format:",
                    "Keep the browser open, you'll need it later.",
                    "If it doesn't already exist, create a directory named assets in your app module.",
                    "It will look something like this:",
                    "Create a file named success_response.",
                    "json in the assets directory.",
                    "This file will contain the response that the mock server will return.",
                    "Switch to your browser and copy the first 10 items from the response and paste them in this file.",
                    "json file will look something like this:",
                    "Remember to remove the last comma and add a square bracket `` -RSB-'' at the end of the file to make sure it's a valid JSON file.",
                    "Creating a File Reader to Read the Response MockWebServer can't read the response from the JSON file directly.",
                    "For this, you need to create a file reader to read the contents of the JSON file and convert them into a String object.",
                    "Start by creating a file named FileReader.kt in androidTest.",
                    "Add the following code to FileReader.kt:",
                    "FileReader consists of a single method: readStringFromFile.",
                    "This opens the JSON file as an InputStream and writes its contents in a String line-by-line.",
                    "The final built up String is then returned.",
                    "You'll use FileReader to read from the success_response.",
                    "json file you created earlier.",
                    "Writing the Tests Now that the mock server is fully set up, you'll write a few Espresso tests to ensure the server is working as expected.",
                    "But there's one last thing you need to do before writing the actual tests.",
                    "API calls are asynchronous tasks, so you need a way to tell Espresso to wait for the API calls to complete.",
                    "You'll use an idling resource to solve this.",
                    "Setting up an Idling Resource An idling resource represents an asynchronous operation whose results affect subsequent operations in a UI test.",
                    "You can read more about them in the Espresso documentation.",
                    "This adds the Gradle dependency, which you need to do before you can call OkHttp3IdlingResource.",
                    "Now, click Sync Now and let Gradle finish syncing.",
                    "Open MainActivityTest.kt and add the following lines to setup ( ):",
                    "Place the cursor on the words IdlingRegistry and OkHttp3IdlingResource respectively, then press Alt-Enter.",
                    "Next, choose Import to automatically add the missing import lines and fix the build.",
                    "OkHttp3IdlingResource is a class that the okhttp-idling-resource library provides.",
                    "It tells Espresso to wait for the OkHttp client to finish performing its task.",
                    "OkHttp is the networking client used in the project.",
                    "OkHttpProvider is a helper class in the project that gives you access to a static OkHttp instance.",
                    "For your next step, you'll actually run a test to see what happens when the case is successful.",
                    "Testing a Successful Case For your first test case, you'll make MockWebServer return the response from the JSON file.",
                    "You can tell MockWebServer what to send as a response by creating a dispatcher.",
                    "Add the following method to the MainActivityTest.kt class and import dependencies:",
                    "Here's what's happening with this code: @Test tells Espresso that the method contains a test.",
                    "MockResponse ( ) creates a mock response that the mock server will return.",
                    "setResponseCode ( ) specifies the response code.",
                    "Since you're mocking a successful response, the code is 200.",
                    "setBody ( ) contains the body of the response.",
                    "In this case, you use the FileReader utility class to convert the JSON response into a String instance.",
                    "With the mock server set up, you need to write the UI test to run to verify the successful response.",
                    "Add the following at the end of testSuccessfulResponse ( ):",
                    "The code above launches the Activity and verifies the following conditions are met after a successful response:",
                    "The view with R.id.progress _ bar has a visibility of View.GONE.",
                    "The one with R.id.character _ recyclerview has a visibility of View.VISIBLE.",
                    "The view with R.id.textview has a visibility of View.GONE.",
                    "Run the test by clicking the Play icon next to the class definition then select Run MainActivityTest.",
                    "Once the app launches on your device, Android Studio will show you a green tick indicating the successful test.",
                    "Now, it's time to see what happens when you get a failed response.",
                    "Testing a Failed Response For this test, you'll create a response that returns after five seconds.",
                    "You've configured the app to request timeout after three seconds, so it will treat a five-second response as a failure.",
                    "Add the following method to MainActivityTest.kt:",
                    "In the above code, throttleBody ( ) throttles the response by five seconds.",
                    "This test verifies one extra thing: It checks if the view with ID R.id.textview contains the text that the string resource R.string.something _ went_wrong refers to.",
                    "You will see that both the tests pass.",
                    "You've now set up tests to check both the success and failure responses of your app on a mock web server.",
                    "Download the final project using the Download Materials button at the top or bottom of this tutorial.",
                    "In this tutorial, you've set up MockWebServer, configured it to mock API calls from a remote server and written UI tests to verify how an app functions.",
                    "As a further enhancement, make the app display a text saying Oops !",
                    "Seems like a server error when the API returns a status code of 500.",
                    "Configure MockWebServer to return a 500 status code and write a UI test to verify that the app displays the text.",
                    "Hopefully, you've enjoyed this tutorial !",
                    "If you have any questions or ideas to share, please join the forum discussion below.",
                    "Networking Testing Android & Kotlin Tutorials",
                    "raywenderlich.com Weekly The raywenderlich.com newsletter is the easiest way to stay up-to-date on everything you need to know as a mobile developer.",
                    "Get a weekly digest of our tutorials and courses, and receive a free in-depth email course as a bonus !",
                    "Add a rating for this content",
                    "Sign in to add a rating",
                    "Spring Ahead Sale -- Save on Everything.",
                    "The mobile development world moves quickly -- make 2021 the year you stand out from the rest.",
                    "Ultimate book & video subscriptions start at just $ 149/year for as part of our Spring Ahead sale.",
                    "Mark Complete ( All Chapters ) Clear Progress ( All Chapters )",
                    "New Spring Ahead Sale: Subscriptions from $ 149 and Books 50 % Off !",
                    "iOS & Swift Announcements Apr 6 2021 \u00b7 Article ( 10 mins )",
                    "Grab our best deals of the year: Yearly Ultimate Subscriptions starting at just $ 149/year and every single book on our site for 50 % off.",
                    "Save big during this year's Spring Ahead Sale !",
                    "Apr 6 2021 \u00b7 Article ( 10 mins )",
                    "New Firebase Cloud Messaging for iOS: Push Notifications iOS & Swift Networking Apr 5 2021 \u00b7 Article ( 25 mins )",
                    "Learn how to use Firebase Cloud Messaging to send and receive remote push notifications in your SwiftUI iOS app.",
                    "Apr 5 2021 \u00b7 Article ( 25 mins )",
                    "New Annyce Davis -- Podcast S11 E09 iOS & Swift Podcast Mar 31 2021 \u00b7 Article ( 1 min )",
                    "Annyce Davis brings even more joy and enthusiasm while Dru and Nishant discuss her interview in ` Living By The Code.'",
                    "Mar 31 2021 \u00b7 Article ( 1 min )",
                    "New Announcing Server-Side Swift with Vapor -- Fully Updated for Vapor 4 !",
                    "Server-Side Swift Announcements Mar 31 2021 \u00b7 Article ( 20 mins )",
                    "We're beyond excited to announce that our book, Server-Side Swift with Vapor, has been fully updated for Vapor 4 -- and includes a completely new chapter !",
                    "Mar 31 2021 \u00b7 Article ( 20 mins )",
                    "Subhrajyoti Sen I am an Android Developer at KeepTruckin.",
                    "I am passionate about creating good mobile experiences and sharing my learnings with ... Author",
                    "Alain Muller Alain is the Lead Android Engineer at AriadNEXT, France.",
                    "He has fallen in love with Android since its Eclair version.",
                    "Sandra Grauschopf Sandra Grauschopf is the Editing Team Lead for raywenderlich.com.",
                    "She's an experienced writer, editor, and content manager as ... Editor",
                    "Julia Zinchenko Graphic designer and illustrator based in Ukraine Illustrator",
                    "Alex Sullivan Alex is an Android and iOS developer at ( Thoughtbot ) -LSB- https://thoughtbot.com/ -RSB- in Boston, MA.",
                    "He's a big fan of reactive ... Fpe",
                    "Eric Soto Eric is Android Tutorial Team Lead and a Professional Software Engineer and certified Agile-Scrum Master focusing on Apple iOS ... Team Lead",
                    "In this MockWebserver Android tutorial, you'll learn how to mock REST API responses and use Espresso UI tests to check how your app handles success or error responses.",
                    ""
                ],
                "title": "Testing REST APIs Using MockWebServer | raywenderlich.com"
            },
            {
                "link": "https://medium.com/mindorks/instrumentation-testing-with-mockwebserver-and-dagger2-56778477f0cf",
                "type": "misc",
                "content": [
                    "Sign inAndroidLearn Advanced Android By DoingRoadmapLearn Advanced AndroidInstrumentation testing with MockWebServer and Dagger2Mohak PuriFollowJun 30, 2018 \u00b7 5 min readCredit: GoogleTesting on android is tough specially when it comes to instrumentation testing.",
                    "Handling UI changes along with tons of network calls becomes a nightmare with Espresso.Thanks to the guys at Square we have MockWebServer that allows you to mock web request and helps a ton with instrumentation test.",
                    "Rather than making an actual network call MockWebServer allows you to mock the response of the network request.",
                    "So in a nutshell, when you run your test MockWebServer intercepts your network call providing you with the data you mock data.Why?So it comes down to this.",
                    "Why on earth do we need this ?",
                    "Well when it comes to testing it will make your life damn easy.",
                    "Let us see how !",
                    "I will be using Dagger from here.",
                    "If you don't know what it is then you should definitely google some tutorials before proceeding further.",
                    "Also the focus is on MockWebServer and I wont be explaining Dagger.Enough talking !",
                    "Let's codeAdding MockWebServer as a dependencyLet us quickly go through some dagger stuff.",
                    "Let us start with our custom application class.",
                    "Here we create our application component.",
                    "Don't forget to add this to the manifest file !",
                    "MyTestingApp.javaHere is what the application component looks likeApplicationComponent.javaNow let's check the Application Module.",
                    "Look at the Retrofit component and its baseUrl.",
                    "You can ignore the OkHttp client as it has nothing to do with testing !",
                    "ApplicationModule.javaSo we are done with the basic structure of the application.",
                    "Now let us dive into the testing part !",
                    "All the files from now must be a part of android test folder and not the main java folder !",
                    "First, create a new application class that extends your previous class ( the one that is mentioned in your manifest file ).",
                    "If you haven't noticed yet we are providing a different module to our application component this time.",
                    "It is not the ApplicationModule but TestApplicationModule.Do not replace the manifest file with this class.",
                    "Just leave the manifest file alone we don't need it: ) UiTestApp.javaHere is what the TestApplicationModule class looks like.",
                    "Yes it extends ApplicationModule but it's getRetrofit ( ) looks a bit different.",
                    "Rather than using the API endpoint that your application is using we are using some http://localhost:8080/.",
                    "This will make complete sense just a little more patience !",
                    "Let us create our custom runner class that extends the AndroidJUnitRunner.MockRunner.javaLet me bring you focus to this lineWhen we use this MockRunner for testing our application, rather than using MyTestingApp for creating our application component the test will use UiTestApp.So how does that help ?",
                    "Basically this is what happens - Since you are using UiTestApp for creating your application component and the application component is using TestApplicationModule for creating the dependencies your Retrofit baseUrl will be http://localhost:8080/ when you are testing your application.",
                    "To conclude - When you are running your tests you will be hitting http://localhost:8080/ for the API request instead of the real one !",
                    "I hope it all makes sense !",
                    "and yes for all of this to work make changes to your build.gradle fileNow that all the setup is done let us dive into MockWebServerCase Study - A basic application that sends an API request as soon as you open the application.",
                    "Initially it shows some progress bar that hides once the response is received.",
                    "It also has a retry button that sends the request in case it fails for some reason.App Opens - > ProgressBar - > Result - > ProgressBar hidesNow lets see the test !",
                    "Nothing much happening here before starting the test we create the server and start it at port 8080.",
                    "Once the test is done we shutdown the server.",
                    "One thing here to notice is the 3rd parameter to the ActivityTestRule.",
                    "From the documentation - boolean: true if the Activity should be launched once per Test method.",
                    "It will be launched before the first Before method, and terminated after the last After method.So basically with false we will have to launch the activity by our self.",
                    "The system is not going to do that for us.",
                    "This is important if you have an API request as soon as you open your application.",
                    "This allows us to start the server and attach dispatcher ( will see later ) before our activity starts or in other words before our activity makes an API request.",
                    "Thanks to ISHAAN KAKKAR for helping me with this !",
                    "Note: In case your activity does not have an API request as soon as it opens you can skip the launchActivity parameter.MainActivityTest.javaLets say that our API has multiple endpoints.",
                    "With dispatcher we can tell what data is to be returned when our application hits those endpoints.",
                    "Not only that we can easily generate error conditions for our application by setting appropriate value of response code.",
                    "Here is what a dispatcher may look like.Note: Our case study has just one endpoint.",
                    "This is just an example of how you can handle multiple endpoints.",
                    "You can also use json files to set the body through GSONMockServerDispatcher.javaLet us see test our app in Happy Condition i.e everything goes fine and there are no errors.",
                    "In happy condition the progress bar is invisible, the errorUI is invisible, the retry button is invisible and the textview showing the mock response is visible.",
                    "Make sure to add the following line - Happy case testingThat is all !",
                    "Now you can tweak network calls easily in your instrumentation test: ) mohak1712 ( Mohak Puri ) mohak1712 has 34 repositories available.",
                    "Follow their code on GitHub.github.comIf you find anything wrong do let me know and if you have a better approach do share in the comment section below !",
                    "MindOrksOur community publishes stories worth reading on Android ... Follow828 5 AndroidTesting828 claps828 claps5 Written byMohak PuriFollowProduct Engineer GO-JEK | GSoC 2018 @openMF | Mobile | Backend | mohak1712 everywhereFollowMindOrksFollowOur community publishes stories worth reading on Android DevelopmentFollowWritten byMohak PuriFollowProduct Engineer GO-JEK | GSoC 2018 @openMF | Mobile | Backend | mohak1712 everywhereMindOrksFollowOur community publishes stories worth reading on Android DevelopmentMore From MediumOpen Source Is Not Necessarily FreeDaniel Okwufulueze in The StartupBuild automation with GradleAmalfitanoYour Responsibilities on a Software TeamChris Fox in CodeXWhy programming is hardJos VisserComparing Data in SQL Server Using ReflectionMike Beaton in The StartupConnect Mendix With REST-DB for BackupMax Bareis in The StartupDeploy a Gatsby Site to Digital Ocean in 7 StepsChulooFixing Python module ( pip install ) installation problemsAlexandra WilliamsLearn more.Medium is an open platform where 170 million readers come to find insightful and dynamic thinking.",
                    "Here, expert and undiscovered voices alike dive into the heart of any topic and bring new ideas to the surface.",
                    "Learn moreMake Medium yours.Follow the writers, publications, and topics that matter to you, and you'll see them on your homepage and in your inbox.",
                    "ExploreShare your thinking.If you have a story to tell, knowledge to share, or a perspective to offer -- welcome home.",
                    "It's easy and free to post your thinking on any topic.",
                    "Write on MediumAboutHelpLegalGet the Medium app",
                    "Sign inAndroidLearn Advanced Android By DoingRoadmapLearn Advanced Android",
                    "AndroidLearn Advanced Android By DoingRoadmapLearn Advanced Android",
                    "Instrumentation testing with MockWebServer and Dagger2Mohak PuriFollowJun 30, 2018 \u00b7 5 min readCredit: GoogleTesting on android is tough specially when it comes to instrumentation testing.",
                    "Instrumentation testing with MockWebServer and Dagger2Mohak PuriFollowJun 30, 2018 \u00b7 5 min read",
                    "Mohak PuriFollowJun 30, 2018 \u00b7 5 min read",
                    "mohak1712 ( Mohak Puri ) mohak1712 has 34 repositories available.",
                    "Follow their code on GitHub.github.com",
                    "Follow their code on GitHub.",
                    "MindOrksOur community publishes stories worth reading on Android ... Follow828 5",
                    "MindOrksOur community publishes stories worth reading on Android ... Follow",
                    "Our community publishes stories worth reading on Android ...",
                    "AndroidTesting828 claps828 claps5 Written byMohak PuriFollowProduct Engineer GO-JEK | GSoC 2018 @openMF | Mobile | Backend | mohak1712 everywhereFollowMindOrksFollowOur community publishes stories worth reading on Android DevelopmentFollowWritten byMohak PuriFollowProduct Engineer GO-JEK | GSoC 2018 @openMF | Mobile | Backend | mohak1712 everywhereMindOrksFollowOur community publishes stories worth reading on Android DevelopmentMore From MediumOpen Source Is Not Necessarily FreeDaniel Okwufulueze in The StartupBuild automation with GradleAmalfitanoYour Responsibilities on a Software TeamChris Fox in CodeXWhy programming is hardJos VisserComparing Data in SQL Server Using ReflectionMike Beaton in The StartupConnect Mendix With REST-DB for BackupMax Bareis in The StartupDeploy a Gatsby Site to Digital Ocean in 7 StepsChulooFixing Python module ( pip install ) installation problemsAlexandra Williams",
                    ""
                ],
                "title": "Instrumentation testing with MockWebServer and Dagger2 | by Mohak Puri | MindOrks | Medium"
            }
        ]
    },
    "parsed": true
}