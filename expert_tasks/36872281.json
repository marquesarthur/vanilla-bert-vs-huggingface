{
    "task": "JSONObject parse dictionary objects",
    "description": "JSON values that I get from server:\nGetting the result as ` response' after connection and I am able to show my JSON string results on the screen.\nI am okay the results of `` Status'' and `` Message'' but not with `` Result'' because want to separate `` Result'' objects as and able use each of them as objects.\nFor example: When I type OB in my app, I will get the result S.C. Blue Air",
    "type": "SO",
    "link": "https://stackoverflow.com/questions/36872281",
    "question_id": "36872281",
    "resources": {
        "api": [
            {
                "link": "https://developer.android.com/reference/org/json/JSONObject",
                "type": "android",
                "content": [
                    "public class JSONObject extends Object",
                    "A modifiable set of name/value mappings.",
                    "Names are unique, non-null strings.",
                    "Values may be any mix of JSONObjects, JSONArrays, Strings, Booleans, Integers, Longs, Doubles or NULL.",
                    "Values may not be null, NaNs, infinities, or of any type not listed here.",
                    "This class can coerce values to another type when requested.",
                    "This class can look up both mandatory and optional values:",
                    "Warning: this class represents null in two incompatible ways: the standard Java null reference, and the sentinel value NULL.",
                    "In particular, calling put ( name, null ) removes the named entry from the object but put ( name, JSONObject.NULL ) stores an entry whose value is JSONObject.NULL.",
                    "Instances of this class are not thread safe.",
                    "Although this class is nonfinal, it was not designed for inheritance and should not be subclassed.",
                    "In particular, self-use by overrideable methods is not specified.",
                    "See Effective Java Item 17, `` Design and Document or inheritance or else prohibit it'' for further information.",
                    "A sentinel value used to explicitly define a name with no value.",
                    "Creates a JSONObject with no name/value mappings.",
                    "Creates a new JSONObject by copying all name/value mappings from the given map.",
                    "Creates a new JSONObject with name/value mappings from the next object in the tokener.",
                    "Creates a new JSONObject with name/value mappings from the JSON string.",
                    "Creates a new JSONObject by copying mappings for the listed names from the given object.",
                    "Appends value to the array already mapped to name.",
                    "Returns the value mapped by name, or throws if no such mapping exists.",
                    "Returns the value mapped by name if it exists and is a boolean or can be coerced to a boolean, or throws otherwise.",
                    "Returns the value mapped by name if it exists and is a double or can be coerced to a double, or throws otherwise.",
                    "Returns the value mapped by name if it exists and is an int or can be coerced to an int, or throws otherwise.",
                    "Returns the value mapped by name if it exists and is a JSONArray, or throws otherwise.",
                    "Returns the value mapped by name if it exists and is a JSONObject, or throws otherwise.",
                    "Returns the value mapped by name if it exists and is a long or can be coerced to a long, or throws otherwise.",
                    "Returns the value mapped by name if it exists, coercing it if necessary, or throws if no such mapping exists.",
                    "Returns true if this object has a mapping for name.",
                    "Returns true if this object has no mapping for name or if it has a mapping whose value is NULL.",
                    "Returns an iterator of the String names in this object.",
                    "Returns the number of name/value mappings in this object.",
                    "Returns an array containing the string names in this object.",
                    "Encodes the number as a JSON string.",
                    "Returns the value mapped by name, or null if no such mapping exists.",
                    "Returns the value mapped by name if it exists and is a boolean or can be coerced to a boolean, or fallback otherwise.",
                    "Returns the value mapped by name if it exists and is a boolean or can be coerced to a boolean, or false otherwise.",
                    "Returns the value mapped by name if it exists and is a double or can be coerced to a double, or fallback otherwise.",
                    "Returns the value mapped by name if it exists and is a double or can be coerced to a double, or NaN otherwise.",
                    "Returns the value mapped by name if it exists and is an int or can be coerced to an int, or fallback otherwise.",
                    "Returns the value mapped by name if it exists and is an int or can be coerced to an int, or 0 otherwise.",
                    "Returns the value mapped by name if it exists and is a JSONArray, or null otherwise.",
                    "Returns the value mapped by name if it exists and is a JSONObject, or null otherwise.",
                    "Returns the value mapped by name if it exists and is a long or can be coerced to a long, or 0 otherwise.",
                    "Returns the value mapped by name if it exists and is a long or can be coerced to a long, or fallback otherwise.",
                    "Returns the value mapped by name if it exists, coercing it if necessary, or fallback if no such mapping exists.",
                    "Returns the value mapped by name if it exists, coercing it if necessary, or the empty string if no such mapping exists.",
                    "Maps name to value, clobbering any existing name/value mapping with the same name.",
                    "Equivalent to put ( name, value ) when both parameters are non-null ; does nothing otherwise.",
                    "Encodes data as a JSON string.",
                    "Removes the named mapping if it exists ; does nothing otherwise.",
                    "Returns an array with the values corresponding to names.",
                    "Encodes this object as a compact JSON string, such as:",
                    "Encodes this object as a human readable JSON string for debugging, such as:",
                    "Wraps the given object if necessary.",
                    "Unlike null, names with this value:",
                    "This value violates the general contract of Object #equals by returning true when compared to null.",
                    "Its toString ( ) method returns `` null''.",
                    "Names that aren't present in copyFrom will be skipped.",
                    "If this object has no mapping for name, this inserts a new mapping.",
                    "If the mapping exists but its value is not an array, the existing and new values are inserted in order into a new array which is itself mapped to name.",
                    "In aggregate, this allows values to be added to a mapping one at a time.",
                    "Note that append ( String, Object ) provides better semantics.",
                    "In particular, the mapping for name will always be a JSONArray.",
                    "Using accumulate will result in either a JSONArray or a mapping whose type is the type of value depending on the number of calls to it.",
                    "Note that JSON represents numbers as doubles, so this is lossy ; use strings to transfer numbers via JSON.",
                    "The mapping may be NULL.",
                    "The returned iterator supports remove, which will remove the corresponding mapping from this object.",
                    "If this object is modified after the iterator is returned, the iterator's behavior is undefined.",
                    "The order of the keys is undefined.",
                    "This method returns null if this object contains no mappings.",
                    "If the value is null, any existing mapping for name is removed.",
                    "This applies quotes and any necessary character escaping.",
                    "The array contains null for names that aren't mapped.",
                    "This method returns null if names is either null or empty.",
                    "If the object is null or, returns NULL.",
                    "If the object is a JSONArray or JSONObject, no wrapping is necessary.",
                    "If the object is NULL, no wrapping is necessary.",
                    "If the object is an array or Collection, returns an equivalent JSONArray.",
                    "If the object is a Map, returns an equivalent JSONObject.",
                    "If the object is a primitive wrapper type or String, returns the object.",
                    "Otherwise if the object is from a java package, returns the result of toString.",
                    "If wrapping fails, returns null.",
                    "When the requested type is a boolean, strings will be coerced using a case-insensitive comparison to `` true'' and `` false''.",
                    "When the requested type is a double, other Number types will be coerced using doubleValue.",
                    "Strings that can be coerced using Double #valueOf ( String ) will be.",
                    "When the requested type is an int, other Number types will be coerced using intValue.",
                    "Strings that can be coerced using Double #valueOf ( String ) will be, and then cast to int.",
                    "When the requested type is a long, other Number types will be coerced using longValue.",
                    "Strings that can be coerced using Double #valueOf ( String ) will be, and then cast to long.",
                    "This two-step conversion is lossy for very large values.",
                    "For example, the string `` 9223372036854775806'' yields the long 9223372036854775807.",
                    "When the requested type is a String, other non-null values will be coerced using String #valueOf ( Object ).",
                    "Although null can not be coerced, the sentinel value JSONObject #NULL is coerced to the string `` null''.",
                    "Use getType ( ) to retrieve a mandatory value.",
                    "This fails with a JSONException if the requested name has no value or if the value can not be coerced to the requested type.",
                    "Use optType ( ) to retrieve an optional value.",
                    "This returns a system - or user-supplied default if the requested name has no value or if the value can not be coerced to the requested type.",
                    "show up in the names ( ) array",
                    "show up in the keys ( ) iterator",
                    "return true for has ( java.lang.String )",
                    "do not throw on get ( java.lang.String )",
                    "are included in the encoded JSON string.",
                    ""
                ],
                "title": "JSONObject \u00a0|\u00a0 Android Developers"
            }
        ],
        "git": [
            {
                "link": "https://github.com/dotnet/runtime/issues/29567",
                "content": [
                    "Deserializing duplicate JSON object keys to a dictionary \u00b7 Issue # 29567 \u00b7 dotnet/runtime \u00b7 GitHub",
                    "Deserializing duplicate JSON object keys to a dictionary",
                    "Deserializing duplicate JSON object keys to a dictionary should be thought about.",
                    "They're not common, but they're also not disallowed by the JSON spec.",
                    "In Newtonsoft.Json key/value pairs are set into the dictionary so that the last value in an object wins.",
                    "This means dictionaries align with classes when it comes to duplicate object keys: the final result is the last value.",
                    "Throwing an error that there is a duplicate key would prevent someone from using the serializer.",
                    "S.T.J should either follow `` last value wins'', or have a setting to opt into it or out of it.",
                    "Newtonsoft.Json has a setting like this: https://www.newtonsoft.com/json/help/html/T_Newtonsoft_Json_Linq_DuplicatePropertyNameHandling.htm",
                    "This should also be considered with JsonDocument.",
                    "My recommendation is to follow `` last value wins'' by default in the serializer and JsonDocument, and either add a setting now or in the future to allow people to be more strict ( throw an error ) about duplicate JSON object keys.",
                    "/ / @ahsonkhan @rynowak @steveharter @JeremyKuhne",
                    "The text was updated successfully, but these errors were encountered:",
                    "For searching a property within a payload that contains duplicates, JsonDocument already picks the last one ( matching what Json.NET does ).",
                    "My recommendation is to follow `` last value wins'' by default in the serializer",
                    "That makes sense to me.",
                    "Would the same apply when deserializing any duplicate property ( even outside of dictionary ) ?",
                    "I haven't tested it out but that is likely that is already the serializer behavior for non-dictionaries.",
                    "The alternative is keeping state for every POCO you are deserializing: you will need to store a list of keys that have been set, and you would check it before setting a property value.",
                    "JsonDocument already picks the last one ( matching what Json.NET does ).",
                    "You don't need to do it for 3.0 but someone will soon ask for a setting like https://www.newtonsoft.com/json/help/html/T_Newtonsoft_Json_Linq_DuplicatePropertyNameHandling.htm for JsonDocument and the serializer.",
                    "The load/parse methods on JsonDocument will likely have overloads in the future with additional options beyond just JsonReaderOptions.",
                    "That would be somewhat unfortunate, imo.",
                    "If we expect that to be the case, do you think we should instead have a dedicated JsonDocumentOptions rather than re-use JsonReaderOptions ?",
                    "Multiple identical keys are likely an error in the data.",
                    "Picking the last one hides errors and drops data.",
                    "It's ON ERROR RESUME NEXT for data ...",
                    "Seems like a bad default.",
                    "@maryamariyan, are you working on this issue for the 6/26 target ?",
                    "but I plan to start this on Thursday, 6/13.",
                    "I will unassign in case someone can pick this up earlier and can reassign back if it is available by then.",
                    "@ahsonkhan do we finally want to go with the `` last value wins'' approach ?",
                    "do we finally want to go with the `` last value wins'' approach ?",
                    "Trying to validate up front for duplicate property names and disallowing it would likely be too expensive ( in terms of perf ), so I don't think throwing by default is worth the trade-off.",
                    "@steveharter, let us know if you agree with that.",
                    "Trying to validate up front for duplicate property names and disallowing it would likely be too expensive ( in terms of perf )",
                    "Yes - the code should be changed to use last-value-wins via TryAdd or an indexer ( which doesn't throw, unlike Add ).",
                    "We could always add an opt-in option in the future to prevent duplicates.",
                    "Also offline discussion with @Anipik:",
                    "Determine semantics of Json.NET for duplicate properties.",
                    "Does it throw or allow ?",
                    "If it allows, for collectionsdictionaries what semantics does it have ?",
                    "Does it replace, add or ignore the items on the extra collectiondictionary ?",
                    "Add semantics to previous listcollection",
                    "Also we should see a perf improvement for dictionaries - please run some perf numbers for the dictionary change ( @layomia added some recent benchmarks ) and report on that.",
                    "Yes it does not throw, it follows last win approach",
                    "For collections it just replaces the collections and for dictionaries it concatenates the keys.",
                    "the behavior is same for System.Text.Json",
                    "please run some perf numbers for the dictionary change",
                    "I ran the performance numbers.",
                    "The change improves the performance by 5-8 percent for dictionaries and",
                    "for object the change doesn't affect the performance.",
                    "The size of the object and dictionary was 30 elements.",
                    "Currently the json tests are broken in performance so I just wrote new ones to test the change.",
                    "I was earlier getting a compile error that `` Not able to convert IO.Stream to generic type parameter''",
                    "but for some reason its no logger exists.",
                    "i will try to debug why it occured in the firstplace",
                    "PR dotnet/performance # 530 adding benchmarks for dictionary and other collections is not merged yet.",
                    "I'll work to check this in ASAP.",
                    "transferred this issue from dotnet/corefx",
                    "locked as resolved and limited conversation to collaborators",
                    "to subscribe to this conversation on GitHub.",
                    "Providing support for duplicate keys in dictionary",
                    "Add JsonDocumentOptions and use that instead of JsonReaderOptions.",
                    ""
                ],
                "title": "Deserializing duplicate JSON object keys to a dictionary \u00b7 Issue # 29567 \u00b7 dotnet/runtime \u00b7 GitHub"
            }
        ],
        "qa": [
            {
                "uid": "6737022",
                "link": "https://stackoverflow.com/questions/6737022",
                "title": "Parse JSON string to Dictionary&lt;String, Integer&gt; with Gson",
                "answers": [
                    {
                        "uid": 6742542,
                        "score": 18,
                        "text": [
                            "LINK makes what you're trying to do relatively easy.",
                            "Following is a working example."
                        ]
                    }
                ],
                "tags": [
                    "java",
                    "json",
                    "dictionary",
                    "gson"
                ]
            }
        ],
        "other": [
            {
                "link": "https://guides.codepath.com/android/converting-json-to-models",
                "type": "misc",
                "content": [
                    "Jump to SectionTable of ContentsOverviewFetching JSON ResultsSetting up our ModelPutting It All TogetherBonus: Setting Up Your AdapterConverting JSON to ModelsEdit PagePage HistoryOverview This guide describes the process of converting JSON data retrieved from a network request and converting that data to simple Model objects.",
                    "This approach will be compatible with nearly any basic data-driven application and fits well with any ORM solution for persistence such as DBFlow or SugarORM that may be introduced.",
                    "For this guide, we will be using the Yelp API as the example.",
                    "The goal of this guide is to perform a Yelp API Search and then process the results into Java objects which we can then use to populate information within our application.",
                    "The model in this case is Business and for our application, let's suppose we just need the name, phone, and image of the business which are all provided by the Search API.",
                    "Fetching JSON Results The first step in retrieving any API-based model data is to execute a network request to retrieve the JSON response that represents the underlying data that we want to use.",
                    "In this case, we want to execute a request to http://api.yelp.com/v2/search?term=food&location=San+Francisco and then this will return us a JSON dictionary that looks like:",
                    "Sending out this API request can be done in any number of ways but first requires us to register for a Yelp developer account and use OAuth 1.0 a to authenticate with our provided access_token.",
                    "You might for example use our rest-client-template to manage this authentication and then construct a YelpClient that has a search method:",
                    "This search method will take care of executing our JSON request to the Yelp API.",
                    "The API call might be executed in an Activity now when the user performs a search.",
                    "Executing the API request would look like:",
                    "We could now run the app and verify that the JSON array of business has the format we expect from the provided sample response in the documentation.",
                    "Setting up our Model The primary resource in the Yelp API is the Business.",
                    "Let's create a Java class that will act as the Business model in our application:",
                    "So far, the business model is just a series of declared fields and then getters to access those fields.",
                    "Next, we need to add method that would manage the deserialization of a JSON dictionary into a populated Business object:",
                    "With this method in place, we could take a single business JSON dictionary such as:",
                    "and successfully create a Business with Business.fromJson ( json ).",
                    "However, in the API response, we actually get a collection of business JSON in an array.",
                    "So ideally we also would have an easy way of processing an array of businesses into an ArrayList of Business objects.",
                    "With that in place, we can now pass an JSONArray of business json data and process that easily into a nice ArrayList object for easy use in our application with Business.fromJson ( myJsonArray ).",
                    "Putting It All Together Now, we can return to our Activity where we are executing the network request and use the new Model to get easy access to our Business data.",
                    "Let's tweak the network request handler in our activity:",
                    "This approach works very similarly for any simple API data which often is returned in collections whether it be images on Instagram, tweets on Twitter, or auctions on Ebay.",
                    "Bonus: Setting Up Your Adapter The next step might be to create an adapter and populate these new model objects into a ListView or RecyclerView.",
                    "For additional details on using adapters to display data in lists, see Using RecyclerView or Using ListView.",
                    "Jump to SectionTable of ContentsOverviewFetching JSON ResultsSetting up our ModelPutting It All TogetherBonus: Setting Up Your Adapter",
                    "Table of ContentsOverviewFetching JSON ResultsSetting up our ModelPutting It All TogetherBonus: Setting Up Your Adapter",
                    "Overview This guide describes the process of converting JSON data retrieved from a network request and converting that data to simple Model objects.",
                    ""
                ],
                "title": "Converting JSON to Models | CodePath Android Cliffnotes"
            }
        ]
    },
    "parsed": true
}