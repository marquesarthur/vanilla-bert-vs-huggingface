{
    "task": "Camera API: Cross device issues",
    "description": "I'm developing a camera app basically as part of a messaging app to attach images etc..\nThe app needs to work for > = SDK 2.2 and: I can't use the default Android Camera as much as I'd love to because:\nThe nature of the app dictates that the image should not be saved to disk ever and some OEMs ( Samsung ) love to do this without giving you a choice.\nI can't call an intent that any other camera app can intercept because then that app could save the image.\nMy current problem is dealing with the fact that the Android camera apparently hates being in portrait orientation.\nSpecifically, after some digging I'm monitoring the display and, on rotation, calling setDisplayOrientation ( 90 ).\nThis works but the surfaceview dimensions need to be altered also and this must be done within supported dimensions or the parameter setting crashes the app.\nI'm doing this with another SO snippet I found here ( the getBestPreviewSize ( ) method ) but it has one glaring problem that I can't believe I haven't found anyone else having.\nPart of the takePicture lifecycle involves calling the PostView picture callback.\nThis is what shows the still image of the current paused SurfaceView image that will be returned via byteArray to the raw and/or jpeg callback.\nMy problem is, this image is still skewed on a handful of seemingly random test devices !\nSo the behavior is a user sees a dynamic camera image in perfect 4:3 aspect ratio until they take the picture and the image they are presented with is squished.\nNote that the byte array itself is correct and when I construct the Bitmap at the messaging end point it shows up fine but this is still a problem.\nI can't see how I can alter the still image display at this point.\nCan anyone help me with this ?",
    "type": "SO",
    "link": "https://stackoverflow.com/questions/12736881",
    "question_id": "12736881",
    "resources": {
        "api": [
            {
                "link": "https://developer.android.com/guide/topics/media/camera",
                "type": "android",
                "content": [
                    "The Android framework includes support for various cameras and camera features available on devices, allowing you to capture pictures and videos in your applications.",
                    "This document discusses a quick, simple approach to image and video capture and outlines an advanced approach for creating custom camera experiences for your users.",
                    "Note: This page describes the Camera class, which has been deprecated.",
                    "We recommend using the CameraX Jetpack library or, for specific use cases, the camera2, class.",
                    "Both CameraX and Camera2 work on Android 5.0 ( API level 21 ) and higher.",
                    "Refer to the following related resources:",
                    "Before enabling your application to use cameras on Android devices, you should consider a few questions about how your app intends to use this hardware feature.",
                    "The Android framework supports capturing images and video through the android.hardware.camera2 API or camera Intent.",
                    "Here are the relevant classes:",
                    "Before starting development on your application with the Camera API, you should make sure your manifest has the appropriate declarations to allow use of camera hardware and other related features.",
                    "Note: If you are using the camera by invoking an existing camera app, your application does not need to request this permission.",
                    "For a list of camera features, see the manifest Features Reference.",
                    "Adding camera features to your manifest causes Google Play to prevent your application from being installed to devices that do not include a camera or do not support the camera features you specify.",
                    "For more information about using feature-based filtering with Google Play, see Google Play and Feature-Based Filtering.",
                    "If your application can use a camera or camera feature for proper operation, but does not require it, you should specify this in the manifest by including the android: required attribute, and setting it to false:",
                    "Location Permission - If your application tags images with GPS location information, you must request the ACCESS_FINE_LOCATION permission.",
                    "Note that, if your app targets Android 5.0 ( API level 21 ) or higher, you also need to declare that your app uses the device's GPS:",
                    "For more information about getting user location, see Location Strategies.",
                    "A quick way to enable taking pictures or videos in your application without a lot of extra code is to use an Intent to invoke an existing Android camera application.",
                    "The details are described in the training lessons Taking Photos Simply and Recording Videos Simply.",
                    "Some developers may require a camera user interface that is customized to the look of their application or provides special features.",
                    "Writing your own picture-taking code can provide a more compelling experience for your users.",
                    "Note: The following guide is for the older, deprecated Camera API.",
                    "For new or advanced camera applications, the newer android.hardware.camera2 API is recommended.",
                    "The general steps for creating a custom camera interface for your application are as follows:",
                    "Camera hardware is a shared resource that must be carefully managed so your application does not collide with other applications that may also want to use it.",
                    "The following sections discusses how to detect camera hardware, how to request access to a camera, how to capture pictures or video and how to release the camera when your application is done using it.",
                    "Caution: Remember to release the Camera object by calling the Camera.release ( ) when your application is done using it !",
                    "If your application does not properly release the camera, all subsequent attempts to access the camera, including those by your own application, will fail and may cause your or other applications to be shut down.",
                    "If your application does not specifically require a camera using a manifest declaration, you should check to see if a camera is available at runtime.",
                    "To perform this check, use the PackageManager.hasSystemFeature ( ) method, as shown in the example code below:",
                    "Android devices can have multiple cameras, for example a back-facing camera for photography and a front-facing camera for video calls.",
                    "Android 2.3 ( API Level 9 ) and later allows you to check the number of cameras available on a device using the Camera.getNumberOfCameras ( ) method.",
                    "If you have determined that the device on which your application is running has a camera, you must request to access it by getting an instance of Camera ( unless you are using an intent to access the camera ).",
                    "To access the primary camera, use the Camera.open ( ) method and be sure to catch any exceptions, as shown in the code below:",
                    "Caution: Always check for exceptions when using Camera.open ( ).",
                    "Failing to check for exceptions if the camera is in use or does not exist will cause your application to be shut down by the system.",
                    "On devices running Android 2.3 ( API Level 9 ) or higher, you can access specific cameras using Camera.open ( int ).",
                    "The example code above will access the first, back-facing camera on a device with more than one camera.",
                    "Once you obtain access to a camera, you can get further information about its capabilities using the Camera.getParameters ( ) method and checking the returned Camera.Parameters object for supported capabilities.",
                    "When using API Level 9 or higher, use the Camera.getCameraInfo ( ) to determine if a camera is on the front or back of the device, and the orientation of the image.",
                    "For users to effectively take pictures or video, they must be able to see what the device camera sees.",
                    "A camera preview class is a SurfaceView that can display the live image data coming from a camera, so users can frame and capture a picture or video.",
                    "The following example code demonstrates how to create a basic camera preview class that can be included in a View layout.",
                    "This class implements SurfaceHolder.Callback in order to capture the callback events for creating and destroying the view, which are needed for assigning the camera preview input.",
                    "If you want to set a specific size for your camera preview, set this in the surfaceChanged ( ) method as noted in the comments above.",
                    "When setting preview size, you must use values from getSupportedPreviewSizes ( ).",
                    "Do not set arbitrary values in the setPreviewSize ( ) method.",
                    "Note: With the introduction of the Multi-Window feature in Android 7.0 ( API level 24 ) and higher, you can no longer assume the aspect ratio of the preview is the same as your activity even after calling setDisplayOrientation ( ).",
                    "Depending on the window size and aspect ratio, you may may have to fit a wide camera preview into a portrait-orientated layout, or vice versa, using a letterbox layout.",
                    "A camera preview class, such as the example shown in the previous section, must be placed in the layout of an activity along with other user interface controls for taking a picture or video.",
                    "This section shows you how to build a basic layout and activity for the preview.",
                    "The following layout code provides a very basic view that can be used to display a camera preview.",
                    "In this example, the FrameLayout element is meant to be the container for the camera preview class.",
                    "This layout type is used so that additional picture information or controls can be overlaid on the live camera preview images.",
                    "On most devices, the default orientation of the camera preview is landscape.",
                    "This example layout specifies a horizontal ( landscape ) layout and the code below fixes the orientation of the application to landscape.",
                    "For simplicity in rendering a camera preview, you should change your application's preview activity orientation to landscape by adding the following to your manifest.",
                    "Note: A camera preview does not have to be in landscape mode.",
                    "Starting in Android 2.2 ( API Level 8 ), you can use the setDisplayOrientation ( ) method to set the rotation of the preview image.",
                    "In order to change preview orientation as the user re-orients the phone, within the surfaceChanged ( ) method of your preview class, first stop the preview with Camera.stopPreview ( ) change the orientation and then start the preview again with Camera.startPreview ( ).",
                    "In the activity for your camera view, add your preview class to the FrameLayout element shown in the example above.",
                    "Your camera activity must also ensure that it releases the camera when it is paused or shut down.",
                    "The following example shows how to modify a camera activity to attach the preview class shown in Creating a preview class.",
                    "Note: The getCameraInstance ( ) method in the example above refers to the example method shown in Accessing cameras.",
                    "Once you have built a preview class and a view layout in which to display it, you are ready to start capturing images with your application.",
                    "In your application code, you must set up listeners for your user interface controls to respond to a user action by taking a picture.",
                    "In order to retrieve a picture, use the Camera.takePicture ( ) method.",
                    "This method takes three parameters which receive data from the camera.",
                    "In order to receive data in a JPEG format, you must implement an Camera.PictureCallback interface to receive the image data and write it to a file.",
                    "The following code shows a basic implementation of the Camera.PictureCallback interface to save an image received from the camera.",
                    "Trigger capturing an image by calling the Camera.takePicture ( ) method.",
                    "The following example code shows how to call this method from a button View.OnClickListener.",
                    "Note: The mPicture member in the following example refers to the example code above.",
                    "For information about how to release the camera, see Releasing the camera.",
                    "Video capture using the Android framework requires careful management of the Camera object and coordination with the MediaRecorder class.",
                    "When recording video with Camera, you must manage the Camera.lock ( ) and Camera.unlock ( ) calls to allow MediaRecorder access to the camera hardware, in addition to the Camera.open ( ) and Camera.release ( ) calls.",
                    "Note: Starting with Android 4.0 ( API level 14 ), the Camera.lock ( ) and Camera.unlock ( ) calls are managed for you automatically.",
                    "Unlike taking pictures with a device camera, capturing video requires a very particular call order.",
                    "You must follow a specific order of execution to successfully prepare for and capture video with your application, as detailed below.",
                    "Caution: You must call these MediaRecorder configuration methods in this order, otherwise your application will encounter errors and the recording will fail.",
                    "Note: It is possible to use MediaRecorder without creating a camera preview first and skip the first few steps of this process.",
                    "However, since users typically prefer to see a preview before starting a recording, that process is not discussed here.",
                    "Tip: If your application is typically used for recording video, set setRecordingHint ( boolean ) to true prior to starting your preview.",
                    "This setting can help reduce the time it takes to start recording.",
                    "When using the MediaRecorder class to record video, you must perform configuration steps in a specific order and then call the MediaRecorder.prepare ( ) method to check and implement the configuration.",
                    "The following example code demonstrates how to properly configure and prepare the MediaRecorder class for video recording.",
                    "Prior to Android 2.2 ( API Level 8 ), you must set the output format and encoding formats parameters directly, instead of using CamcorderProfile.",
                    "This approach is demonstrated in the following code:",
                    "The following video recording parameters for MediaRecorder are given default settings, however, you may want to adjust these settings for your application:",
                    "When starting and stopping video recording using the MediaRecorder class, you must follow a specific order, as listed below.",
                    "The following example code demonstrates how to wire up a button to properly start and stop video recording using the camera and the MediaRecorder class.",
                    "Note: When completing a video recording, do not release the camera or else your preview will be stopped.",
                    "Note: In the above example, the prepareVideoRecorder ( ) method refers to the example code shown in Configuring MediaRecorder.",
                    "This method takes care of locking the camera, configuring and preparing the MediaRecorder instance.",
                    "Cameras are a resource that is shared by applications on a device.",
                    "Your application can make use of the camera after getting an instance of Camera, and you must be particularly careful to release the camera object when your application stops using it, and as soon as your application is paused ( Activity.onPause ( ) ).",
                    "To release an instance of the Camera object, use the Camera.release ( ) method, as shown in the example code below.",
                    "Caution: If your application does not properly release the camera, all subsequent attempts to access the camera, including those by your own application, will fail and may cause your or other applications to be shut down.",
                    "Media files created by users such as pictures and videos should be saved to a device's external storage directory ( SD Card ) to conserve system space and to allow users to access these files without their device.",
                    "There are many possible directory locations to save media files on a device, however there are only two standard locations you should consider as a developer:",
                    "The following example code demonstrates how to create a File or Uri location for a media file that can be used when invoking a device's camera with an Intent or as part of a Building a Camera App.",
                    "Note: Environment.getExternalStoragePublicDirectory ( ) is available in Android 2.2 ( API Level 8 ) or higher.",
                    "If you are targeting devices with earlier versions of Android, use Environment.getExternalStorageDirectory ( ) instead.",
                    "For more information, see Saving Shared Files.",
                    "To make the URI support work profiles, first convert the file URI to a content URI.",
                    "Then, add the content URI to EXTRA_OUTPUT of an Intent.",
                    "For more information about saving files on an Android device, see Data Storage.",
                    "Android supports a wide array of camera features you can control with your camera application, such as picture format, flash mode, focus settings, and many more.",
                    "This section lists the common camera features, and briefly discusses how to use them.",
                    "Most camera features can be accessed and set using the through Camera.Parameters object.",
                    "However, there are several important features that require more than simple settings in Camera.Parameters.",
                    "These features are covered in the following sections:",
                    "For general information about how to use features that are controlled through Camera.Parameters, review the Using camera features section.",
                    "For more detailed information about how to use features controlled through the camera parameters object, follow the links in the feature list below to the API reference documentation.",
                    "Common camera features sorted by the Android API Level in which they were introduced.",
                    "Note: These features are not supported on all devices due to hardware differences and software implementation.",
                    "For information on checking the availability of features on the device where your application is running, see Checking feature availability.",
                    "The first thing to understand when setting out to use camera features on Android devices is that not all camera features are supported on all devices.",
                    "In addition, devices that support a particular feature may support them to different levels or with different options.",
                    "Therefore, part of your decision process as you develop a camera application is to decide what camera features you want to support and to what level.",
                    "After making that decision, you should plan on including code in your camera application that checks to see if device hardware supports those features and fails gracefully if a feature is not available.",
                    "You can check the availability of camera features by getting an instance of a camera's parameters object, and checking the relevant methods.",
                    "The following code sample shows you how to obtain a Camera.Parameters object and check if the camera supports the autofocus feature:",
                    "You can use the technique shown above for most camera features.",
                    "The Camera.Parameters object provides a getSupported ... ( ), is ... Supported ( ) or getMax ... ( ) method to determine if ( and to what extent ) a feature is supported.",
                    "If your application requires certain camera features in order to function properly, you can require them through additions to your application manifest.",
                    "When you declare the use of specific camera features, such as flash and auto-focus, Google Play restricts your application from being installed on devices which do not support these features.",
                    "For a list of camera features that can be declared in your app manifest, see the manifest Features Reference.",
                    "Most camera features are activated and controlled using a Camera.Parameters object.",
                    "You obtain this object by first getting an instance of the Camera object, calling the getParameters ( ) method, changing the returned parameter object and then setting it back into the camera object, as demonstrated in the following example code:",
                    "This technique works for nearly all camera features, and most parameters can be changed at any time after you have obtained an instance of the Camera object.",
                    "Changes to parameters are typically visible to the user immediately in the application's camera preview.",
                    "On the software side, parameter changes may take several frames to actually take effect as the camera hardware processes the new instructions and then sends updated image data.",
                    "Important: Some camera features can not be changed at will.",
                    "In particular, changing the size or orientation of the camera preview requires that you first stop the preview, change the preview size, and then restart the preview.",
                    "Starting with Android 4.0 ( API Level 14 ) preview orientation can be changed without restarting the preview.",
                    "Other camera features require more code in order to implement, including:",
                    "A quick outline of how to implement these features is provided in the following sections.",
                    "In some photographic scenarios, automatic focusing and light metering may not produce the desired results.",
                    "Starting with Android 4.0 ( API Level 14 ), your camera application can provide additional controls to allow your app or users to specify areas in an image to use for determining focus or light level settings and pass these values to the camera hardware for use in capturing images or video.",
                    "Areas for metering and focus work very similarly to other camera features, in that you control them through methods in the Camera.Parameters object.",
                    "The following code demonstrates setting two light metering areas for an instance of Camera:",
                    "The Camera.Area object contains two data parameters: A Rect object for specifying an area within the camera's field of view and a weight value, which tells the camera what level of importance this area should be given in light metering or focus calculations.",
                    "The Rect field in a Camera.Area object describes a rectangular shape mapped on a 2000 x 2000 unit grid.",
                    "The coordinates -1000, -1000 represent the top, left corner of the camera image, and coordinates 1000, 1000 represent the bottom, right corner of the camera image, as shown in the illustration below.",
                    "The red lines illustrate the coordinate system for specifying a Camera.Area within a camera preview.",
                    "The blue box shows the location and shape of an camera area with the Rect values 333,333,667,667.",
                    "The bounds of this coordinate system always correspond to the outer edge of the image visible in the camera preview and do not shrink or expand with the zoom level.",
                    "Similarly, rotation of the image preview using Camera.setDisplayOrientation ( ) does not remap the coordinate system.",
                    "For pictures that include people, faces are usually the most important part of the picture, and should be used for determining both focus and white balance when capturing an image.",
                    "The Android 4.0 ( API Level 14 ) framework provides APIs for identifying faces and calculating picture settings using face recognition technology.",
                    "Note: While the face detection feature is running, setWhiteBalance ( String ), setFocusAreas ( List <Camera.Area> ) and setMeteringAreas ( List <Camera.Area> ) have no effect.",
                    "Using the face detection feature in your camera application requires a few general steps:",
                    "The face detection feature is not supported on all devices.",
                    "You can check that this feature is supported by calling getMaxNumDetectedFaces ( ).",
                    "An example of this check is shown in the startFaceDetection ( ) sample method below.",
                    "In order to be notified and respond to the detection of a face, your camera application must set a listener for face detection events.",
                    "In order to do this, you must create a listener class that implements the Camera.FaceDetectionListener interface as shown in the example code below.",
                    "After creating this class, you then set it into your application's Camera object, as shown in the example code below:",
                    "Your application must start the face detection function each time you start ( or restart ) the camera preview.",
                    "Create a method for starting face detection so you can call it as needed, as shown in the example code below.",
                    "You must start face detection each time you start ( or restart ) the camera preview.",
                    "If you use the preview class shown in Creating a preview class, add your startFaceDetection ( ) method to both the surfaceCreated ( ) and surfaceChanged ( ) methods in your preview class, as shown in the sample code below.",
                    "Note: Remember to call this method after calling startPreview ( ).",
                    "Do not attempt to start face detection in the onCreate ( ) method of your camera app's main activity, as the preview is not available by this point in your application's the execution.",
                    "Time lapse video allows users to create video clips that combine pictures taken a few seconds or minutes apart.",
                    "This feature uses MediaRecorder to record the images for a time lapse sequence.",
                    "To record a time lapse video with MediaRecorder, you must configure the recorder object as if you are recording a normal video, setting the captured frames per second to a low number and using one of the time lapse quality settings, as shown in the code example below.",
                    "These settings must be done as part of a larger configuration procedure for MediaRecorder.",
                    "For a full configuration code example, see Configuring MediaRecorder.",
                    "Once the configuration is complete, you start the video recording as if you were recording a normal video clip.",
                    "For more information about configuring and running MediaRecorder, see Capturing videos.",
                    "The Camera2Video and HdrViewfinder samples further demonstrate the use of the APIs covered on this page.",
                    "Apps running Android 10 ( API level 29 ) or higher must have the CAMERA permission in order to access the values of the following fields that the getCameraCharacteristics ( ) method returns:",
                    "To download sample apps, see the Camera2Basic sample and Official CameraX sample app.",
                    "Data and file storage overview",
                    "Camera Requirement - Is the use of a camera so important to your application that you do not want your application installed on a device that does not have a camera ?",
                    "If so, you should declare the camera requirement in your manifest.",
                    "Quick Picture or Customized Camera - How will your application use the camera ?",
                    "Are you just interested in snapping a quick picture or video clip, or will your application provide a new way to use cameras ?",
                    "For getting a quick snap or clip, consider Using Existing Camera Apps.",
                    "For developing a customized camera feature, check out the Building a Camera App section.",
                    "Foreground Services Requirement - When does your app interact with the camera ?",
                    "On Android 9 ( API level 28 ) and later, apps running in the background can not access the camera.",
                    "Therefore, you should use the camera either when your app is in the foreground or as part of a foreground service.",
                    "Storage - Are the images or videos your application generates intended to be only visible to your application or shared so that other applications such as Gallery or other media and social apps can use them ?",
                    "Do you want the pictures and videos to be available even if your application is uninstalled ?",
                    "Check out the Saving Media Files section to see how to implement these options.",
                    "Camera Permission - Your application must request permission to use a device camera.",
                    "Camera Features - Your application must also declare use of camera features, for example: For a list of camera features, see the manifest Features Reference.",
                    "Storage Permission - Your application can save images or videos to the device's external storage ( SD Card ) if it targets Android 10 ( API level 29 ) or lower and specifies the following in the manifest.",
                    "Audio Recording Permission - For recording audio with video capture, your application must request the audio capture permission.",
                    "Note that, if your app targets Android 5.0 ( API level 21 ) or higher, you also need to declare that your app uses the device's GPS: For more information about getting user location, see Location Strategies.",
                    "Detect and Access Camera - Create code to check for the existence of cameras and request access.",
                    "Create a Preview Class - Create a camera preview class that extends SurfaceView and implements the SurfaceHolder interface.",
                    "This class previews the live images from the camera.",
                    "Build a Preview Layout - Once you have the camera preview class, create a view layout that incorporates the preview and the user interface controls you want.",
                    "Setup Listeners for Capture - Connect listeners for your interface controls to start image or video capture in response to user actions, such as pressing a button.",
                    "Capture and Save Files - Setup the code for capturing pictures or videos and saving the output.",
                    "Release the Camera - After using the camera, your application must properly release it for use by other applications.",
                    "Open Camera - Use the Camera.open ( ) to get an instance of the camera object.",
                    "Connect Preview - Prepare a live camera image preview by connecting a SurfaceView to the camera using Camera.setPreviewDisplay ( ).",
                    "Start Preview - Call Camera.startPreview ( ) to begin displaying the live camera images.",
                    "Start Recording Video - The following steps must be completed in order to successfully record video: Unlock the Camera - Unlock the camera for use by MediaRecorder by calling Camera.unlock ( ).",
                    "Configure MediaRecorder - Call in the following MediaRecorder methods in this order.",
                    "For more information, see the MediaRecorder reference documentation.",
                    "setCamera ( ) - Set the camera to be used for video capture, use your application's current instance of Camera.",
                    "setAudioSource ( ) - Set the audio source, use MediaRecorder.AudioSource.CAMCORDER.",
                    "setVideoSource ( ) - Set the video source, use MediaRecorder.VideoSource.CAMERA.",
                    "Set the video output format and encoding.",
                    "For Android 2.2 ( API Level 8 ) and higher, use the MediaRecorder.setProfile method, and get a profile instance using CamcorderProfile.get ( ).",
                    "For versions of Android prior to 2.2, you must set the video output format and encoding parameters: setOutputFormat ( ) - Set the output format, specify the default setting or MediaRecorder.OutputFormat.MPEG _ 4.",
                    "setAudioEncoder ( ) - Set the sound encoding type, specify the default setting or MediaRecorder.AudioEncoder.AMR _ NB.",
                    "setVideoEncoder ( ) - Set the video encoding type, specify the default setting or MediaRecorder.VideoEncoder.MPEG _ 4_SP.",
                    "setOutputFile ( ) - Set the output file, use getOutputMediaFile ( MEDIA_TYPE_VIDEO ).",
                    "toString ( ) from the example method in the Saving Media Files section.",
                    "setPreviewDisplay ( ) - Specify the SurfaceView preview layout element for your application.",
                    "Use the same object you specified for Connect Preview.",
                    "Prepare MediaRecorder - Prepare the MediaRecorder with provided configuration settings by calling MediaRecorder.prepare ( ).",
                    "Start MediaRecorder - Start recording video by calling MediaRecorder.start ( ).",
                    "Unlock the Camera - Unlock the camera for use by MediaRecorder by calling Camera.unlock ( ).",
                    "setOutputFormat ( ) - Set the output format, specify the default setting or MediaRecorder.OutputFormat.MPEG _ 4.",
                    "Stop Recording Video - Call the following methods in order, to successfully complete a video recording: Stop MediaRecorder - Stop recording video by calling MediaRecorder.stop ( ).",
                    "Reset MediaRecorder - Optionally, remove the configuration settings from the recorder by calling MediaRecorder.reset ( ).",
                    "Release MediaRecorder - Release the MediaRecorder by calling MediaRecorder.release ( ).",
                    "Lock the Camera - Lock the camera so that future MediaRecorder sessions can use it by calling Camera.lock ( ).",
                    "Starting with Android 4.0 ( API level 14 ), this call is not required unless the MediaRecorder.prepare ( ) call fails.",
                    "Stop MediaRecorder - Stop recording video by calling MediaRecorder.stop ( ).",
                    "Stop the Preview - When your activity has finished using the camera, stop the preview using Camera.stopPreview ( ).",
                    "Release Camera - Release the camera so that other applications can use it by calling Camera.release ( ).",
                    "Unlock the camera with Camera.unlock ( )",
                    "Configure MediaRecorder as shown in the code example above",
                    "Start recording using MediaRecorder.start ( )",
                    "Stop recording using MediaRecorder.stop ( )",
                    "Release the media recorder with MediaRecorder.release ( )",
                    "Lock the camera using Camera.lock ( )",
                    "Environment.getExternalStoragePublicDirectory ( Environment.DIRECTORY _ PICTURES ) - This method returns the standard, shared and recommended location for saving pictures and videos.",
                    "This directory is shared ( public ), so other applications can easily discover, read, change and delete files saved in this location.",
                    "If your application is uninstalled by the user, media files saved to this location will not be removed.",
                    "To avoid interfering with users existing pictures and videos, you should create a sub-directory for your application's media files within this directory, as shown in the code sample below.",
                    "This method is available in Android 2.2 ( API Level 8 ), for equivalent calls in earlier API versions, see Saving Shared Files.",
                    "Context.getExternalFilesDir ( Environment.DIRECTORY _ PICTURES ) - This method returns a standard location for saving pictures and videos which are associated with your application.",
                    "If your application is uninstalled, any files saved in this location are removed.",
                    "Security is not enforced for files in this location and other applications may read, change and delete them.",
                    "Check that face detection is supported on the device",
                    "Create a face detection listener",
                    "Add the face detection listener to your camera object",
                    "Start face detection after preview ( and after every preview restart )",
                    ""
                ],
                "title": "Camera API \u00a0|\u00a0 Android Developers"
            }
        ],
        "git": [
            {
                "link": "https://github.com/codenameone/CodenameOne/issues/2596",
                "content": [
                    "RFE + BUG report: I need a full working low level camera API \u00b7 Issue # 2596 \u00b7 codenameone/CodenameOne \u00b7 GitHub",
                    "RFE + BUG report: I need a full working low level camera API",
                    "RFE ( I understand that requires a big effort )",
                    "On the blog post `` Camera Kit - Low Level Camera API'' you wrote: `` As a sidenote the reason we picked up this task is because an enterprise customer asked for this -LSB- ... -RSB- I would love to see ports of this to other Codename One platforms and the simulator.",
                    "We'll take a look at these as we move forward based on user demand''.",
                    "In the Github page, you wrote: `` Important: not all API's are implemented in a cross platform way at this time as this cn1lib is highly experimental.",
                    "Basic things might not work ...''",
                    "I, too, am an enterprise user: because my employers asked me to develop an app in which an advanced use of the camera is a crucial request, I need that this cn1lib will be developed from an alpha stage to a stable full working stage, at least in Android and iOS, better if also in the Simulator and in the Javascript port.",
                    "It's very important for me ...",
                    "and it could be also a benefit for all the other Codename One developers.",
                    "Said that, the demo code in the Github page doesn't work for me.",
                    "I wrote a simpler code, which purpose is to show the camera background in the center of a BorderLayout.CENTER _ BEHAVIOR_TOTAL_BELOW ( my idea is to place components over it ).",
                    "I tried the code at the bottom of this post, but there are these issues:",
                    "After tapping on `` Show Camera'' on Android 7, the permissions are asked, after that it shows back to the first form ; after tapping on `` Show Camera'' again, a blank black screen is shown ( except for a small white square on the top, in place of the close button ) ; if you tap that small white square and then tap `` Show Camera'' again, you will get the working background of the camera, but also this crash report:",
                    "-LSB- EDT -RSB- 0:0:1,925 - The device has one or more cameras",
                    "-LSB- EDT -RSB- 0:0:1,995 - We use the native access to the camera",
                    "-LSB- EDT -RSB- 0:0:17,294 - The device has one or more cameras",
                    "-LSB- EDT -RSB- 0:0:17,296 - We use the native access to the camera",
                    "-LSB- EDT -RSB- 0:1:19,519 - The device has one or more cameras",
                    "-LSB- EDT -RSB- 0:1:19,557 - We use the native access to the camera",
                    "-LSB- main -RSB- 0:1:19,713 - Exception: java.lang.RuntimeException - setParameters failed java.lang.RuntimeException: setParameters failed at",
                    "On iPhone X, tapping on `` Show Camera'' produces a blank white screen ...",
                    "There is no permissions request.",
                    "My build hints are the following.",
                    "They are slightly different from the ones added by the cn1lib, because I removed the androidSdkTool version 27 ( because it's the current default ), I updated the camerakit version from 0.13.1 to 0.13.2 ( I also tried the current beta of the 1.0.0 version, but it doesn't compile ), I removed the 32bit compiling for iOS and I added a keepclasseswithmembers to proguard ( as suggested in the web site of camera kit ):",
                    "The text was updated successfully, but these errors were encountered:",
                    "We've taken a bit of time with this since camera kit which was pending 1.0 back when we built the cn1lib is still ...",
                    "pending 1.0.",
                    "They are working on it but it's taking forever as camera on Android is just horrible.",
                    "We'll try to align the library to the latest 1.0 branch.",
                    "We have a test iPhone X device so I'll check on that as well.",
                    "Having spent a lot of time trying to fix this I've come to the conclusion that camerakit is just unworkable.",
                    "They dropped support for video which was one of the main reasons I picked them up in the first place.",
                    "They adopted androidx which is way too early to do so.",
                    "Despite multiple promises they can't commit to a 1.0 version.",
                    "They broke API's which meant I had to break a lot and still couldn't get it working because of the androidx nonsense.",
                    "I can see two options moving forward:",
                    "Use our own code - possibly directly on the Camera2 API.",
                    "This is a notoriously bad API and it requires Android 5.0 or newer.",
                    "I'm not too concerned about the latter as Android 5.0 is already 90 % of the market as of now.",
                    "The former might be a pain but having used these libraries I'm not sure how much worse it can get",
                    "Find another library - I looked at https://github.com/infinum/Android-GoldenEye One of the problems with CameraKit is that it's written in native code.",
                    "That makes it hard to use and flaky.",
                    "GoldenEye is in Kotlin which makes it harder to deal with from the Java side.",
                    "So it's an improvement but not by much",
                    "I'll give this some thought but it won't make it to 6.0.",
                    "Thank you Shai for the time that you already spent for this BIG issue.",
                    "Of course, this RFE plus # 2702 and # 2696 are like only one RFE.",
                    "I hope in you and in Steve.",
                    "As I told, an advanced use of the camera is a crucial request for my social app, but I'm not able to write a so complex cn1lib for Android, iOS and Javascript by myself.",
                    "If it's difficult for you, it's quite impossible for me: I learnt Java to use Codename One, but writing native interfaces like this require a lot bigger know-how than mine.",
                    "Thank you for your help.",
                    "I'll wait for some good news from you.",
                    "We'll place it as a priority task early in the 7.0 cycle",
                    "RFE: API to choose resolution to capture photos",
                    "Changed android to use GoldenEye codenameone/CodenameOne # 2596",
                    "I have updated CameraKit to use GoldenEye and it appears to be working.",
                    "It needs to use SDK 28, which is not on the build server yet.",
                    "Hopefully this will be working for the update on Friday.",
                    "Do you mean that now CameraKit works correctly on Android, iPhone and Javascript ?",
                    "Have you tested all the platforms with all the APIs of CameraKit ?",
                    "I hope so, that sounds very great and a very important news.",
                    "What is the minimum supported Android version ?",
                    "For GoldenEye, are you referring to https://github.com/infinum/Android-GoldenEye/blob/master/README.md ?",
                    "Now CameraKit works on Android native.",
                    "It already works on Javascript.",
                    "I haven't tested on iOS yet.",
                    "There may be some APIs that don't work.",
                    "I need to do additional testing.",
                    "I'm using the CameraKitSample as my test bed.",
                    "And so far I've only been testing the ability to record video, take photos, and change between front and back cameras.",
                    "It needs to be fleshed out further to test the rest of the APIs.",
                    "I'm testing right now with a Nexus 5 on Android 6.",
                    "It is building with minSDK = 15 and targetSDK = 28.",
                    "Servers should have the latest SDK's now and the cn1lib change should be up in the extension manager.",
                    "I'm working on the iOS version now.",
                    "It has a few issues that need to be sorted out.",
                    "I should have this fixed up for the next release ( next Friday ).",
                    "I have just committed the latest changes to the camera kit.",
                    "The sample app is now working in iOS, Android, Simulator ( still photos only ), and Javascript.",
                    "On ios is requires the ios.NSCameraUsageDescription, and ios.NSMicrophoneUsageDescription build hints to be present.",
                    "If you run it in the simulator, it will add these hints automatically.",
                    "The latest cn1lib will be in CodenameOne settings soon.",
                    "Thank you !",
                    "I understand that you done an hard work.",
                    "So is it now fully working and ready for a stable app ?",
                    "ready for a stable app ?",
                    "I've only been working with sample apps so far.",
                    "If you run into problems, please post them in the issue tracker.",
                    ""
                ],
                "title": "RFE + BUG report: I need a full working low level camera API \u00b7 Issue # 2596 \u00b7 codenameone/CodenameOne \u00b7 GitHub"
            }
        ],
        "qa": [
            {
                "uid": "6756888",
                "link": "https://stackoverflow.com/questions/6756888",
                "title": "Android Camera Image Size",
                "answers": [
                    {
                        "uid": 6757035,
                        "score": 19,
                        "text": [
                            "You can use setPictureSize -LRB- -RRB- on the camera parameters object to configure the size of the capture:",
                            "LINK, int -RRB-",
                            "Generally speaking first you should call getSupportedPictureSizes -LRB- -RRB- to make sure you're asking for a resolution that the hardware supports, but sounds like you already know the sizes."
                        ]
                    },
                    {
                        "uid": 8118971,
                        "score": 5,
                        "text": [
                            "put this code",
                            "in your surfaceCreated function after calling",
                            "you have found your solution ..."
                        ]
                    },
                    {
                        "uid": 27522420,
                        "score": 0,
                        "text": [
                            "en Click LINK",
                            "ch Click LINK",
                            "I have same problem in my work.",
                            "I use that to solution my problem.",
                            "for example i use undercode in my SurfaceView -LRB- CameraPreview -RRB-"
                        ]
                    }
                ],
                "tags": [
                    "android",
                    "image",
                    "camera",
                    "image-size"
                ]
            }
        ],
        "other": [
            {
                "link": "https://dzone.com/articles/mobile-landscape-cross",
                "type": "misc",
                "content": [
                    "Thanks for visiting DZone today,",
                    "How to Post to DZone",
                    "Over 2 million developers have joined DZone.",
                    "DZone > Java Zone > The Mobile Landscape: Cross-Platform Problems and Solutions",
                    "The Mobile Landscape: Cross-Platform Problems and Solutions",
                    "Jun. 11, 14 \u00b7 Java Zone",
                    "Join the DZone community and get the full member experience.",
                    "This article was originally published in DZone's 2014 Guide to Mobile Development",
                    "Mobile development has become a ubiquitous part of the software industry, and most developers understand the central dilemma organizations face when building a mobile app: cross-platform development.",
                    "What options exist for deploying an app to multiple platforms simultaneously ?",
                    "What are the strengths and weaknesses of each platform ?",
                    "The backbone of mobile development is the native application, but there are a growing number of alternatives: web apps provide a browser-based solution, hybrid apps leverage web development skills in a native package, and code translators apply one platform's native development skillset to the codebase of another.",
                    "However, the differences can be subtle, and every option carries its own set of drawbacks.",
                    "NATIVE DEVELOPMENT Native applications are built from the ground up for a specific platform and tailored to fit it.",
                    "The precise, platform-centered nature of native development means that these apps have no limits in terms of access to APIs and device features, performance optimization, and platform-specific best practices for user interface design.",
                    "Ideally, every mobile app would be built this way: to suit its exact purpose while utilizing all of the available resources.",
                    "One of the major benefits of native mobile development is the availability of resources.",
                    "For example, developers targeting Android have the Android Software Development Kit ( SDK ) at their disposal, which includes a suite of tools to streamline the development process: the SDK Manager condenses updates and tool installations into a single menu, the AVD Manager provides access to the Android Emulator and other virtual devices, and the Dalvik Debug Monitor Server ( DDMS ) is a powerful debugging tool, just to name a few.",
                    "iOS and Windows Phone developers have similar toolsets available in their SDKs, covering everything from the UI and device feature tools of Cocoa Touch in the iOS SDK to the real world testing conditions of the Simulation Dashboard for Windows Phone 8.",
                    "These toolsets make native SDKs invaluable and thorough resources.",
                    "Unfortunately, the native SDKs are all robust toolsets that a native developer has to learn for each platform.",
                    "To develop native apps from scratch ( rather than through an intermediate tool ), developers must be skilled with the required language, IDE, and development tools for each targeted platform, and if developers with diverse skillsets are not available, additional developers must be hired.",
                    "This can be a serious problem, given the increasing push to develop on multiple platforms.",
                    "For example, according to DZone's 2014 Mobile Developer Survey, 62 % of respondents targeted both Android and iOS.",
                    "The economic constraints of native development are a major factor in the growing popularity of web apps, hybrid apps, code translators, and Mobile Application Development Platforms ( MADPs ), which allow developers to reach multiple platforms with just one tooling ecosystem.",
                    "WEB APPS The skillset for building a basic mobile web app is more common than that of native development.",
                    "Essentially, mobile web apps are just regular websites optimized to look good and function well on mobile devices, and they can provide a quality app-like experience if the developer is very skilled in web technologies.",
                    "Widely understood front-end web development languages such as HTML, CSS, and JavaScript provide the logic behind a web app, and there are plenty of tools and libraries out there to help web developers direct their skills toward mobile devices.",
                    "jQuery Mobile and Sencha Touch are two examples of mobile web frameworks that provide UI components and logic for sliders, swipes, and other touch-activated controls that are common to native mobile applications.",
                    "The community around open source web technologies is another key difference between native and web development.",
                    "Web technologies like Node.js and AngularJS are some of the most popular projects in the open source community according to GitHub statistics.",
                    "This suggests that the community support and knowledge base around web technologies is broader than native technologies.",
                    "In addition to being a more common skill set, mobile web development can also solve a fundamental issue with native application development.",
                    "Aside from possible browser compatibility issues, web apps present a near-universal cross-platform option.",
                    "Most APIs and hardware features will not be accessible by web apps, and because they are not discrete applications in the same way that native apps are, web apps can not be distributed through common means, such as Apple's App Store and Google's Android Marketplace.",
                    "Web apps may be a particularly flexible option, but they lack a presence on fundamental mobile distribution.",
                    "HYBRID APPS Many of the drawbacks for web apps are alleviated by another cross-platform option built on the same core web development skillset: the hybrid app.",
                    "Like web apps, hybrid apps require web development skills, but unlike web apps, they include some native features to allow greater flexibility.",
                    "It gets the name hybrid because it is built with web languages and technologies at its core.",
                    "With the help of a native packaging tool, it can be deployed just like a native app and access more native device capabilities ( device APIs ) than a pure web application.",
                    "A hybrid app is created by first coding the application to run in the device's native webview, which is basically a stripped-down version of the browser.",
                    "For iOS this view is called UIWebView, while on Android it's called WebView.",
                    "This view can present the HTML and JavaScript files in a full-screen format, and pure web apps can achieve this full-screen view as well.",
                    "WebKit is the most commonly targeted browser rendering engine because it is used on iOS, Android, and Blackberry.",
                    "Where a web app really starts to become a hybrid app is when the app is placed inside of a native wrapper, which packages the hybrid app as a discrete application and makes it viable for app store distribution.",
                    "In addition to the native wrapper, a native bridge allows the app to communicate with device APIs, such as alarm settings, accelerometers, and cameras.",
                    "The native bridge is an abstraction layer that exposes the device APIs to the hybrid app as a JavaScript API.",
                    "This is one feature that clearly separates hybrid and pure web apps, because web apps are unable to pass through the security structures between the browser and native device APIs.",
                    "Access to many of the hardware features on mobile devices makes hybrid apps feel more like native apps than web apps from the user perspective.",
                    "MADPS AND CODE TRANSLATORS Some tools can go even further in terms of taking a single codebase and deploying it on multiple mobile platforms.",
                    "MADPs are development tools, sometimes including a mobile middleware server, that build hybrid or native apps for each platform using one codebase.",
                    "Some MADPs, such as Appcelerator's Titanium and Trigger.io, can take advantage of native elements where native is necessary or higher performing.",
                    "UI widgets may be native, for instance, while a more flexible JavaScript API condenses the universal parts of mobile development and maximizes code reuse.",
                    "As more native elements are introduced, some of the drawbacks of native development reappear, such as the costly need for multiple skillsets.",
                    "MADPs are most useful in scenarios where an application needs to work with many back-end data sources, many other mobile apps, or many operating systems.",
                    "( Inspired by Trigger.io )",
                    "A less comprehensive but more straightforward solution is to use code translators when building native apps for multiple operating systems.",
                    "These tools take native code and translate it into another platform's native code, or translate native code into a neutral low-level alternative, such as bytecode.",
                    "One example is Google's J2ObjC, which translates Java classes into their Objective-C equivalents, alleviating a lot the initial development of an iOS version of the app.",
                    "Although it's much more than a code translator, a product called Xamarin does something similar by allowing developers working with C# and.",
                    "NET in Visual Studio to produce a native ARM executable.",
                    "They can then take advantage of ahead-of-time ( AOT ) or just-in-time ( JIT ) compilation to run their apps on iOS and Android in addition to Windows Phone.",
                    "As is the case with hybrid apps, the UI presents a problem.",
                    "Because UI development can not be translated between platforms, code translators still require a significant knowledge of the native platform to write the UI.",
                    "In other words, code translators can provide substantial benefits in terms of cutting down development time, but they're not necessarily a `` write once, run anywhere'' solution.",
                    "NO SILVER BULLETS Between native apps, web apps, hybrid apps, and the growing number of MADPs, there are a lot of options for mobile development.",
                    "It's important to note that there is no one solution that does everything.",
                    "Some sacrifice affordability and accessibility for pure native performance, UI for easy cross-platform deployment, or ease of development for native authenticity.",
                    "Even the simplest tools come with some degree of a learning curve.",
                    "If a method with no trade-offs existed, the industry would adopt it en masse, and you would know about it.",
                    "Because there are trade-offs, developers and decision-makers will have to recognize their needs, and the needs of their users, in order to determine the best way to approach mobile development.",
                    "Want to read more articles like this ?",
                    "Download the free guide today !",
                    "2014 Guide to Mobile Development DZone's 2014 Guide to Mobile Development provides an analysis of the current state of mobile development and important strategies, tools, and insights for accelerating mobile development and includes:",
                    "In-depth articles written by industry experts Survey results from over 1000 mobile developers Profiles on 39 mobile developement tools and frameworks And much more !",
                    "Opinions expressed by DZone contributors are their own.",
                    "Selenium Vs. Cypress: Which Is Better in 2021 ?",
                    "Microservices: Breaking Down Traditional Application Design",
                    "The State of Serverless Computing 2021",
                    "What Is Slowing Down Your CI/CD Pipeline ?",
                    "About DZone Send feedback Careers",
                    "Developer Marketing Blog Advertise with DZone +1 (919)\u00a0238-7100",
                    "MVB Program Become a Contributor Visit the Writers' Zone",
                    "Terms of Service Privacy Policy",
                    "600 Park Offices Drive Suite 150 Research Triangle Park, NC 27709 support@dzone.com +1 (919)\u00a0678-0300",
                    ""
                ],
                "title": "The Mobile Landscape: Cross-Platform Problems and Solutions - DZone Java"
            }
        ]
    },
    "parsed": true
}